<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solnet.Metaplex</name>
    </assembly>
    <members>
        <member name="T:Solnet.Metaplex.Auctionhouse.AuctionHouseClient">
            <summary>
            Auction House Client
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.#ctor(Solnet.Rpc.IRpcClient,Solnet.Rpc.IStreamingRpcClient,Solnet.Wallet.PublicKey)">
            <summary>
            AH client Constructor
            </summary>
            <param name="rpcClient"></param>
            <param name="streamingRpcClient"></param>
            <param name="programId"></param>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetBidReceiptsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Bids Receipts
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetListingReceiptsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Listing Receipts
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetPurchaseReceiptsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve purchase receipts
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetAuctionHousesAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Auction Houses
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetAuctioneersAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Auctioneers
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetBidReceiptAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Bid Receipt
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetListingReceiptAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Listing Receipt
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetPurchaseReceiptAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Purchase Receipt
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetAuctionHouseAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Auction House
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.GetAuctioneerAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Retrieve Auctioneer
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SubscribeBidReceiptAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Auctionhouse.Accounts.BidReceipt},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe and receive Bid receipt 
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SubscribeListingReceiptAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Auctionhouse.Accounts.ListingReceipt},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe and receive Listing receipt
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SubscribePurchaseReceiptAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Auctionhouse.Accounts.PurchaseReceipt},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe purchase receipt
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SubscribeAuctionHouseAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Auctionhouse.Accounts.AuctionHouse},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe and receive auction house
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SubscribeAuctioneerAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Auctionhouse.Accounts.AuctioneerUser},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe and receive Auctioneer
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendWithdrawFromFeeAsync(Solnet.Metaplex.Auctionhouse.Types.WithdrawFromFeeAccounts,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Withdraw From Fee instruction
            </summary>
            <param name="accounts"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendWithdrawFromTreasuryAsync(Solnet.Metaplex.Auctionhouse.Types.WithdrawFromTreasuryAccounts,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Withdraw from Treasury instruction
            </summary>
            <param name="accounts"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendUpdateAuctionHouseAsync(Solnet.Metaplex.Auctionhouse.Types.UpdateAuctionHouseAccounts,System.Nullable{System.UInt16},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send UpdateAuctionHouse instruction
            </summary>
            <param name="accounts"></param>
            <param name="sellerFeeBasisPoints"></param>
            <param name="requiresSignOff"></param>
            <param name="canChangeSalePrice"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendCreateAuctionHouseAsync(Solnet.Metaplex.Auctionhouse.Types.CreateAuctionHouseAccounts,System.Byte,System.Byte,System.Byte,System.UInt16,System.Boolean,System.Boolean,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Create Auction house instruction
            </summary>
            <param name="accounts"></param>
            <param name="bump"></param>
            <param name="feePayerBump"></param>
            <param name="treasuryBump"></param>
            <param name="sellerFeeBasisPoints"></param>
            <param name="requiresSignOff"></param>
            <param name="canChangeSalePrice"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendBuyAsync(Solnet.Metaplex.Auctionhouse.Types.BuyAccounts,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Buy instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="escrowPaymentBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerBuyAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerBuyAccounts,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Auctioneer Buy instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="escrowPaymentBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendPublicBuyAsync(Solnet.Metaplex.Auctionhouse.Types.PublicBuyAccounts,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send public buy instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="escrowPaymentBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerPublicBuyAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerPublicBuyAccounts,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send auctioneer public buy instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="escrowPaymentBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendCancelAsync(Solnet.Metaplex.Auctionhouse.Types.CancelAccounts,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send cancel instruction
            </summary>
            <param name="accounts"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerCancelAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerCancelAccounts,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send auctioneer cancel instruction
            </summary>
            <param name="accounts"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendDepositAsync(Solnet.Metaplex.Auctionhouse.Types.DepositAccounts,System.Byte,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Deposit instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerDepositAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerDepositAccounts,System.Byte,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Auctioneer Deposit instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendExecuteSaleAsync(Solnet.Metaplex.Auctionhouse.Types.ExecuteSaleAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send ExecuteSale instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendExecutePartialSaleAsync(Solnet.Metaplex.Auctionhouse.Types.ExecutePartialSaleAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Execute Parital Sale instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="partialOrderSize"></param>
            <param name="partialOrderPrice"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerExecuteSaleAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerExecuteSaleAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Auctioneer Execute Sale instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerExecutePartialSaleAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerExecutePartialSaleAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,System.UInt64,System.Nullable{System.UInt64},System.Nullable{System.UInt64},Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Auctioneer Execute Parital Sale instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="partialOrderSize"></param>
            <param name="partialOrderPrice"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendSellAsync(Solnet.Metaplex.Auctionhouse.Types.SellAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Sell instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="buyerPrice"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerSellAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerSellAccounts,System.Byte,System.Byte,System.Byte,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send AuctioneerSell instruction
            </summary>
            <param name="accounts"></param>
            <param name="tradeStateBump"></param>
            <param name="freeTradeStateBump"></param>
            <param name="programAsSignerBump"></param>
            <param name="tokenSize"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendWithdrawAsync(Solnet.Metaplex.Auctionhouse.Types.WithdrawAccounts,System.Byte,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Withdraw instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendAuctioneerWithdrawAsync(Solnet.Metaplex.Auctionhouse.Types.AuctioneerWithdrawAccounts,System.Byte,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Auctioneer Withdraw instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="amount"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendCloseEscrowAccountAsync(Solnet.Metaplex.Auctionhouse.Types.CloseEscrowAccountAccounts,System.Byte,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Close Escrow Account instruction
            </summary>
            <param name="accounts"></param>
            <param name="escrowPaymentBump"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendDelegateAuctioneerAsync(Solnet.Metaplex.Auctionhouse.Types.DelegateAuctioneerAccounts,Solnet.Metaplex.Auctionhouse.Types.AuthorityScope[],Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Delegate Auctioneer instruction
            </summary>
            <param name="accounts"></param>
            <param name="scopes"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendUpdateAuctioneerAsync(Solnet.Metaplex.Auctionhouse.Types.UpdateAuctioneerAccounts,Solnet.Metaplex.Auctionhouse.Types.AuthorityScope[],Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Update Auctioneer instruction
            </summary>
            <param name="accounts"></param>
            <param name="scopes"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendPrintListingReceiptAsync(Solnet.Metaplex.Auctionhouse.Types.PrintListingReceiptAccounts,System.Byte,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send print listing receipt instruction
            </summary>
            <param name="accounts"></param>
            <param name="receiptBump"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendCancelListingReceiptAsync(Solnet.Metaplex.Auctionhouse.Types.CancelListingReceiptAccounts,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send cancel listing receipt instruction
            </summary>
            <param name="accounts"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendPrintBidReceiptAsync(Solnet.Metaplex.Auctionhouse.Types.PrintBidReceiptAccounts,System.Byte,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send print bid receipt instruction
            </summary>
            <param name="accounts"></param>
            <param name="receiptBump"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendCancelBidReceiptAsync(Solnet.Metaplex.Auctionhouse.Types.CancelBidReceiptAccounts,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send cancel bid receipt instruction
            </summary>
            <param name="accounts"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.SendPrintPurchaseReceiptAsync(Solnet.Metaplex.Auctionhouse.Types.PrintPurchaseReceiptAccounts,System.Byte,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Sign and send Print Purchase Receipt instruction
            </summary>
            <param name="accounts"></param>
            <param name="purchaseReceiptBump"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Auctionhouse.AuctionHouseClient.BuildErrorsDictionary">
            <summary>
            Build Error Book
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.Auctioneer.AuctioneerClient">
            <summary>
            Auctioneer Client for Metaplexs Auctioneer Program used with the Auction House Program
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.Bubblegum.BubblegumClient">
            <summary>
            NFT Compression with Metaplexs Bubblegum Client
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.Candymachine.CandyMachineClient">
            <summary>
            CandyMachine client for Metaplex protocol
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.Candymachine.Core.CandyMachineCoreClient">
            <summary>
            Candy Machine Core Client - The core is different than the main candy machine program
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.Hydra.HydraClient">
            <summary>
            Hydra Client for Metaplex Protocol
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.#ctor(Solnet.Rpc.IRpcClient,Solnet.Rpc.IStreamingRpcClient,Solnet.Wallet.PublicKey)">
            <summary>
            Hydra Client Constructor
            </summary>
            <param name="rpcClient"></param>
            <param name="streamingRpcClient"></param>
            <param name="programId"></param>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanouts
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMintsAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Mints
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMembershipVouchersAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Membership Vouchers
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMembershipMintVouchersAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Membership Mint Vouchers
            </summary>
            <param name="programAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMintAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Mint
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMembershipVoucherAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Membership Voucher
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.GetFanoutMembershipMintVoucherAsync(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Get Fanout Membership Mint Voucher
            </summary>
            <param name="accountAddress"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SubscribeFanoutAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Hydra.Accounts.Fanout},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe Fanout
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SubscribeFanoutMintAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Hydra.Accounts.FanoutMint},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe Fanout Mint
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SubscribeFanoutMembershipVoucherAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Hydra.Accounts.FanoutMembershipVoucher},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe Fanout Membership Voucher
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SubscribeFanoutMembershipMintVoucherAsync(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},Solnet.Metaplex.Hydra.Accounts.FanoutMembershipMintVoucher},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribe Fanout Membership Mint Voucher
            </summary>
            <param name="accountAddress"></param>
            <param name="callback"></param>
            <param name="commitment"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessInitAsync(Solnet.Metaplex.Hydra.Types.ProcessInitAccounts,Solnet.Metaplex.Hydra.Types.InitializeFanoutArgs,Solnet.Metaplex.Hydra.Types.MembershipModel,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            ProcessInit
            </summary>
            <param name="accounts"></param>
            <param name="args"></param>
            <param name="model"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessInitForMintAsync(Solnet.Metaplex.Hydra.Types.ProcessInitForMintAccounts,System.Byte,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Initialize for Mint Instruction
            </summary>
            <param name="accounts"></param>
            <param name="bumpSeed"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessAddMemberWalletAsync(Solnet.Metaplex.Hydra.Types.ProcessAddMemberWalletAccounts,Solnet.Metaplex.Hydra.Types.AddMemberArgs,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Add Member Wallet
            </summary>
            <param name="accounts"></param>
            <param name="args"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessAddMemberNftAsync(Solnet.Metaplex.Hydra.Types.ProcessAddMemberNftAccounts,Solnet.Metaplex.Hydra.Types.AddMemberArgs,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Add Member NFT
            </summary>
            <param name="accounts"></param>
            <param name="args"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessSetTokenMemberStakeAsync(Solnet.Metaplex.Hydra.Types.ProcessSetTokenMemberStakeAccounts,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Set Token Member Stake
            </summary>
            <param name="accounts"></param>
            <param name="shares"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessSetForTokenMemberStakeAsync(Solnet.Metaplex.Hydra.Types.ProcessSetForTokenMemberStakeAccounts,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Set For Token Member Stake 
            </summary>
            <param name="accounts"></param>
            <param name="shares"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessDistributeNftAsync(Solnet.Metaplex.Hydra.Types.ProcessDistributeNftAccounts,System.Boolean,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
             Send Process Distribute NFT
            </summary>
            <param name="accounts"></param>
            <param name="distributeForMint"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessDistributeWalletAsync(Solnet.Metaplex.Hydra.Types.ProcessDistributeWalletAccounts,System.Boolean,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Distribute Wallet
            </summary>
            <param name="accounts"></param>
            <param name="distributeForMint"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessDistributeTokenAsync(Solnet.Metaplex.Hydra.Types.ProcessDistributeTokenAccounts,System.Boolean,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Distribute Token
            </summary>
            <param name="accounts"></param>
            <param name="distributeForMint"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessSignMetadataAsync(Solnet.Metaplex.Hydra.Types.ProcessSignMetadataAccounts,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Send Process Sign Metadata
            </summary>
            <param name="accounts"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessTransferSharesAsync(Solnet.Metaplex.Hydra.Types.ProcessTransferSharesAccounts,System.UInt64,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Process Transfer Shares
            </summary>
            <param name="accounts"></param>
            <param name="shares"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.SendProcessUnstakeAsync(Solnet.Metaplex.Hydra.Types.ProcessUnstakeAccounts,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Wallet.PublicKey)">
            <summary>
            Process Unstake
            </summary>
            <param name="accounts"></param>
            <param name="feePayer"></param>
            <param name="signingCallback"></param>
            <param name="programId"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Hydra.HydraClient.BuildErrorsDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataAuthProgram">
            <summary>
            Implements the Metadata Auth program methods.
            <remarks>
            For more information see:
            https://github.com/metaplex-foundation/metaplex
            https://metaplex-foundation.github.io/metaplex-program-library/docs/token-metadata/index.html
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAuthProgram.ProgramIdKey">
            <summary>
            The public key of the Metadata Program.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAuthProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataAuthProgram.CreateorUpdateRuleset(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Byte[])">
            <summary>
            
            </summary>
            <param name="payerKey"></param>
            <param name="rulesetPDA"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataAuthProgramData">
            <summary>
            Implements the metadata program data encodings.
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataAccount">
            <summary> Metaplex Metadata Account Class </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.metadataKey">
            <summary> metadata public key </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.updateAuthority">
            <summary> update authority key </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.mint">
            <summary> mint public key </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.metadata">
            <summary> data struct </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.offchainData">
            <summary> Off Chain Metadata </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.accInfo">
            <summary> standard Solana account info </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataAccount.owner">
            <summary> owner, should be Metadata program</summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataAccount.#ctor(Solnet.Rpc.Models.AccountInfo)">
            <summary> Constructor </summary>
            <param name="accInfo"> Soloana account info </param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataAccount.FetchOffChainMetadata(System.String)">
            <summary> Tries to get a json file from the uri </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataAccount.ParseData(System.Collections.Generic.List{System.String})">
            <summary> Parse raw data used to propagate the metadata account class</summary>
            <param name="data"> data </param>
            <returns> data struct </returns>
            <remarks> parses an array of bytes into a data struct </remarks>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataAccount.GetAccount(Solnet.Rpc.IRpcClient,Solnet.Wallet.PublicKey)">
            <summary>GetAccount Method Retrieves the metadata of a token including both onchain and offchain data</summary>
            <param name="client"> solana rpcclient </param>
            <param name="tokenAddress"> public key of a account to parse </param>
            <returns> Metadata account </returns>
            <remarks> it will try to find a metadata even from a token associated account </remarks>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataProgram">
            <summary>
            Implements the Metadata program methods.
            <remarks>
            For more information see:
            https://github.com/metaplex-foundation/metaplex
            https://metaplex-foundation.github.io/metaplex-program-library/docs/token-metadata/index.html
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataProgram.ProgramIdKey">
            <summary>
            The public key of the Metadata Program.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.CreateMetadataAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Metaplex.NFT.Library.Metadata,Solnet.Metaplex.NFT.Library.TokenStandard,System.Boolean,System.Boolean,Solnet.Wallet.PublicKey,System.Int32,System.UInt64,Solnet.Metaplex.NFT.Library.MetadataVersion)">
            <summary>
            Create Metadata for token mint instruction
            </summary>
            <param name="metadataKey"> Metadata key (pda of ['metadata', program id, mint id]) </param>
            <param name="masterEditionKey"> MasterEdition Address - optional</param>
            <param name="mintKey"> Mint of token asset </param>
            <param name="authorityKey"> Mint authority </param>
            <param name="payerKey"> Transaction payer </param>
            <param name="updateAuthority"> Metadata update authority </param>
            <param name="data"> Metadata struct with name,symbol,uri and optional list of creators </param>
            <param name="updateAuthorityIsSigner"> Is the update authority a signer </param>
            <param name="isMutable"> Will the account stay mutable.</param>
            <param name="collectionDetails"> Collection details - serial code</param>
            <param name="metadataVersion"> Metadata Version - Default is V4 but backport to V1 and V3 is available</param>
            <param name="tokenStandard">Token Standard</param>
            <param name="maxSupply"> Max supply of the Token</param>
            <returns>The transaction instruction.</returns> 
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.Mint(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Int32)">
            <summary>
            Omni-Mint Metaplex NFT Instruction - Supports programmable NFTs
            </summary>
            <param name="metadataKey"> Metadata key (pda of ['metadata', program id, mint id]) </param>
            <param name="mintKey"> Mint of token asset </param>
            <param name="authorityKey"> Mint authority </param>
            <param name="payerKey"> Transaction payer </param>
            <param name="associatedTokenAccount"> Metadata struct with name,symbol,uri and optional list of creators </param>
            <param name="masterEditionKey"> MasterEdition Address - optional </param>
            <param name="tokenOwner"> Token Owner Address - optional - preferred </param>
            <param name="delegateRecord"> Delegate Record Account Address  - optional</param>
            <param name="tokenRecord"> Token Record Account Address  - optional</param>
            <param name="tokenRuleset"> Token Ruleset Account Address - optional</param>
            <param name="amount"> Amount of tokens to mint</param>
            <returns>The transaction instruction.</returns> 
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.UpdateMetadataAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Metaplex.NFT.Library.Metadata,System.Nullable{System.Boolean})">
            <summary>
             Update metadata account.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.SignMetadata(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Sign a piece of metadata that has you as an unverified creator so that it is now verified.
            </summary>
            <param name="metadataKey"> PDA of ('metadata', program id, mint id) </param>
            <param name="creatorKey"> Creator key </param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.PuffMetada(Solnet.Wallet.PublicKey)">
            <summary>
            Make all of metadata variable length fields (name/uri/symbol) a fixed length
            </summary>
            <param name="metadataKey"> PDA of ('metadata', program id, mint id) </param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.UpdatePrimarySaleHappendViaToken(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
             Allows updating the primary sale boolean on Metadata solely through owning an account
            containing a token from the metadata's mint and being a signer on this transaction.
            A sort of limited authority for limited update capability that is required for things like
            Metaplex to work without needing full authority passing.
            </summary>
            <param name="metadataKey"> Metadata key (pda of ['metadata', program id, mint id]) </param>
            <param name="owner"> Owner on the token account </param>
            <param name="tokenAccount">  Account containing tokens from the metadata's mint </param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.CreateMasterEdition(System.Nullable{System.UInt64},Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
             Create MasterEdition PDA.
            </summary>
            <param name="maxSupply"></param>
            <param name="masterEditionKey"> PDA of [ 'metadata', program id, mint, 'edition' ]</param>
            <param name="mintKey"></param>
            <param name="updateAuthorityKey"> </param>
            <param name="mintAuthority"> Mint authority on the metadata's mint - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY </param>
            <param name="payer"></param>
            <param name="metadataKey"></param>
            <returns> Transaction instruction. </returns>/
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.MintNewEditionFromMasterEditionViaToken(System.UInt32,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
             Mint a new edition via token
            </summary>
            <param name="edition"></param>
            <param name="newMetadataKey"></param>
            <param name="newEdition"></param>
            <param name="masterEdition"></param>
            <param name="newMint"></param>
            <param name="newMintAuthority"></param>
            <param name="payer"></param>
            <param name="tokenAccountOwner"></param>
            <param name="tokenAccount"></param>
            <param name="updateAuthority"></param>
            <param name="metadataKey"></param>
            <param name="metadataMint"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the Metadata Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataProgramData">
            <summary>
            Implements the metadata program data encodings.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgramData.EncodeCreateMetadataAccountData(Solnet.Metaplex.NFT.Library.Metadata,Solnet.Metaplex.NFT.Library.TokenStandard,System.Boolean,System.UInt64,System.Int32,Solnet.Metaplex.NFT.Library.MetadataVersion)">
            <summary>
            Make encodings for CreateMetadataAccount instruction
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgramData.EncodeUpdateMetadataData(Solnet.Metaplex.NFT.Library.Metadata,Solnet.Wallet.PublicKey,System.Nullable{System.Boolean},Solnet.Metaplex.NFT.Library.MetadataVersion)">
            <summary>
            Make encodings for UpdateMetadata instruction
            </summary>        
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.MetadataProgramData.EncodeCreateMasterEdition(System.Nullable{System.UInt64})">
            <summary>
            Make encodings for CreateMasterEdition instruction
            </summary> 
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataPacketLayout">
            <summary>
            Create Instruction packet layout
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.MethodOffset">
            <summary>
            Discriminator Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.nameOffset">
            <summary>
            Name Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.symbolOffset">
            <summary>
            Symbol Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.uriOffset">
            <summary>
            URL Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.feeBasisOffset">
            <summary>
            FeeBasis Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.creatorSwitchOffset">
            <summary>
            Creator Stream Position
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataPacketLayout.creatorsCountOffset">
            <summary>
            Creators Count Stream Position
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.ProgrammableConfig">
            <summary>
            ProgrammableConfig class
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.ProgrammableConfig.key">
            <summary>
            ProgrammableConfig Ruleset public key.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.ProgrammableConfig.length">
            <summary>
             ProgrammableConfig data byte length
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.ProgrammableConfig.#ctor(Solnet.Wallet.PublicKey)">
            <summary>
            ProgrammableConfig Constructor
            </summary>
            <param name="key"> Ruleset Mint Address/Public Key</param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.ProgrammableConfig.Encode">
            <summary>
             Encode ProgrammableConfig data ( serialize ).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.Uses">
            <summary>
            Uses class - Consumable NFT
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Uses.useMethod">
            <summary>
             useMethod Enum (0 = burn, 1 = multiple, 2 = single)
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Uses.remaining">
            <summary>
             remaining uses - usually the same as total on creation
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Uses.total">
            <summary>
             total NFT uses
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Uses.length">
            <summary>
             usage length
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Uses.#ctor(Solnet.Metaplex.NFT.Library.UseMethod,System.Int32,System.Int32)">
            <summary>
            Uses Constructor
            </summary>
            <param name="_useMethod"> useMethod - 0 = burn, 1 = multiple, 2 = single</param>
            <param name="_remaining"> remaining</param>
            <param name="_total"> total</param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Uses.Encode">
            <summary>
             Encode Usage data ( serialize ).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.Collection">
            <summary>
            Collection class
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Collection.key">
            <summary>
            Collection public key.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Collection.verified">
            <summary>
             Did the collection sign?
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Collection.length">
            <summary>
             Collection data byte length in an account data.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Collection.#ctor(Solnet.Wallet.PublicKey,System.Boolean)">
            <summary>
             Collection constructor.
            </summary>
            <param name="key"> Public key of the collection</param>
            <param name="verified"> Did the collection sign?</param>/
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Collection.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
             Construct a Collection from a byte array ( deserialize ).
            </summary>
            <param name="encoded"></param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Collection.Encode">
            <summary>
             Encode Collection data ( serialize ).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.Creator">
            <summary>
            Creator class.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Creator.key">
            <summary>
            Creators public key.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Creator.verified">
            <summary>
             Did the creator sign?
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Creator.share">
            <summary>
            Creators share in percentages.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Creator.length">
            <summary>
             Creator data byte lenght in an account data.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Creator.#ctor(Solnet.Wallet.PublicKey,System.Byte,System.Boolean)">
            <summary>
             Creator constructor.
            </summary>
            <param name="key"> Public key of the creator</param>
            <param name="share"> Creators share in percentages</param>
            <param name="verified"> Did the creator sign?</param>/
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Creator.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
             Construct a Creator from a byte array ( deserialize ).
            </summary>
            <param name="encoded"></param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.Creator.Encode">
            <summary>
             Encode Creators data ( serialize ).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.OnChainData">
            <summary>Dynamic Metadata Class thats supports all 3 metadata versions</summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.version">
            <summary>
            Metadata Version
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.name">
            <summary> name </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.symbol">
            <summary> short symbol </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.uri">
            <summary> uri of metadata </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.sellerFeeBasisPoints">
            <summary> Seller cut </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.hasCreators">
            <summary> Has Creators </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.OnChainData.creators">
            <summary> Creators array </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.OnChainData.collectionLink">
            <summary> Collection link </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.OnChainData.uses">
            <summary> USEs </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.OnChainData.programmableConfig">
            <summary> Program ruleset </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.isMutable">
            <summary> isMutable </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.editionNonce">
            <summary> Edition Type </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.tokenStandard">
            <summary> Token Standard - Fungible / non-fungible </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.OnChainData.metadata">
            <summary> metadata json </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.OnChainData.#ctor(System.String,System.String,System.String,System.UInt32,System.Collections.Generic.IList{Solnet.Metaplex.NFT.Library.Creator},System.Int32,System.Int32,Solnet.Metaplex.NFT.Library.Collection,Solnet.Metaplex.NFT.Library.Uses,Solnet.Metaplex.NFT.Library.ProgrammableConfig,System.Boolean)">
            <summary> Constructor </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.Metadata">
            <summary>
            Metadata V3 Data class for instructions
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Metadata.name">
            <summary>  Name or discription. Max 32 bytes. </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Metadata.symbol">
            <summary>  Symbol. Max 10 bytes. </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Metadata.uri">
            <summary>  Uri. Max 100 bytes. </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.Metadata.sellerFeeBasisPoints">
            <summary>  Seller fee basis points for secondary sales. </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.Metadata.creators">
            <summary>  List of creators. </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.Metadata.collection">
            <summary>  Collection Address and Verification </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.Metadata.uses">
            <summary> NFT Uses </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.Library.Metadata.programmableConfig">
            <summary>ProgrammableConfig</summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.UseMethod">
            <summary>
            Use method function type
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.UseMethod.Burn">
            <summary>
            Burn Usage Function
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.UseMethod.Multiple">
            <summary>
            Multi-Usage Function
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.UseMethod.Single">
            <summary>
            Single-Usage Function
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataVersion">
            <summary>
            Metadata Versions - Used to override the version when creating the metadata. Use the latest version when minting a new collection
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataVersion.V1">
            <summary>  Original metadata version 1 </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataVersion.V3">
            <summary>  Enhanced metadata version 3 </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataVersion.V4">
            <summary>  Programmabled metadata version 4 </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.TokenStandard">
            <summary>
            Metadata Versions - Used to override the version when creating the metadata. Use the latest version when minting a new collection
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.TokenStandard.NonFungible">
            <summary>  This is a master edition.</summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.TokenStandard.FungibleAsset">
            <summary> A token with metadata that can also have attrributes.</summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.TokenStandard.Fungible">
            <summary>  A token with simple metadata.</summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.TokenStandard.NonFungibleEdition">
            <summary> This is a limited edition.</summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.TokenStandard.ProgrammableNonFungible">
            <summary>  [NEW] An NFT with customizale behaviour for lifecycle events
            (e.g. transfers, updates, etc.). </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataInstructionBook">
            <summary>
            A dictionary collection with all the instructions defined
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataInstructionBook.Names">
            <summary>
            Represents the user-friendly names for the instruction discriminator types for the <see cref="T:Solnet.Metaplex.NFT.Library.MetadataProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.InstructionID">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Metaplex.NFT.Library.MetadataProgram"/>. Values are defined by the discriminator of each instruction labeled in Metaplex Docs.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.CreateMetadataAccount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.UpdateMetadataAccount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedCreateMasterEdition">
             <summary>
            
             </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedMintNewEditionFromMasterEditionViaPrintingToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.UpdatePrimarySaleHappenedViaToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedSetReservationList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedCreateReservationList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.SignMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedMintPrintingTokensViaToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.DeprecatedMintPrintingTokens">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.CreateMasterEdition">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.MintNewEditionFromMasterEditionViaToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.ConvertMasterEditionV1ToV2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.MintNewEditionFromMasterEditionViaVaultProxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.PuffMetadata">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.CreateMetadataAccountV3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.OmniCreate">
            <summary>
            Omni Create Instruction
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.OmniMint">
            <summary>
            Omni Mint Instruction
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.InstructionID.VerifyV4">
            <summary>
            Verify Instruction V4
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.MetadataDelegateRole">
            <summary>
            Delegate Role Variants
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataDelegateRole.Authority">
            <summary>
            Authority Role
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataDelegateRole.Collection">
            <summary>
            Collection Role
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataDelegateRole.Use">
            <summary>
            Use Role
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.MetadataDelegateRole.Update">
            <summary>
            Update Role
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.VaultKey">
            <summary>
            Vault Key Enum
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultKey.Uninitialized">
            <summary>
            Uninitialized
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultKey.VaultV1">
            <summary>
            Vault V1 Key
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultKey.SafetyDepositBoxV1">
            <summary>
            Saftey Deposit Box Key
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultKey.ExternalPriceAccountV1">
            <summary>
            External Price Account Key
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.VaultState">
            <summary>
            Vault State Enum
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultState.Inactive">
            <summary>
            Inactive vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultState.Active">
            <summary>
            Active Vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultState.Combined">
            <summary>
             Hybrid State Vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultState.Deactivated">
            <summary>
            Deactivated Vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Metaplex.NFT.Library.VaultProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID">
            <summary>
            Instruction IDs for the Vault Program
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.InitVault">
            <summary>
            Initialize vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.AddTokenToInactiveVault">
            <summary>
            Add a token to an inactive vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.ActivateVault">
            <summary>
            Activate the vault
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.CombineVault">
            <summary>
            Combine the vault into a hybrid
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.RedeemShares">
            <summary>
            Redeem vault shares
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.WithdrawTokenFromSafetyDepositBox">
            <summary>
            Withdraw Token from Safety Deposit Box
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.MintFractionalShares">
            <summary>
            Mint Fractional Shares
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.WithdrawSharesFromTreasury">
            <summary>
            Withdraw Shares from Treasury
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.AddSharesToTreasury">
            <summary>
            Add Shares to Treasury
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.UpdateExternalPriceAccount">
            <summary>
            Update External Price 
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultInstructionBook.InstructionID.SetAuthority">
            <summary>
            Set Authority
            </summary>
        </member>
        <member name="T:Solnet.Metaplex.NFT.Library.VaultProgram">
            
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultProgram.ProgramIdKey">
            <summary>
            The public key of the Vault Program.
            </summary>
        </member>
        <member name="F:Solnet.Metaplex.NFT.Library.VaultProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.InitVault(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Boolean)">
            <summary>
             Inititialize the vault
            </summary>
            <param name="ShareMint"></param>
            <param name="RedeemTreasuryTokenAccount"></param>
            <param name="FractionTreasuryTokenAccount"></param>
            <param name="Vault"></param>
            <param name="VaultAuthority"></param>
            <param name="PriceLookupAddress"></param>
            <param name="allowFurtherShareCreation"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.AddTokenToInactiveVault(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Adds a token to a inactive vault
            </summary>
            <param name="SafetyDepositBox"></param>
            <param name="TokenAccount"></param>
            <param name="TokenStoreAccount"></param>
            <param name="FractionTreasuryTokenAccount"></param>
            <param name="VaultAuthority"></param>
            <param name="Payer"></param>
            <param name="TransferAuthority"></param>
            <param name="amount" type="UInt64"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.ActivateVault(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Activate a vault
            </summary>
            <param name="Vault"></param>
            <param name="FractionMint"></param>
            <param name="FractionTreasury"></param>
            <param name="FractionMintAuthority"></param>
            <param name="VaultAuthority"></param>
            <param name="numberOfInitialShares"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.CombineVault(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Combines the vault
            </summary>
            <param name="Vault"></param>
            <param name="TokenAccountShares"></param>
            <param name="TokenAccountReedem"></param>  
            <param name="FractionMint"></param>
            <param name="FractionTreasury"></param>
            <param name="ReedemTreasury"></param>
            <param name="NewVaultAuthority"></param>
            <param name="VaultAuthority"></param>
            <param name="TransferAuthority"></param>
            <param name="BurnAuthority"></param>
            <param name="PricingOracle"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.RedeemShares(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary> Redeem shares </summary>
            <param name="TokenAccountShares"></param>
            <param name="TokenAccountReedem"></param>
            <param name="FractionMint"></param>
            <param name="ReedemTreasury"></param>
            <param name="TransferAuthority"></param>
            <param name="BurnAuthority"></param>
            <param name="Vault"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.WithdrawTokenFromSafetyDepositBox(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary> Withdraw tokens from the safety deposit box </summary>    
            <param name="Destination"></param>
            <param name="SafetyDepositBox"></param>
            <param name="Store"></param>
            <param name="Vault"></param>
            <param name="FractionMint"></param>
            <param name="VaultAuthority"></param>
            <param name="TransferAuthority"></param>
            <param name="Amount"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.MintFractionalShares(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary> mint more fractional shares if the vault is configured to allow such </summary>
            <param name="FractionTreasury"></param>
            <param name="FractionMint"></param>
            <param name="Vault"></param>
            <param name="MintAuthority"></param>
            <param name="VaultAuthority"></param>
            <param name="Amount"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.WithdrawSharesFromTreasury(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary> Withdraws shares from the treasury to a desired account </summary>
            <param name="Destination"></param>
            <param name="FractionTreasury"></param>
            <param name="Vault"></param>
            <param name="TransferAuthority"></param>
            <param name="VaultAuthority"></param>
            <param name="Amount"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.AddSharesToTreasury(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary> Returns shares to the vault if you wish to remove them from circulation </summary>
            <param name="Source"></param>
            <param name="FractionTreasury"></param>
            <param name="Vault"></param>
            <param name="TransferAuthority"></param>
            <param name="VaultAuthority"></param>
            <param name="Amount"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.UpdateExternalPriceAccount(Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey,System.Boolean)">
            <summary> Helpful method that isn't necessary to use for main users of the app, but allows one to create/update existing external price account fields if they are signers of this account. Useful for testing purposes, and the CLI makes use of it as well so that you can verify logic. </summary>
            <param name="ExternalPriceAccount" type="PublicKey"></param>
            <param name="PricePerShare" type="UInt64"></param>
            <param name="PriceMint" type="PublicKey"></param>
            <param name="AllowedToCombine" type="bool"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.SetAuthority(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary> Sets the authority of the vault to a new authority </summary>
            <param name="Vault"></param>
            <param name="VaultAuthority"></param>
            <param name="NewAuthority"></param>
            <returns> TransactionInstruction </returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the Vault Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.Library.VaultProgramData.DecodeInitVault(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            DECODING FUNCTIONS
        </member>
        <member name="T:Solnet.Metaplex.NFT.MetadataClient">
            <summary>
             A simple Metaplex Client to make create and minting metadata tokens extremely easy
            </summary>
        </member>
        <member name="P:Solnet.Metaplex.NFT.MetadataClient.RpcClient">
            <summary>
            RPC client used to send transactions to the blockchain
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.NFT.MetadataClient.#ctor(Solnet.Rpc.IRpcClient)">
            <summary>
            Initialize metaplex client
            </summary>
            <param name="_RPCclient"></param>
        </member>
        <member name="M:Solnet.Metaplex.NFT.MetadataClient.CreateNFT(Solnet.Wallet.Account,Solnet.Wallet.Account,Solnet.Metaplex.NFT.Library.TokenStandard,Solnet.Metaplex.NFT.Library.Metadata,System.Boolean,System.Boolean,Solnet.Metaplex.NFT.Library.MetadataVersion,Solnet.Wallet.PublicKey,Solnet.Wallet.Account,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Metaplex.NFT.Library.MetadataDelegateRole,System.Boolean,System.UInt64,System.Int32)">
            <summary>
            Omni-Create Instruction to create a metadata token of any type
            </summary>
            <param name="ownerAccount"> Owner Account - Controller Wallet/Account </param>
            <param name="mintAccount"> Mint Account - The token account that will become the mint account once the mint is initialized </param>
            <param name="tokenStandard"> Token Standard - Required to create a specific type of token. Semi-fungible, fungible, non-fungible or programmable.</param>
            <param name="metaData"> Metadata Objec that contains all the on-chain data including the off-chain data uri</param>
            <param name="isMasterEdition"> Is Masteredition - true or false </param>
            <param name="isMutable"> Is updatable - true or false</param>
            <param name="metadataVersion"> Metadataversion used to access different versions of the metadata instructions</param>
            <param name="_Authority"> Authority Address - Optional - ownerAccount by default</param>
            <param name="_UpdateAuthority"> Update Authority - Optional - owneraccount by default</param>
            <param name="_payerAddress">Fee Payer Address - Optional - ownerAccount by default</param>
            <param name="delegateAddress">Delegate address - Optional</param>
            <param name="delegateRole">Delegate role - optional - required if delegate address is used</param>
            <param name="UpdateAuthorityIsSigner">Is the update authority a signer? True by default as the owneraccount</param>
            <param name="collectionDetails">Collection details data</param>
            <param name="maxSupply">Max supply of a master edition token</param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.MetadataClient.Mint(Solnet.Wallet.Account,Solnet.Wallet.Account,System.Boolean,System.Int32,Solnet.Wallet.PublicKey,Solnet.Wallet.Account,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Metaplex.NFT.Library.MetadataDelegateRole)">
            <summary>
            Omni-Mint Instruction to mint Metaplex metadata tokens of any type
            </summary>
            <param name="ownerAccount">Owner Account</param>
            <param name="mintAccount">Mint Account</param>
            <param name="isMasterEdition"> Is master edition?</param>
            <param name="mintAmount">Amount that will be minted</param>
            <param name="_Authority"> Authority Address - Optional </param>
            <param name="_UpdateAuthority">Update Authority Address - Optional</param>
            <param name="_payerAddress">Fee payer address - Optional</param>
            <param name="delegateAddress">Delegate address - Optional</param>
            <param name="delegateRole">Delegate role - Optional</param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.NFT.MetadataClient.RetrieveTokenMetadata(Solnet.Wallet.PublicKey)">
            <summary>
            Retrieve and view token metadata as a Metadata Account object
            </summary>
            <param name="tokenAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard">
            <summary> Metaplex Token Standard Offchain JSON Structure class </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.name">
            <summary> Metadata token name - Wallets recognize this as the true name </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.symbol">
            <summary> Metadata collection symbol </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.description">
            <summary> Metadata token description </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.seller_fee_basis_points">
            <summary>Creators secondary market fee</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.default_image">
            <summary> Primary display image for the token </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.animation_url">
            <summary> Secondary display for the token </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.external_url">
            <summary> Brand website </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.attributes">
            <summary> Metadata token attributes used to compare NFTs without looking at them</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.collection">
            <summary> Metadata token collection family </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.MetaplexTokenStandard.properties">
            <summary> Metadata token content receipt</summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.Attribute">
            <summary> JSON class for the Attribute object </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Attribute.trait_type">
            <summary>Attribute trait type. Usually an object type</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Attribute.value">
            <summary>The value of the attribute object</summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.Collection">
            <summary> JSON class for the Collection object </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Collection.name">
            <summary> Collection name</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Collection.family">
            <summary> Collection family</summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.FileType">
            <summary> JSON class for the Properties FileType object </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.FileType.uri">
            <summary> Offsite file URI link </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.FileType.type">
            <summary> File type used to know how to render the content </summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.Creator">
            <summary> JSON class for the Creator object </summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Creator.address">
            <summary> Creator account address</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Creator.share">
            <summary> Creators share </summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.Json.Properties">
            <summary> JSON class for the Properties object</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Properties.files">
            <summary> Files linked to token. Core link between the token and its content</summary>
        </member>
        <member name="P:Solnet.Metaplex.Utilities.Json.Properties.creators">
            <summary> Creators of the token and content. Should always be signed</summary>
        </member>
        <member name="T:Solnet.Metaplex.Utilities.PDALookup">
            <summary>
            PDA Lookup Class to make finding PDAs simple
            </summary>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindMetadataPDA(Solnet.Wallet.PublicKey)">
            <summary>
            Find the Metadata PDA from the mint address
            </summary>
            <param name="mintAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindMasterEditionPDA(Solnet.Wallet.PublicKey)">
            <summary>
            Find the master edition PDA from a mint address
            </summary>
            <param name="mintAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindEditionMarkerPDA(Solnet.Wallet.PublicKey)">
            <summary>
            Find the Edition Marker PDA to keep track of which editions were minted
            </summary>
            <param name="_EditionAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindTokenRecordPDA(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Find the Token Record PDA if nothing is found the program address is returned
            </summary>
            <param name="ownerAccount"></param>
            <param name="mintAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindDelegateRecordPDA(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Metaplex.NFT.Library.MetadataDelegateRole)">
            <summary>
            Find the Delegate Record PDA if nothing is found the program address is returned
            </summary>
            <param name="updateAuthority"></param>
            <param name="mintAddress"></param>
            <param name="delegateAddress"></param>
            <param name="delegateRole"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindCollectionAuthRecordPDA(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Find the collection authority PDA using the mint address and collection authority address
            </summary>
            <param name="mintAddress"></param>
            <param name="collectionAuthority"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindUseAuthorityRecordPDA(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Find Use Authority Record PDA
            </summary>
            <param name="mintAddress"></param>
            <param name="useAuthority"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindRulesetPDA(Solnet.Wallet.PublicKey,System.String)">
            <summary>
            Find RuleSet PDA using Auth Program and ruleset name
            </summary>
            <param name="payer"></param>
            <param name="rulesetName"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Metaplex.Utilities.PDALookup.FindVaultPDA(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Find Vault PDA using vault address and mint address
            </summary>
            <param name="VaultAddress"></param>
            <param name="MintAddress"></param>
            <returns></returns>
        </member>
    </members>
</doc>
