<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnrealEngine.Framework</name>
    </assembly>
    <members>
        <member name="T:UnrealEngine.Framework.LinearColor">
            <summary>
            A linear 32-bit floating-point RGBA color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance the linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.#ctor(System.Numerics.Vector3,System.Single)">
            <summary>
            Initializes a new instance the linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance the linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance the linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.#ctor(System.Single[])">
            <summary>
            Initializes a new instance the linear color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.R">
            <summary>
            Gets or sets the red component of the linear color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.G">
            <summary>
            Gets or sets the green component of the linear color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.B">
            <summary>
            Gets or sets the blue component of the linear color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.A">
            <summary>
            Gets or sets the alpha component of the linear color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Black">
            <summary>
            The black color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Blue">
            <summary>
            The blue color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Green">
            <summary>
            The green color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Grey">
            <summary>
            The grey color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Red">
            <summary>
            The red color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.White">
            <summary>
            The white color
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LinearColor.Yellow">
            <summary>
            The yellow color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Equality(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Inequality(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Addition(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Adds two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Subtraction(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Subtracts two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Multiply(System.Single,UnrealEngine.Framework.LinearColor)">
            <summary>
            Multiplies two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Division(System.Single,UnrealEngine.Framework.LinearColor)">
            <summary>
            Divides two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Implicit(System.Drawing.Color)~UnrealEngine.Framework.LinearColor">
            <summary>
            Implicitly casts color instance to a linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.op_Implicit(UnrealEngine.Framework.LinearColor)~System.String">
            <summary>
            Implicitly casts this instance to a string
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Add(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Adds two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Subtract(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Subtracts two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Multiply(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Multiplies two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Divide(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor)">
            <summary>
            Divides two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Lerp(UnrealEngine.Framework.LinearColor,UnrealEngine.Framework.LinearColor,System.Single)">
            <summary>
            Performs a linear interpolation between two colors
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.FromColor(System.Drawing.Color)">
            <summary>
            Converts the color into a linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.ToVector3">
            <summary>
            Converts the linear color into a three component vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.ToVector4">
            <summary>
            Converts the linear color into a four component vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.ToArray">
            <summary>
            Creates an array containing the elements of the linear color
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.ToString">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.ToString(System.IFormatProvider)">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Equals(UnrealEngine.Framework.LinearColor)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LinearColor.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Transform">
            <summary>
            Transform composed of location, rotation, and scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.#ctor(System.Numerics.Vector3,System.Numerics.Quaternion,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance the transform
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Transform.Location">
            <summary>
            Gets or sets the location component
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Transform.Rotation">
            <summary>
            Gets or sets the rotation component
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Transform.Scale">
            <summary>
            Gets or sets the scale component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.op_Equality(UnrealEngine.Framework.Transform,UnrealEngine.Framework.Transform)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.op_Inequality(UnrealEngine.Framework.Transform,UnrealEngine.Framework.Transform)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.op_Implicit(UnrealEngine.Framework.Transform)~System.String">
            <summary>
            Implicitly casts this instance to a string
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.ToString">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.ToString(System.IFormatProvider)">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.Equals(UnrealEngine.Framework.Transform)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Transform.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Hit">
            <summary>
            A trace hit
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.Location">
            <summary>
            Returns the location in world space where the moving shape would end up against the impacted object if there was a hit
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.ImpactLocation">
            <summary>
            Returns the location in world space of the actual contact of the trace shape with the impacted object
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.Normal">
            <summary>
            Returns the normal of the hit in world space for the object that was swept
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.ImpactNormal">
            <summary>
            Returns the normal of the hit in world space for the object that was hit by the sweep
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.TraceStart">
            <summary>
            Returns the start location of the trace
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.TraceEnd">
            <summary>
            Returns the end location of the trace
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.Time">
            <summary>
            Returns the impact along trace direction between 0.0f and 1.0f if there was a hit, indicating time between <see cref="P:UnrealEngine.Framework.Hit.TraceStart"/> and <see cref="P:UnrealEngine.Framework.Hit.TraceEnd"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.Distance">
            <summary>
            Returns the distance from <see cref="P:UnrealEngine.Framework.Hit.TraceStart"/> to <see cref="P:UnrealEngine.Framework.Hit.Location"/> in world space
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.PenetrationDepth">
            <summary>
            Returns the distance along with <see cref="P:UnrealEngine.Framework.Hit.Normal"/> that will result in moving out of penetration if <see cref="P:UnrealEngine.Framework.Hit.StartPenetrating"/> is <c>true</c> and a penetration vector can be computed
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.BlockingHit">
            <summary>
            Returns <c>true</c> if the hit was a result of blocking collision
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Hit.StartPenetrating">
            <summary>
            Returns <c>true</c> if the trace started penetration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.GetActor">
            <summary>
            Returns the owner actor of the component that was hit or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.op_Implicit(UnrealEngine.Framework.Hit)~System.String">
            <summary>
            Implicitly casts this instance to a string
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.ToString">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.ToString(System.IFormatProvider)">
            <summary>
            Returns a string that represents this instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.op_Equality(UnrealEngine.Framework.Hit,UnrealEngine.Framework.Hit)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.op_Inequality(UnrealEngine.Framework.Hit,UnrealEngine.Framework.Hit)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.Equals(UnrealEngine.Framework.Hit)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Hit.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Bounds">
            <summary>
            A combined axis-aligned bounding box and bounding sphere with the same origin
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Bounds.Origin">
            <summary>
            Returns the origin of the bounding box and sphere
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Bounds.BoxExtent">
            <summary>
            Returns the extent of the bounding box
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Bounds.SphereRadius">
            <summary>
            Returns the radius of the bounding sphere
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Bounds.op_Equality(UnrealEngine.Framework.Bounds,UnrealEngine.Framework.Bounds)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Bounds.op_Inequality(UnrealEngine.Framework.Bounds,UnrealEngine.Framework.Bounds)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Bounds.Equals(UnrealEngine.Framework.Bounds)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Bounds.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Bounds.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CollisionShape">
            <summary>
            A collision shape
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CollisionShape.ShapeType">
            <summary>
            Returns the shape type
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.CreateBox(System.Numerics.Vector3@)">
            <summary>
            Returns a box shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.CreateSphere(System.Single)">
            <summary>
            Returns a sphere shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.CreateCapsule(System.Single,System.Single)">
            <summary>
            Returns a capsule shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.op_Equality(UnrealEngine.Framework.CollisionShape,UnrealEngine.Framework.CollisionShape)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.op_Inequality(UnrealEngine.Framework.CollisionShape,UnrealEngine.Framework.CollisionShape)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.Equals(UnrealEngine.Framework.CollisionShape)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CollisionShape.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Assert">
            <summary>
            Functionality to detect and diagnose unexpected or invalid runtime conditions during development, emitted if the assembly is built with the <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build#options">Debug</a> configuration or if <c>ASSERTIONS</c> symbol is defined, signals a breakpoint to an attached debugger
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Assert.IsFalse(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Logs an assertion if condition is <c>true</c>, and prints it on the screen
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Assert.IsTrue(System.Boolean,System.String,System.Int32,System.String)">
            <summary>
            Logs an assertion if condition is <c>false</c>, and prints it on the screen
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Assert.IsNull``1(``0,System.String,System.Int32,System.String)">
            <summary>
            Logs an assertion if value is not `null`, and prints it on the screen
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Assert.IsNotNull``1(``0,System.String,System.Int32,System.String)">
            <summary>
            Logs an assertion if value is `null`, and prints it on the screen
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CommandLine">
            <summary>
            Functionality to work with the command-line of the engine executable
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CommandLine.Get">
            <summary>
            Returns the user arguments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CommandLine.Set(System.String)">
            <summary>
            Overrides the arguments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CommandLine.Append(System.String)">
            <summary>
            Appends the string to the arguments as it is without adding a space
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Debug">
            <summary>
            Functionality for debugging
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.Log(UnrealEngine.Framework.LogLevel,System.String)">
            <summary>
            Logs a message in accordance to the specified level, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.Exception(System.Exception)">
            <summary>
            Creates a log file with the name of assembly if required and writes an exception to it, prints it on the screen, printing on the screen is omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration, but log file will persist
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.AddOnScreenMessage(System.Int32,System.Single,System.Drawing.Color,System.String)">
            <summary>
            Prints a debug message on the screen assigned to the key identifier, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.ClearOnScreenMessages">
            <summary>
            Clears any existing debug messages, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawBox(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug box, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawCapsule(System.Numerics.Vector3@,System.Single,System.Single,System.Numerics.Quaternion@,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug capsule, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawCone(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Single,System.Single,System.Int32,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug cone, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawCylinder(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Single,System.Int32,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug cylinder, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawSphere(System.Numerics.Vector3@,System.Single,System.Int32,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug sphere, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawLine(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Drawing.Color,System.Boolean,System.Single,System.Byte,System.Single)">
            <summary>
            Draws a debug line, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.DrawPoint(System.Numerics.Vector3@,System.Single,System.Drawing.Color,System.Boolean,System.Single,System.Byte)">
            <summary>
            Draws a debug point, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Debug.FlushPersistentLines">
            <summary>
            Flushes persistent debug lines, omitted in builds with the <a href="https://docs.unrealengine.com/en-US/Programming/Development/BuildConfigurations/index.html#buildconfigurationdescriptions">Shipping</a> configuration
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Application">
            <summary>
            Provides information about the application
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.IsCanEverRender">
            <summary>
            Returns <c>true</c> if the application can render anything
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.IsPackagedForDistribution">
            <summary>
            Returns <c>true</c> if current build is meant for release to retail
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.IsPackagedForShipping">
            <summary>
            Returns <c>true</c> if current build is packaged for shipping
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.ProjectDirectory">
            <summary>
            Returns the project directory
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.DefaultLanguage">
            <summary>
            Returns the default language used by current platform
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.ProjectName">
            <summary>
            Gets or sets the name of the current project
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Application.VolumeMultiplier">
            <summary>
            Gets or sets the current volume multiplier
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Application.RequestExit(System.Boolean)">
            <summary>
            Requests application exit
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ConsoleManager">
            <summary>
            Handles console commands and variables
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.IsRegisteredVariable(System.String)">
            <summary>
            Returns <c>true</c> if a console command or variable has been registered
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.FindVariable(System.String)">
            <summary>
            Finds a console variable
            </summary>
            <returns>A console variable or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.RegisterVariable(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates and registers a bool console variable, remains alive during the lifetime of the engine until unregistered
            </summary>
            <param name="name">The name of the variable</param>
            <param name="help">Help text for the variable</param>
            <param name="defaultValue">A default value</param>
            <param name="readOnly">If <c>true</c>, cannot be changed by the user from console</param>
            <returns>A console variable or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.RegisterVariable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates and registers an integer console variable, remains alive during the lifetime of the engine until unregistered
            </summary>
            <param name="name">The name of the variable</param>
            <param name="help">Help text for the variable</param>
            <param name="defaultValue">A default value</param>
            <param name="readOnly">If <c>true</c>, cannot be changed by the user from console</param>
            <returns>A console variable or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.RegisterVariable(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Creates and registers a float console variable, remains alive during the lifetime of the engine until unregistered
            </summary>
            <param name="name">The name of the variable</param>
            <param name="help">Help text for the variable</param>
            <param name="defaultValue">A default value</param>
            <param name="readOnly">If <c>true</c>, cannot be changed by the user from console</param>
            <returns>A console variable or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.RegisterVariable(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates and registers a string console variable, remains alive during the lifetime of the engine until unregistered
            </summary>
            <param name="name">The name of the variable</param>
            <param name="help">Help text for the variable</param>
            <param name="defaultValue">A default value</param>
            <param name="readOnly">If <c>true</c>, cannot be changed by the user from console</param>
            <returns>A console variable or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.RegisterCommand(System.String,System.String,UnrealEngine.Framework.ConsoleCommandDelegate,System.Boolean)">
            <summary>
            Creates and registers the callback function for a console command that takes no arguments, remains alive during the lifetime of the engine until unregistered
            </summary>
            <param name="name">The name of the command</param>
            <param name="help">Help text for the command</param>
            <param name="callback">The function to call when the command is executed</param>
            <param name="readOnly">If <c>true</c>, cannot be changed by the user from console</param>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleManager.UnregisterObject(System.String)">
            <summary>
            Deletes and unregisters a console command or variable
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Engine">
            <summary>
            Functionality for management of engine systems
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.IsSplitScreen">
            <summary>
            Returns <c>true</c> if the game is running in split screen mode
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.IsEditor">
            <summary>
            Returns <c>true</c> if the script is executing within the editor
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.IsForegroundWindow">
            <summary>
            Returns <c>true</c> if the window has focus
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.IsExitRequested">
            <summary>
            Returns <c>true</c> if the exit was requested
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.NetMode">
            <summary>
            Returns the current networking mode
            </summary>
            <remarks>Networking functionality</remarks>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.FrameNumber">
            <summary>
            Incremented once per frame before the scene is being rendered
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.GetViewportSize(System.Numerics.Vector2@)">
            <summary>
            Retrieves the current size of the viewport
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.GetViewportSize">
            <summary>
            Returns the current size of the viewport
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.GetScreenResolution(System.Numerics.Vector2@)">
            <summary>
            Retrieves the current resolution of the screen
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.GetScreenResolution">
            <summary>
            Returns the current resolution of the screen
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.WindowMode">
            <summary>
            Returns the current mode of the window
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.ForceGarbageCollection(System.Boolean)">
            <summary>
            Updates the timer between garbage collection such that at the next opportunity garbage collection will be run
            </summary>
            <param name="fullPurge">If <c>true</c>, all possible memory will be freed</param>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.DelayGarbageCollection">
            <summary>
            Requests a one frame delay of garbage collection
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.Version">
            <summary>
            Returns the current engine version
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Engine.MaxFPS">
            <summary>
            Gets or sets max frames per second, overrides console variable
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.AddActionMapping(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds an engine defined action mapping, cannot be remapped
            </summary>
            <param name="actionName">Friendly name of action</param>
            <param name="key">Key to bind in accordance with <see cref="T:UnrealEngine.Framework.Keys"/></param>
            <param name="shift"><c>true</c> if one of the Shift keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="ctrl"><c>true</c> if one of the Ctrl keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="alt"><c>true</c> if one of the Alt keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="cmd"><c>true</c> if one of the Cmd keys must be down when the KeyEvent is received to be acknowledged</param>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.AddAxisMapping(System.String,System.String,System.Single)">
            <summary>
            Adds an engine defined mapping between an axis and key, cannot be remapped
            </summary>
            <param name="axisName">Friendly name of axis</param>
            <param name="key">Key to bind in accordance with <see cref="T:UnrealEngine.Framework.Keys"/></param>
            <param name="scale">Multiplier to use for the mapping when accumulating the axis value</param>
        </member>
        <member name="M:UnrealEngine.Framework.Engine.SetTitle(System.String)">
            <summary>
            Sets the window title
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.HeadMountedDisplay">
            <summary>
            Functionality for access to the head-mounted display
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.HeadMountedDisplay.IsConnected">
            <summary>
            Returns <c>true</c> if the head-mounted display is connected and ready to use
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.HeadMountedDisplay.Enabled">
            <summary>
            Gets or sets whether the head-mounted display is enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.HeadMountedDisplay.LowPersistenceMode">
            <summary>
            Gets or sets whether the head-mounted display is in low or full persistence mode
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.HeadMountedDisplay.DeviceName">
            <summary>
            Returns the name of the device
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.World">
            <summary>
            The top-level representation of a map or a sandbox in which actors and components will exist and rendered
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.ActorCount">
            <summary>
            Returns the actor count
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.DeltaTime">
            <summary>
            Returns the frame delta time in seconds
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.RealTime">
            <summary>
            Returns time in seconds since the world was brought up for play, does not stop when the game pauses, not dilated or clamped
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.Time">
            <summary>
            Returns time in seconds since the world was brought up for play, it is stopped when the game pauses, it is dilated or clamped
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.CurrentLevelName">
            <summary>
            Returns the name of the current level
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.World.SimulatePhysics">
            <summary>
            Gets or sets physics simulation for the world
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.ForEachActor``1(System.Action{``0})">
            <summary>
            Performs the specified action on each actor in the world
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetActor``1(System.String)">
            <summary>
            Returns the first actor in the world of the specified class, optionally with the specified name, this operation is slow and should be used with caution
            </summary>
            <param name="name">The name of the actor, may differ from the label in the editor</param>
            <typeparam name="T">The type of the actor</typeparam>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetActorByTag``1(System.String)">
            <summary>
            Returns the first actor in the world of the specified class and tag, this operation is slow and should be used with caution
            </summary>
            <param name="tag">The tag of the actor</param>
            <typeparam name="T">The type of the actor</typeparam>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetActorByID``1(System.UInt32)">
            <summary>
            Returns the first actor in the world of the specified class and ID, this operation is slow and should be used with caution
            </summary>
            <param name="id">The ID of the actor</param>
            <typeparam name="T">The type of the actor</typeparam>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetFirstPlayerController">
            <summary>
            Returns the first player controller
            </summary>
            <returns>A player controller or <c>null</c> if there is none</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetGameMode">
            <summary>
            Returns the current game mode instance which is always valid during gameplay on the server
            </summary>
            <returns>A game mode or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetWorldOrigin(System.Numerics.Vector3@)">
            <summary>
            Retrieves the current location of the <a href="https://docs.unrealengine.com/en-US/Engine/LevelStreaming/WorldBrowser/index.html">world origin</a> to a reference
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.GetWorldOrigin">
            <summary>
            Returns the current location of the <a href="https://docs.unrealengine.com/en-US/Engine/LevelStreaming/WorldBrowser/index.html">world origin</a>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorBeginOverlapCallback(UnrealEngine.Framework.ActorOverlapDelegate)">
            <summary>
            Sets the callback function that is called when actors start overlapping
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorEndOverlapCallback(UnrealEngine.Framework.ActorOverlapDelegate)">
            <summary>
            Sets the callback function that is called when actors end overlapping
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorHitCallback(UnrealEngine.Framework.ActorHitDelegate)">
            <summary>
            Sets the callback function that is called when actors hit collisions
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorBeginCursorOverCallback(UnrealEngine.Framework.ActorCursorDelegate)">
            <summary>
            Sets the callback function that is called when the mouse cursor is moved over an actor if mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorEndCursorOverCallback(UnrealEngine.Framework.ActorCursorDelegate)">
            <summary>
            Sets the callback function that is called when the mouse cursor is moved off an actor if mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorClickedCallback(UnrealEngine.Framework.ActorKeyDelegate)">
            <summary>
            Sets the callback function that is called when the mouse button is clicked while the mouse is over an actor if click events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnActorReleasedCallback(UnrealEngine.Framework.ActorKeyDelegate)">
            <summary>
            Sets the callback function that is called when the mouse button is released while the mouse is over an actor if click events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentBeginOverlapCallback(UnrealEngine.Framework.ComponentOverlapDelegate)">
            <summary>
            Sets the callback function that is called when primitive components start overlapping
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentEndOverlapCallback(UnrealEngine.Framework.ComponentOverlapDelegate)">
            <summary>
            Sets the callback function that is called when primitive components end overlapping
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentHitCallback(UnrealEngine.Framework.ComponentHitDelegate)">
            <summary>
            Sets the callback function that is called when components hit collisions
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentBeginCursorOverCallback(UnrealEngine.Framework.ComponentCursorDelegate)">
            <summary>
            Sets the callback function that is called when the mouse cursor is moved over a component and mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentEndCursorOverCallback(UnrealEngine.Framework.ComponentCursorDelegate)">
            <summary>
            Sets the callback function that is called when the mouse cursor is moved off a component and mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentClickedCallback(UnrealEngine.Framework.ComponentKeyDelegate)">
            <summary>
            Sets the callback function that is called when the mouse button is clicked while the mouse is over a component if click events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetOnComponentReleasedCallback(UnrealEngine.Framework.ComponentKeyDelegate)">
            <summary>
            Sets the callback function that is called when the mouse button is released while the mouse is over a component if click events are enabled in the player controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetGravity(System.Single)">
            <summary>
            Sets the gravity applied to all objects in the world
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.SetWorldOrigin(System.Numerics.Vector3@)">
            <summary>
            Sets <a href="https://docs.unrealengine.com/en-US/Engine/LevelStreaming/WorldBrowser/index.html">world origin</a> to the specified location
            </summary>
            <returns><c>true</c> if the world origin was succesfuly shifted, or <c>false</c> if one of the levels are pending visibility update</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.OpenLevel(System.String)">
            <summary>
            Travels to another level
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceTestByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,UnrealEngine.Framework.CollisionChannel,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific channel
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceTestByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific profile
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceSingleByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.Hit@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific channel and retrieves the first blocking hit
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceSingleByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.Hit@,System.String@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific channel and retrieves the first blocking hit with a bone name
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceSingleByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String,UnrealEngine.Framework.Hit@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific profile and retrieves the first blocking hit
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.LineTraceSingleByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String,UnrealEngine.Framework.Hit@,System.String@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Traces a ray against the world using a specific profile and retrieves the first blocking hit with a bone name
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepTestByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionShape@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepTestByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.String,UnrealEngine.Framework.CollisionShape@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepSingleByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Hit@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile and retrieves the first blocking hit
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepSingleByChannel(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Hit@,System.String@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile and retrieves the first blocking hit with a bone name
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepSingleByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.String,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Hit@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile and retrieves the first blocking hit
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.SweepSingleByProfile(System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.String,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Hit@,System.String@,System.Boolean,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Sweeps a shape against the world using a specific profile and retrieves the first blocking hit with a bone name
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.OverlapAnyTestByChannel(System.Numerics.Vector3@,System.Numerics.Quaternion@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Tests the collision shape at the specified location using a specific channel to determine if any blocking or overlapping occurred
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.OverlapAnyTestByProfile(System.Numerics.Vector3@,System.Numerics.Quaternion@,System.String,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Tests the collision shape at the specified location using a specific profile to determine if any blocking or overlapping occurred
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.OverlapBlockingTestByChannel(System.Numerics.Vector3@,System.Numerics.Quaternion@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Tests the collision shape at the specified location using a specific channel to determine if any blocking occurred
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.World.OverlapBlockingTestByProfile(System.Numerics.Vector3@,System.Numerics.Quaternion@,System.String,UnrealEngine.Framework.CollisionShape@,UnrealEngine.Framework.Actor,UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Tests the collision shape at the specified location using a specific profile to determine if any blocking occurred
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="T:UnrealEngine.Framework.Asset">
            <summary>
            A representation of the asset
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Asset.op_Equality(UnrealEngine.Framework.Asset,UnrealEngine.Framework.Asset)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Asset.op_Inequality(UnrealEngine.Framework.Asset,UnrealEngine.Framework.Asset)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Asset.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Asset.Equals(UnrealEngine.Framework.Asset)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Asset.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Asset.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Asset.Name">
            <summary>
            Returns the name of the asset
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Asset.Path">
            <summary>
            Returns the path to the asset
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AssetRegistry">
            <summary>
            An asset registry
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AssetRegistry.#ctor">
            <summary>
            Initializes a new instance of the asset registry
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.AssetRegistry.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AssetRegistry.Equals(UnrealEngine.Framework.AssetRegistry)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AssetRegistry.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AssetRegistry.HasAssets(System.String,System.Boolean)">
            <summary>
            Checks whether the given path contain assets, optionally testing sub-paths
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AssetRegistry.ForEachAsset(System.Action{UnrealEngine.Framework.Asset},System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs the specified action on each asset if any
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Blueprint">
            <summary>
            An asset that provides an intuitive node-based interface
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Blueprint.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Blueprint.Equals(UnrealEngine.Framework.Blueprint)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Blueprint.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Blueprint.Load(System.String)">
            <summary>
            Finds and loads a blueprint by name
            </summary>
            <returns>A blueprint or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.ConsoleObject">
            <summary>
            Interface for console objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ConsoleObject.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleObject.Equals(UnrealEngine.Framework.ConsoleObject)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleObject.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ConsoleObject.IsBool">
            <summary>
            Returns <c>true</c> if the object is a bool
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ConsoleObject.IsInt">
            <summary>
            Returns <c>true</c> if the object is an integer
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ConsoleObject.IsFloat">
            <summary>
            Returns <c>true</c> if the object is a float
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ConsoleObject.IsString">
            <summary>
            Returns <c>true</c> if the object is a string
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ConsoleVariable">
            <summary>
            Interface for console variables
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.GetBool">
            <summary>
            Returns the value as a bool, also works on integers and floats
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.GetInt">
            <summary>
            Returns the value as an integer, shouldn't be used on strings
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.GetFloat">
            <summary>
            Returns the value as a float, works on all types
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.GetString">
            <summary>
            Returns the value as a string, works on all types
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.SetBool(System.Boolean)">
            <summary>
            Sets the value as a bool
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.SetInt(System.Int32)">
            <summary>
            Sets the value as an integer
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.SetFloat(System.Single)">
            <summary>
            Sets the value as a float
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.SetString(System.String)">
            <summary>
            Sets the value as a string
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.SetOnChangedCallback(UnrealEngine.Framework.ConsoleVariableDelegate)">
            <summary>
            Sets the callback function that is called when the console variable value changes
            </summary>
            <param name="callback">The function to call when the value of variable is changed</param>
        </member>
        <member name="M:UnrealEngine.Framework.ConsoleVariable.ClearOnChangedCallback">
            <summary>
            Clears callback function
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Actor">
            <summary>
            The base class of an object that can be placed or spawned in a level
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.IsSpawned">
            <summary>
            Returns <c>true</c> if the actor is spawned
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.IsRootComponentMovable">
            <summary>
            Returns <c>true</c> if the root component is <see cref="F:UnrealEngine.Framework.ComponentMobility.Movable"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.IsOverlappingActor(UnrealEngine.Framework.Actor)">
            <summary>
            Returns <c>true</c> if any component of the actor is overlapping any component of another one
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.ForEachComponent``1(System.Action{``0})">
            <summary>
            Performs the specified action on each component if any
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.ForEachAttachedActor``1(System.Action{``0})">
            <summary>
            Performs the specified action on each attached actor if any
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.ForEachChildActor``1(System.Action{``0})">
            <summary>
            Performs the specified action on each child actor with <see cref="T:UnrealEngine.Framework.ChildActorComponent"/>, including children of child if any
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.ForEachOverlappingActor``1(System.Action{``0})">
            <summary>
            Performs the specified action on each overlapping actor if any
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.ID">
            <summary>
            Returns the unique ID of the actor, reused by the engine, only unique while the actor is alive
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.Name">
            <summary>
            Returns the name of the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetBool(System.String,System.Boolean@)">
            <summary>
            Retrieves the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetByte(System.String,System.Byte@)">
            <summary>
            Retrieves the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetShort(System.String,System.Int16@)">
            <summary>
            Retrieves the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetInt(System.String,System.Int32@)">
            <summary>
            Retrieves the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetLong(System.String,System.Int64@)">
            <summary>
            Retrieves the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetUShort(System.String,System.UInt16@)">
            <summary>
            Retrieves the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetUInt(System.String,System.UInt32@)">
            <summary>
            Retrieves the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetULong(System.String,System.UInt64@)">
            <summary>
            Retrieves the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetFloat(System.String,System.Single@)">
            <summary>
            Retrieves the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetDouble(System.String,System.Double@)">
            <summary>
            Retrieves the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetEnum``1(System.String,``0@)">
            <summary>
            Retrieves the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetString(System.String,System.String@)">
            <summary>
            Retrieves the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetText(System.String,System.String@)">
            <summary>
            Retrieves the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetByte(System.String,System.Byte)">
            <summary>
            Sets the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetShort(System.String,System.Int16)">
            <summary>
            Sets the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetInt(System.String,System.Int32)">
            <summary>
            Sets the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetLong(System.String,System.Int64)">
            <summary>
            Sets the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetUShort(System.String,System.UInt16)">
            <summary>
            Sets the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetUInt(System.String,System.UInt32)">
            <summary>
            Sets the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetULong(System.String,System.UInt64)">
            <summary>
            Sets the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetFloat(System.String,System.Single)">
            <summary>
            Sets the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetDouble(System.String,System.Double)">
            <summary>
            Sets the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetEnum``1(System.String,``0)">
            <summary>
            Sets the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetString(System.String,System.String)">
            <summary>
            Sets the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetText(System.String,System.String)">
            <summary>
            Sets the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.InputComponent">
            <summary>
            Gets or sets the component that handles input for the actor, if enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.CreationTime">
            <summary>
            Gets the time when the actor was created relative to <see cref="P:UnrealEngine.Framework.World.Time"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Actor.BlockInput">
            <summary>
            Gets or sets whether the all input on the stack below this actor will not be considered
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.Equals(UnrealEngine.Framework.Actor)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.Destroy">
            <summary>
            Returns <c>true</c> if the actor is destroyed or already marked for destruction, <c>false</c> if indestructible
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.Rename(System.String)">
            <summary>
            Renames the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.Invoke(System.String)">
            <summary>
            Invokes a command, function, or an event with optional arguments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.Hide(System.Boolean)">
            <summary>
            Hides the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.TeleportTo(System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Boolean,System.Boolean)">
            <summary>
            Teleports an actor to a new location
            </summary>
            <param name="destinationLocation">The target destination point</param>
            <param name="destinationRotation">The target rotation at the destination</param>
            <param name="isATest">If <c>true</c>, shouldn't cause any notifications (used by AI pathfinding, for example)</param>
            <param name="noCheck">If <c>true</c>, should skip checking for positioning in the world or relative to other actors trying to slightly move the actor out</param>
            <returns><c>true</c> if the actor has been successfully moved</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetDistanceTo(UnrealEngine.Framework.Actor)">
            <summary>
            Returns the distance from this actor to another one
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetHorizontalDistanceTo(UnrealEngine.Framework.Actor)">
            <summary>
            Returns the distance from this actor to another one, ignoring Z axis
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetBounds(System.Boolean,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Retrieves the bounding box of all components of the actor
            </summary>
            <param name="onlyCollidingComponents">If <c>true</c>, will only return the bounding box for components with enabled collision</param>
            <param name="origin">The center of the actor in world space</param>
            <param name="extent">Half the actor's size in 3D space</param>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetEyesViewPoint(System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Retrieves the point of view of the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetComponent``1(System.String)">
            <summary>
            Returns the component of the actor if matches the specified type, optionally with the specified name
            </summary>
            <param name="name">The name of the component</param>
            <typeparam name="T">The type of the component</typeparam>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetComponentByTag``1(System.String)">
            <summary>
            Returns the component of the actor if matches the specified type and tag
            </summary>
            <param name="tag">The tag of the component</param>
            <typeparam name="T">The type of the component</typeparam>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetComponentByID``1(System.UInt32)">
            <summary>
            Returns the component of the actor if matches the specified type and ID
            </summary>
            <param name="id">The ID of the component</param>
            <typeparam name="T">The type of the component</typeparam>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.GetRootComponent``1">
            <summary>
            Returns the root component of the actor if matches the specified type
            </summary>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetRootComponent(UnrealEngine.Framework.SceneComponent)">
            <summary>
            Sets the root component, the actor should be the owner of the component
            </summary>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetLifeSpan(System.Single)">
            <summary>
            Sets the lifespan of the actor, when it expires the actor will be destroyed, if requested lifespan set to zero, the timer is cleared and the actor will remain alive
            </summary>
            <param name="lifeSpan">Lifespan time in seconds</param>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetEnableInput(UnrealEngine.Framework.PlayerController,System.Boolean)">
            <summary>
            Sets <see cref="P:UnrealEngine.Framework.Actor.InputComponent"/> for non-pawn actors handled by a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.SetEnableCollision(System.Boolean)">
            <summary>
            Sets the collision detection of the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.AddTag(System.String)">
            <summary>
            Adds a tag to the actor that can be used for grouping and categorizing
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.RemoveTag(System.String)">
            <summary>
            Removes a tag from the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.HasTag(System.String)">
            <summary>
            Indicates whether the actor has a tag
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.RegisterEvent(UnrealEngine.Framework.ActorEventType)">
            <summary>
            Registers an event notification for the actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Actor.UnregisterEvent(UnrealEngine.Framework.ActorEventType)">
            <summary>
            Unregisters an event notification for the actor
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.GameModeBase">
            <summary>
            Defines the game being played, instantiated only on the server
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.GameModeBase.UseSeamlessTravel">
            <summary>
            Gets or sets whether the game perform seamless map travels which loads in the background and doesn't disconnect clients
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.GameModeBase.SwapPlayerControllers(UnrealEngine.Framework.PlayerController,UnrealEngine.Framework.PlayerController)">
            <summary>
            Swaps player controllers
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.TriggerBase">
            <summary>
            The base class of actors that used to generate collision events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.TriggerBox">
            <summary>
            A box shaped trigger with <see cref="T:UnrealEngine.Framework.BoxComponent"/> used to generate overlap events
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TriggerBox.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.TriggerCapsule">
            <summary>
            A capsule shaped trigger with <see cref="T:UnrealEngine.Framework.CapsuleComponent"/> used to generate overlap events
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TriggerCapsule.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.TriggerSphere">
            <summary>
            A sphere shaped trigger with <see cref="T:UnrealEngine.Framework.SphereComponent"/> used to generate overlap events
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TriggerSphere.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.Pawn">
            <summary>
            The base class of actors that can be possessed by players or AI
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.IsControlled">
            <summary>
            Returns <c>true</c> if the pawn is possesed by a <see cref="T:UnrealEngine.Framework.Controller"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.IsPlayerControlled">
            <summary>
            Returns <c>true</c> if the pawn is possesed by a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.AutoPossessAI">
            <summary>
            Gets or sets the automatic possession type by an AI controller
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.AutoPossessPlayer">
            <summary>
            Gets or sets the player index for automatic possession by a player controller
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.UseControllerRotationYaw">
            <summary>
            Gets or sets whether yaw will be updated to match the controller's control rotation yaw, if controlled by a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.UseControllerRotationPitch">
            <summary>
            Gets or sets whether pitch will be updated to match the controller's control rotation pitch, if controlled by a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Pawn.UseControllerRotationRoll">
            <summary>
            Gets or sets whether roll will be updated to match the controller's control rotation roll, if controlled by a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.GetGravityDirection(System.Numerics.Vector3@)">
            <summary>
            Retrieves vector direction of gravity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.GetGravityDirection">
            <summary>
            Returns vector direction of gravity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.GetAIController">
            <summary>
            Returns the AI controller or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.GetPlayerController">
            <summary>
            Returns the player controller or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.AddControllerYawInput(System.Single)">
            <summary>
            Adds yaw (turn) input to the controller, if it's a local <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.AddControllerPitchInput(System.Single)">
            <summary>
            Adds pitch (look up) input to the controller, if it's a local <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.AddControllerRollInput(System.Single)">
            <summary>
            Adds roll input to the controller, if it's a local <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Pawn.AddMovementInput(System.Numerics.Vector3@,System.Single,System.Boolean)">
            <summary>
            Adds movement input along the given world direction vector (usually normalized)
            </summary>
            <param name="worldDirection">Direction in world space to apply input</param>
            <param name="scaleValue">Scale to apply to input, 0.5f applies half the normal value, while -1.0 would reverse the direction</param>
            <param name="force">If <c>true</c>, always add the input, ignoring the result of <see cref="P:UnrealEngine.Framework.Controller.IsMoveInputIgnored"/></param>
        </member>
        <member name="T:UnrealEngine.Framework.Character">
            <summary>
            Represents a character that have a mesh, collision, and built-in movement logic
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.Character.IsCrouched">
            <summary>
            Returns <c>true</c> if the character is currently crouched
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Character.CanCrouch">
            <summary>
            Returns <c>true</c> if the character can crouch
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Character.CanJump">
            <summary>
            Returns <c>true</c> if the character can jump
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.CheckJumpInput(System.Single)">
            <summary>
            Triggers jump if a jump button is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.ClearJumpInput(System.Single)">
            <summary>
            Updates jump input state after checking input
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.Launch(System.Numerics.Vector3@,System.Boolean,System.Boolean)">
            <summary>
            Launches the character using the specified velocity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.Crouch">
            <summary>
            Starts the character crouching on the next update
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.StopCrouching">
            <summary>
            Stops the character crouching on the next update
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.Jump">
            <summary>
            Starts the character jumping on the next update
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.StopJumping">
            <summary>
            Stops the character from jumping on the next update
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Character.SetOnLandedCallback(UnrealEngine.Framework.CharacterLandedDelegate)">
            <summary>
            Sets the callback function that is called when the character landing after falling
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Controller">
            <summary>
            Non-physical actors that can possess a <see cref="T:UnrealEngine.Framework.Pawn"/> to control its actions
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Controller.IsLookInputIgnored">
            <summary>
            Returns <c>true</c> if look input is ignored
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Controller.IsMoveInputIgnored">
            <summary>
            Returns <c>true</c> if movement input is ignored
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Controller.IsPlayerController">
            <summary>
            Returns <c>true</c> if the controller is a <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetPawn">
            <summary>
            Returns the controller's pawn or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetCharacter">
            <summary>
            Returns the character or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetViewTarget">
            <summary>
            Returns the actor the controller is looking at or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetControlRotation(System.Numerics.Quaternion@)">
            <summary>
            Retrieves the control rotation which is a full aim rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetControlRotation">
            <summary>
            Returns the control rotation which is a full aim rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetDesiredRotation(System.Numerics.Quaternion@)">
            <summary>
            Retrieves the target rotation of the pawn
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.GetDesiredRotation">
            <summary>
            Returns the target rotation of the pawn
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.LineOfSightTo(UnrealEngine.Framework.Actor,System.Numerics.Vector3@,System.Boolean)">
            <summary>
            Checks line to center and top of other actor
            </summary>
            <param name="actor">The actor whose visibility is being checked</param>
            <param name="viewPoint">Eye position visibility is being checked from, if <see cref="P:System.Numerics.Vector3.Zero"/> is passed in, uses current view target's eye position</param>
            <param name="alternateChecks">Used only in <see cref="T:UnrealEngine.Framework.AIController"/> implementation</param>
            <returns><c>true</c> if controller's <see cref="T:UnrealEngine.Framework.Pawn"/> can see other actor</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.SetControlRotation(System.Numerics.Quaternion@)">
            <summary>
            Sets the control rotation which is a full aim rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.SetInitialLocationAndRotation(System.Numerics.Vector3@,System.Numerics.Quaternion@)">
            <summary>
            Sets the initial location and rotation of the controller, as well as the control rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.SetIgnoreLookInput(System.Boolean)">
            <summary>
            Locks or unlocks look input, consecutive calls stack up and require the same amount of calls to undo, or can all be undone using <see cref="M:UnrealEngine.Framework.Controller.ResetIgnoreLookInput"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.SetIgnoreMoveInput(System.Boolean)">
            <summary>
            Locks or unlocks movement input, consecutive calls stack up and require the same amount of calls to undo, or can all be undone using <see cref="M:UnrealEngine.Framework.Controller.ResetIgnoreMoveInput"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.ResetIgnoreLookInput">
            <summary>
            Stops ignoring look input by resetting the ignore look input state
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.ResetIgnoreMoveInput">
            <summary>
            Stops ignoring move input by resetting the ignore move input state
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.Possess(UnrealEngine.Framework.Pawn)">
            <summary>
            Handles attaching the controller to the specified pawn
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Controller.Unpossess">
            <summary>
            Relinquishes control of the pawn
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AIController">
            <summary>
            The base class of controllers for an AI-controlled <see cref="T:UnrealEngine.Framework.Pawn"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.AIController.AllowStrafe">
            <summary>
            Gets or sets whether strafing allowed during movement
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.ClearFocus(UnrealEngine.Framework.AIFocusPriority)">
            <summary>
            Clears focus for the given priority, will clear focal point as a result
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.GetFocalPoint(System.Numerics.Vector3@)">
            <summary>
            Retrieves the final position that controller should be looking at
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.GetFocalPoint">
            <summary>
            Returns the final position that controller should be looking at
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.SetFocalPoint(System.Numerics.Vector3@,UnrealEngine.Framework.AIFocusPriority)">
            <summary>
            Sets focal point for the given priority as absolute position or offset from base
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.GetFocusActor">
            <summary>
            Returns the focused actor or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AIController.SetFocus(UnrealEngine.Framework.Actor,UnrealEngine.Framework.AIFocusPriority)">
            <summary>
            Sets focus actor for the given priority, will set focal point as a result
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.PlayerController">
            <summary>
            An actor that is used by human players to control a <see cref="T:UnrealEngine.Framework.Pawn"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.PlayerController.IsPaused">
            <summary>
            Returns <c>true</c> if game is currently paused
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PlayerController.ShowMouseCursor">
            <summary>
            Gets or sets whether the mouse cursor should be displayed
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PlayerController.EnableClickEvents">
            <summary>
            Gets or sets whether click events should be generated
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PlayerController.EnableMouseOverEvents">
            <summary>
            Gets or sets whether the mouse over events should be generated
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.GetMousePosition(System.Single@,System.Single@)">
            <summary>
            Retrieves the X and Y screen coordinates of the mouse cursor
            </summary>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.GetPlayer">
            <summary>
            Returns the player representation or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.GetPlayerInput">
            <summary>
            Returns the input manager or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.GetHitResultAtScreenPosition(System.Numerics.Vector2@,UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.Hit@,System.Boolean)">
            <summary>
            Retrieves the first blocking hit from the position on the screen
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.GetHitResultUnderCursor(UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.Hit@,System.Boolean)">
            <summary>
            Retrieves the first blocking hit under the mouse cursor
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.SetMousePosition(System.Single,System.Single)">
            <summary>
            Positions the mouse cursor in screen space, in pixels
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.ConsoleCommand(System.String,System.Boolean)">
            <summary>
            Executes the command on the <see cref="T:UnrealEngine.Framework.Player"/> object, <c>DumpConsoleCommands</c> command can be used to list all available variables and commands
            </summary>
            <param name="command">A command to execute, string of commands optionally separated by a <c>|</c> symbol</param>
            <param name="writeToLog"></param>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.SetPause(System.Boolean)">
            <summary>
            Pauses a local game
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.SetViewTarget(UnrealEngine.Framework.Actor)">
            <summary>
            Sets the view target
            </summary>
            <param name="newViewTarget">An actor to set as view target</param>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.SetViewTargetWithBlend(UnrealEngine.Framework.Actor,System.Single,System.Single,UnrealEngine.Framework.BlendType,System.Boolean)">
            <summary>
            Sets the view target blending with variable control
            </summary>
            <param name="newViewTarget">An actor to set as view target</param>
            <param name="time">Time taken to blend</param>
            <param name="exponent">Exponent, used by certain <see cref="T:UnrealEngine.Framework.BlendType"/> to control the shape of the curve</param>
            <param name="type">The blending type</param>
            <param name="lockOutgoing">If <c>true</c>, lock outgoing view target to last frame's camera position for the remainder of the blend</param>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.AddYawInput(System.Single)">
            <summary>
            Adds yaw (turn) input
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.AddPitchInput(System.Single)">
            <summary>
            Adds pitch (look up) input
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerController.AddRollInput(System.Single)">
            <summary>
            Adds roll input
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Volume">
            <summary>
            An editable 3D volume placed in a level, different types of volumes perform different functions
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Volume.EncompassesPoint(System.Numerics.Vector3@,System.Single,System.Single@)">
            <summary>
            Returns <c>true</c> if a point or sphere overlaps the volume
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.TriggerVolume">
            <summary>
            An actor that is used to trigger events
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TriggerVolume.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.PostProcessVolume">
            <summary>
            An actor that is used for post-processing manipulations
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PostProcessVolume.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessVolume.Enabled">
            <summary>
            Gets or sets whether the volume is enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessVolume.BlendRadius">
            <summary>
            Gets or sets the world space radius around the volume that is used for blending if not unbound
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessVolume.BlendWeight">
            <summary>
            Gets or sets the blend weight, 0.0f indicates no effect, 1.0f indicates full effect
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessVolume.Unbound">
            <summary>
            Gets or sets whether the volume covers the whole world or only the area inside its bounds
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessVolume.Priority">
            <summary>
            Gets or sets the priority of the volume
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.LevelScript">
            <summary>
            A representation of the level-wide logic defined in the level blueprint
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AmbientSound">
            <summary>
            A sound actor that can be placed in a level
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AmbientSound.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.Light">
            <summary>
            A light actor that can be placed in a level
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.DirectionalLight">
            <summary>
            Simulates light that is being emitted from a source that is infinitely far away
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.DirectionalLight.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.PointLight">
            <summary>
            Emits light in all directions from the light bulb's tungsten filament
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PointLight.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.RectLight">
            <summary>
            Emits light into the scene from a rectangular plane with a defined width and height
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RectLight.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.SpotLight">
            <summary>
            Emits light from a single point in a cone shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpotLight.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.SoundBase">
            <summary>
            The base class of playable sound objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SoundBase.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SoundBase.Equals(UnrealEngine.Framework.SoundBase)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SoundBase.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SoundBase.Duration">
            <summary>
            Returns the duration of a sound object in seconds
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SoundWave">
            <summary>
            A playable sound object for raw wave files
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SoundWave.Load(System.String)">
            <summary>
            Finds and loads a sound wave by name
            </summary>
            <returns>A sound wave or <c>null</c> on failure</returns>
        </member>
        <member name="P:UnrealEngine.Framework.SoundWave.Loop">
            <summary>
            Gets or sets whether the sound wave will be looped if played directly
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationAsset">
            <summary>
            The base class of animation assets that can be played and evaluated to produce a pose
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.AnimationAsset.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationAsset.Equals(UnrealEngine.Framework.AnimationAsset)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationAsset.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationSequenceBase">
            <summary>
            The base class of animation sequences
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationSequence">
            <summary>
            A single animation asset that can be played
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationSequence.Load(System.String)">
            <summary>
            Finds and loads an animation sequence by name
            </summary>
            <returns>An animation sequence or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationCompositeBase">
            <summary>
            The base class of animation composites
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationMontage">
            <summary>
            A single animation asset that can combine and selectively play animations
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationMontage.Load(System.String)">
            <summary>
            Finds and loads an animation montage by name
            </summary>
            <returns>An animation montage or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationInstance">
            <summary>
            An animation instance representation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.AnimationInstance.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetBool(System.String,System.Boolean@)">
            <summary>
            Retrieves the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetByte(System.String,System.Byte@)">
            <summary>
            Retrieves the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetShort(System.String,System.Int16@)">
            <summary>
            Retrieves the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetInt(System.String,System.Int32@)">
            <summary>
            Retrieves the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetLong(System.String,System.Int64@)">
            <summary>
            Retrieves the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetUShort(System.String,System.UInt16@)">
            <summary>
            Retrieves the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetUInt(System.String,System.UInt32@)">
            <summary>
            Retrieves the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetULong(System.String,System.UInt64@)">
            <summary>
            Retrieves the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetFloat(System.String,System.Single@)">
            <summary>
            Retrieves the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetDouble(System.String,System.Double@)">
            <summary>
            Retrieves the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetEnum``1(System.String,``0@)">
            <summary>
            Retrieves the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetString(System.String,System.String@)">
            <summary>
            Retrieves the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetText(System.String,System.String@)">
            <summary>
            Retrieves the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetByte(System.String,System.Byte)">
            <summary>
            Sets the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetShort(System.String,System.Int16)">
            <summary>
            Sets the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetInt(System.String,System.Int32)">
            <summary>
            Sets the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetLong(System.String,System.Int64)">
            <summary>
            Sets the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetUShort(System.String,System.UInt16)">
            <summary>
            Sets the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetUInt(System.String,System.UInt32)">
            <summary>
            Sets the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetULong(System.String,System.UInt64)">
            <summary>
            Sets the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetFloat(System.String,System.Single)">
            <summary>
            Sets the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetDouble(System.String,System.Double)">
            <summary>
            Sets the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetEnum``1(System.String,``0)">
            <summary>
            Sets the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetString(System.String,System.String)">
            <summary>
            Sets the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetText(System.String,System.String)">
            <summary>
            Sets the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.Equals(UnrealEngine.Framework.AnimationInstance)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.Invoke(System.String)">
            <summary>
            Invokes a command, function, or an event with optional arguments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetCurrentActiveMontage">
            <summary>
            Returns the current active animation montage or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.IsPlaying(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Returns <c>true</c> if the animation montage is active and playing
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetPlayRate(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Returns the current play rate of the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetPosition(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Returns the current position of the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetBlendTime(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Returns the current blend time of the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.GetCurrentSection(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Returns the name of the current animation montage section
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetPlayRate(UnrealEngine.Framework.AnimationMontage,System.Single)">
            <summary>
            Sets the current play rate of the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetPosition(UnrealEngine.Framework.AnimationMontage,System.Single)">
            <summary>
            Sets the current position of the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.SetNextSection(UnrealEngine.Framework.AnimationMontage,System.String,System.String)">
            <summary>
            Sets the next section after <paramref name="sectionToChange"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.PlayMontage(UnrealEngine.Framework.AnimationMontage,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays the animation montage
            </summary>
            <returns>The length of the animation montage in seconds, or 0.0f if failed to play</returns>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.PauseMontage(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Pauses the animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.ResumeMontage(UnrealEngine.Framework.AnimationMontage)">
            <summary>
            Resumes the paused animation montage
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.StopMontage(UnrealEngine.Framework.AnimationMontage,System.Single)">
            <summary>
            Stops the animation montage, if <paramref name="montage"/> is <c>null</c> stops all active montages
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.JumpToSection(UnrealEngine.Framework.AnimationMontage,System.String)">
            <summary>
            Makes the animation montage jump to a named section
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AnimationInstance.JumpToSectionsEnd(UnrealEngine.Framework.AnimationMontage,System.String)">
            <summary>
            Makes the animation montage jump to the end of a named section
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Player">
            <summary>
            A player representation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Player.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Player.Equals(UnrealEngine.Framework.Player)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Player.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Player.GetPlayerController">
            <summary>
            Returns the player controller or <c>null</c> on failure
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.PlayerInput">
            <summary>
            An input manager of <see cref="T:UnrealEngine.Framework.PlayerController"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PlayerInput.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.Equals(UnrealEngine.Framework.PlayerInput)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.IsKeyPressed(System.String)">
            <summary>
            Returns <c>true</c> if a key is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.GetTimeKeyPressed(System.String)">
            <summary>
            Returns the time a key was pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.GetMouseSensitivity(System.Numerics.Vector2@)">
            <summary>
            Retrieves mouse sensitivity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.GetMouseSensitivity">
            <summary>
            Returns mouse sensitivity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.SetMouseSensitivity(System.Numerics.Vector2@)">
            <summary>
            Sets mouse sensitivity
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.AddActionMapping(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a player-specific action mapping
            </summary>
            <param name="actionName">Friendly name of action</param>
            <param name="key">Key to bind in accordance with <see cref="T:UnrealEngine.Framework.Keys"/></param>
            <param name="shift"><c>true</c> if one of the Shift keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="ctrl"><c>true</c> if one of the Ctrl keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="alt"><c>true</c> if one of the Alt keys must be down when the KeyEvent is received to be acknowledged</param>
            <param name="cmd"><c>true</c> if one of the Cmd keys must be down when the KeyEvent is received to be acknowledged</param>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.AddAxisMapping(System.String,System.String,System.Single)">
            <summary>
            Adds a player-specific mapping between an axis and key
            </summary>
            <param name="axisName">Friendly name of axis</param>
            <param name="key">Key to bind in accordance with <see cref="T:UnrealEngine.Framework.Keys"/></param>
            <param name="scale">Multiplier to use for the mapping when accumulating the axis value</param>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.RemoveActionMapping(System.String,System.String)">
            <summary>
            Removes a player-specific action mapping
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PlayerInput.RemoveAxisMapping(System.String,System.String)">
            <summary>
            Removes a player-specific mapping between an axis and key
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Font">
            <summary>
            A font object that is used to draw text
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.Font.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Font.Equals(UnrealEngine.Framework.Font)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Font.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Font.Load(System.String)">
            <summary>
            Finds and loads a font by name
            </summary>
            <returns>A font or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.Font.GetStringSize(System.String,System.Int32@,System.Int32@)">
            <summary>
            Retrieves height and width for a string
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.StreamableRenderAsset">
            <summary>
            A render asset that can be streamed at runtime
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.StreamableRenderAsset.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StreamableRenderAsset.Equals(UnrealEngine.Framework.StreamableRenderAsset)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StreamableRenderAsset.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.StaticMesh">
            <summary>
            A piece of geometry that consists of a static set of polygons
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.StaticMesh.Cone">
            <summary>
            A basic cone
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.StaticMesh.Cylinder">
            <summary>
            A basic cylinder
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.StaticMesh.Cube">
            <summary>
            A basic cube
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.StaticMesh.Plane">
            <summary>
            A basic plane
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.StaticMesh.Sphere">
            <summary>
            A basic sphere
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StaticMesh.Load(System.String)">
            <summary>
            Finds and loads a static mesh by name
            </summary>
            <returns>A static mesh or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.SkeletalMesh">
            <summary>
            A geometry bound to a hierarchical skeleton of bones which can be animated
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMesh.Load(System.String)">
            <summary>
            Finds and loads a skeletal mesh by name
            </summary>
            <returns>A skeletal mesh or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.Texture">
            <summary>
            A representation of the surface of an object
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Texture2D">
            <summary>
            A texture asset
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.#ctor(System.String)">
            <summary>
            Creates a texture asset from a raw PNG, JPEG, BMP, or EXR image file
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a texture asset from a raw PNG, JPEG, BMP, or EXR image buffer
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.Load(System.String)">
            <summary>
            Finds and loads a texture by name
            </summary>
            <returns>A texture or <c>null</c> on failure</returns>
        </member>
        <member name="P:UnrealEngine.Framework.Texture2D.HasAlphaChannel">
            <summary>
            Returns <c>true</c> if the runtime texture has an alpha channel that is not completely white
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.GetSize(System.Numerics.Vector2@)">
            <summary>
            Retrieves size of the texture
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.GetSize">
            <summary>
            Returns size of the texture
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Texture2D.GetPixelFormat">
            <summary>
            Returns the pixel format
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ActorComponent">
            <summary>
            The base class of components that define reusable behavior and can be added to different types of actors
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorComponent.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorComponent.ID">
            <summary>
            Returns the unique ID of the component, reused by the engine, only unique while the component is alive
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorComponent.Name">
            <summary>
            Returns the name of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetBool(System.String,System.Boolean@)">
            <summary>
            Retrieves the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetByte(System.String,System.Byte@)">
            <summary>
            Retrieves the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetShort(System.String,System.Int16@)">
            <summary>
            Retrieves the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetInt(System.String,System.Int32@)">
            <summary>
            Retrieves the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetLong(System.String,System.Int64@)">
            <summary>
            Retrieves the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetUShort(System.String,System.UInt16@)">
            <summary>
            Retrieves the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetUInt(System.String,System.UInt32@)">
            <summary>
            Retrieves the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetULong(System.String,System.UInt64@)">
            <summary>
            Retrieves the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetFloat(System.String,System.Single@)">
            <summary>
            Retrieves the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetDouble(System.String,System.Double@)">
            <summary>
            Retrieves the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetEnum``1(System.String,``0@)">
            <summary>
            Retrieves the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetString(System.String,System.String@)">
            <summary>
            Retrieves the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetText(System.String,System.String@)">
            <summary>
            Retrieves the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the value of the bool property
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetByte(System.String,System.Byte)">
            <summary>
            Sets the value of the byte property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetShort(System.String,System.Int16)">
            <summary>
            Sets the value of the short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetInt(System.String,System.Int32)">
            <summary>
            Sets the value of the integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetLong(System.String,System.Int64)">
            <summary>
            Sets the value of the long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetUShort(System.String,System.UInt16)">
            <summary>
            Sets the value of the unsigned short property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetUInt(System.String,System.UInt32)">
            <summary>
            Sets the value of the unsigned integer property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetULong(System.String,System.UInt64)">
            <summary>
            Sets the value of the unsigned long property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetFloat(System.String,System.Single)">
            <summary>
            Sets the value of the float property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetDouble(System.String,System.Double)">
            <summary>
            Sets the value of the double property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetEnum``1(System.String,``0)">
            <summary>
            Sets the value of the enum property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetString(System.String,System.String)">
            <summary>
            Sets the value of the string property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.SetText(System.String,System.String)">
            <summary>
            Sets the value of the text property
            </summary>
            <returns><c>true</c> on success</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.Equals(UnrealEngine.Framework.ActorComponent)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.Rename(System.String)">
            <summary>
            Renames the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.Invoke(System.String)">
            <summary>
            Invokes a command, function, or an event with optional arguments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.Destroy(System.Boolean)">
            <summary>
            Unregisters the component, removes it from its outer actor's components array and marks for pending kill
            </summary>
            <param name="promoteChild">Promotes the child component in the hierarchy during the destruction</param>
        </member>
        <member name="P:UnrealEngine.Framework.ActorComponent.IsOwnerSelected">
            <summary>
            Returns <c>true</c> if the component's owner is selected in the editor
            </summary>
            <remarks>Editor functionality</remarks>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.GetActor``1">
            <summary>
            Returns the component's owner actor of the specified class
            </summary>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.AddTag(System.String)">
            <summary>
            Adds a tag to the component that can be used for grouping and categorizing
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.RemoveTag(System.String)">
            <summary>
            Removes a tag from the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorComponent.HasTag(System.String)">
            <summary>
            Indicates whether the component has a tag
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.InputComponent">
            <summary>
            An input component is a transient component that enables an actor to bind various forms of input events to delegate functions
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.InputComponent.HasBindings">
            <summary>
            Indicates whether the component has any input bindings
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.InputComponent.ActionBindingsNumber">
            <summary>
            Returns the number of action bindings
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.InputComponent.BlockInput">
            <summary>
            Gets or sets whether any components lower on the input stack should be allowed to receive input
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.InputComponent.Priority">
            <summary>
            Gets or sets the priority of the input component when pushed in to the stack
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InputComponent.ClearActionBindings">
            <summary>
            Removes all action bindings
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InputComponent.BindAction(System.String,UnrealEngine.Framework.InputEvent,UnrealEngine.Framework.InputDelegate,System.Boolean)">
            <summary>
            Binds the callback function to an action defined in the project settings, or by using <see cref="M:UnrealEngine.Framework.Engine.AddActionMapping(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> and <see cref="M:UnrealEngine.Framework.PlayerInput.AddActionMapping(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="actionName">The name of the action</param>
            <param name="keyEvent">The type of input behavior</param>
            <param name="callback">The function to call when the input is triggered</param>
            <param name="executedWhenPaused">If <c>true</c>, executes even if the game is paused</param>
        </member>
        <member name="M:UnrealEngine.Framework.InputComponent.BindAxis(System.String,UnrealEngine.Framework.InputAxisDelegate,System.Boolean)">
            <summary>
            Binds the callback function to an axis defined in the project settings, or by using <see cref="M:UnrealEngine.Framework.Engine.AddAxisMapping(System.String,System.String,System.Single)"/> and <see cref="M:UnrealEngine.Framework.PlayerInput.AddAxisMapping(System.String,System.String,System.Single)"/>
            </summary>
            <param name="axisName">The name of the axis</param>
            <param name="callback">The function to call while tracking axis</param>
            <param name="executedWhenPaused">If <c>true</c>, executes even if the game is paused</param>
        </member>
        <member name="M:UnrealEngine.Framework.InputComponent.RemoveActionBinding(System.String,UnrealEngine.Framework.InputEvent)">
            <summary>
            Removes the action binding
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.MovementComponent">
            <summary>
            An abstract component that defines functionality for moving a <see cref="T:UnrealEngine.Framework.PrimitiveComponent"/>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MovementComponent.ConstrainToPlane">
            <summary>
            Gets or sets whether the movement will be constrained to a plane
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MovementComponent.SnapToPlaneAtStart">
            <summary>
            Gets or sets whether the updated component will be snapped to the plane when first is attached, if plane constraints are enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MovementComponent.UpdateOnlyIfRendered">
            <summary>
            Gets or sets whether should be skipped if the updated component was not recently rendered
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MovementComponent.PlaneConstraint">
            <summary>
            Gets or sets the plane constraint axis
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MovementComponent.IsInWater">
            <summary>
            Returns <c>true</c> if it's in physics volume with water flag
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetVelocity(System.Numerics.Vector3@)">
            <summary>
            Retrieves the current velocity of updated component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetVelocity">
            <summary>
            Returns the current velocity of updated component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetPlaneConstraintNormal(System.Numerics.Vector3@)">
            <summary>
            Retrieves the normal of the plane that constrains movement, enforced if the plane constraint is enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetPlaneConstraintNormal">
            <summary>
            Returns the normal of the plane that constrains movement, enforced if the plane constraint is enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetPlaneConstraintOrigin(System.Numerics.Vector3@)">
            <summary>
            Retrieves the plane constraint origin
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetPlaneConstraintOrigin">
            <summary>
            Returns the plane constraint origin
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetGravity">
            <summary>
            Returns gravity that affects the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.GetMaxSpeed">
            <summary>
            Returns maximum speed of the component in current movement mode
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.SetVelocity(System.Numerics.Vector3@)">
            <summary>
            Sets the current velocity of updated component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.SetPlaneConstraintNormal(System.Numerics.Vector3@)">
            <summary>
            Sets the normal of the plane that constrains movement, enforced if the plane constraint is enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.SetPlaneConstraintOrigin(System.Numerics.Vector3@)">
            <summary>
            Sets the origin of the plane that constrains movement, enforced if the plane constraint is enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.SetPlaneConstraintFromVectors(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Sets the plane that constrains movement computed from the forward and up vectors, enforced if the plane constraint is enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.IsExceedingMaxSpeed(System.Single)">
            <summary>
            Returns <c>true</c> if the current velocity is exceeding the given max speed within a small error tolerance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.StopMovement">
            <summary>
            Stops movement immediately, zeroes velocity, usually zeros acceleration for components with acceleration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.ConstrainDirectionToPlane(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Constrains a direction vector to the plane constraint, if enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.ConstrainLocationToPlane(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Constrains a location vector to the plane constraint, if enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MovementComponent.ConstrainNormalToPlane(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Constrains a normal vector (of unit length) to the plane constraint, if enabled
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.RotatingMovementComponent">
            <summary>
            A component that performs continuous rotation at a specific rotation rate
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.#ctor(UnrealEngine.Framework.Actor,System.String)">
            <summary>
            Creates the component attached to an actor
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.RotatingMovementComponent.RotationInLocalSpace">
            <summary>
            Gets or sets whether rotation is applied in local or world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.GetPivotTranslation(System.Numerics.Vector3@)">
            <summary>
            Retrieves translation of pivot point around which the component rotates, relative to the current rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.GetPivotTranslation">
            <summary>
            Returns translation of pivot point around which the component rotates, relative to the current rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.GetRotationRate(System.Numerics.Quaternion@)">
            <summary>
            Retrieves yaw, pitch, and roll rotation rate of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.GetRotationRate">
            <summary>
            Returns yaw, pitch, and roll rotation rate of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.SetPivotTranslation(System.Numerics.Vector3@)">
            <summary>
            Sets translation of pivot point around which the component rotates, relative to the current rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RotatingMovementComponent.SetRotationRate(System.Numerics.Quaternion@)">
            <summary>
            Sets yaw, pitch, and roll rotation rate of the component
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SceneComponent">
            <summary>
            The base class of components that can be transformed or attached, but has no rendering or collision capabilities
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.IsAttachedToComponent(UnrealEngine.Framework.SceneComponent)">
            <summary>
            Returns <c>true</c> if the component is attached to the supplied component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.IsAttachedToActor(UnrealEngine.Framework.Actor)">
            <summary>
            Returns <c>true</c> if the component is attached to the actor
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SceneComponent.IsVisible">
            <summary>
            Returns <c>true</c> if the component is visible in the current context
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.IsSocketExists(System.String)">
            <summary>
            Returns <c>true</c> if the a socket with the given name exists
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SceneComponent.HasAnySockets">
            <summary>
            Returns <c>true</c> if the component has any sockets
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.CanAttachAsChild(UnrealEngine.Framework.SceneComponent,System.String)">
            <summary>
            Returns <c>true</c> if another scene component can be attached as a child
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.ForEachAttachedChild``1(System.Action{``0})">
            <summary>
            Performs the specified action on each attached child component if any
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AttachToComponent(UnrealEngine.Framework.SceneComponent,UnrealEngine.Framework.AttachmentTransformRule,System.String)">
            <summary>
            Attaches the component to another component, optionally at a named socket
            </summary>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.DetachFromComponent(UnrealEngine.Framework.DetachmentTransformRule)">
            <summary>
            Detaches the component from a parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.Activate">
            <summary>
            Activates the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.Deactivate">
            <summary>
            Deactivates the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.UpdateToWorld(UnrealEngine.Framework.TeleportType,UnrealEngine.Framework.UpdateTransformFlags)">
            <summary>
            Recalculates the value of the component to world transform
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddLocalOffset(System.Numerics.Vector3@)">
            <summary>
            Adds a delta to the location of the component in its local reference frame
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddLocalRotation(System.Numerics.Quaternion@)">
            <summary>
            Adds a delta to the rotation of the component in its local reference frame
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddRelativeLocation(System.Numerics.Vector3@)">
            <summary>
            Adds a delta to the translation of the component relative to its parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddRelativeRotation(System.Numerics.Quaternion@)">
            <summary>
            Adds a delta to the rotation of the component relative to its parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddLocalTransform(UnrealEngine.Framework.Transform@)">
            <summary>
            Adds a delta to the transform of the component in its local reference frame, scale is unchanged
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddWorldOffset(System.Numerics.Vector3@)">
            <summary>
            Adds a delta to the location of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddWorldRotation(System.Numerics.Quaternion@)">
            <summary>
            Adds a delta to the rotation of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.AddWorldTransform(UnrealEngine.Framework.Transform@)">
            <summary>
            Adds a delta to the transform of the component in world space, scale is unchanged
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetAttachedSocketName">
            <summary>
            Returns the name of a socket the component is attached to
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetBounds(UnrealEngine.Framework.Transform@,UnrealEngine.Framework.Bounds@)">
            <summary>
            Retrieves calculated bounds of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetSocketLocation(System.String,System.Numerics.Vector3@)">
            <summary>
            Retrieves location of a socket in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetSocketLocation(System.String)">
            <summary>
            Returns location of a socket in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetSocketRotation(System.String,System.Numerics.Quaternion@)">
            <summary>
            Retrieves rotation of a socket in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetSocketRotation(System.String)">
            <summary>
            Returns rotation of a socket in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetVelocity(System.Numerics.Vector3@)">
            <summary>
            Retrieves velocity of the component, or the velocity of the physics body if simulating physics
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetVelocity">
            <summary>
            Returns velocity of the component, or the velocity of the physics body if simulating physics
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetLocation(System.Numerics.Vector3@)">
            <summary>
            Retrieves location of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetLocation">
            <summary>
            Returns location of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetRotation(System.Numerics.Quaternion@)">
            <summary>
            Returns rotation of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetRotation">
            <summary>
            Returns rotation of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetScale(System.Numerics.Vector3@)">
            <summary>
            Retrieves scale of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetScale">
            <summary>
            Returns scale of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetTransform(UnrealEngine.Framework.Transform@)">
            <summary>
            Returns the transform which assigned to the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetTransform">
            <summary>
            Returns the transform which assigned to the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetForwardVector(System.Numerics.Vector3@)">
            <summary>
            Retrieves the forward X unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetForwardVector">
            <summary>
            Returns the forward X unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetRightVector(System.Numerics.Vector3@)">
            <summary>
            Retrieves the right Y unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetRightVector">
            <summary>
            Returns the right Y unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetUpVector(System.Numerics.Vector3@)">
            <summary>
            Retrieves the up Z unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.GetUpVector">
            <summary>
            Returns the up Z unit direction vector from the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetMobility(UnrealEngine.Framework.ComponentMobility)">
            <summary>
            Sets how often the component is allowed to move at runtime
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetVisibility(System.Boolean,System.Boolean)">
            <summary>
            Sets the visibility of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetRelativeLocation(System.Numerics.Vector3@)">
            <summary>
            Sets the location of the component relative to its parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetRelativeRotation(System.Numerics.Quaternion@)">
            <summary>
            Sets the rotation of the component relative to its parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetRelativeTransform(UnrealEngine.Framework.Transform@)">
            <summary>
            Sets the transform of the component relative to its parent
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetWorldLocation(System.Numerics.Vector3@)">
            <summary>
            Sets the location of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetWorldRotation(System.Numerics.Quaternion@)">
            <summary>
            Sets the rotation of the component in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetWorldScale(System.Numerics.Vector3@)">
            <summary>
            Sets the scale of the component world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SceneComponent.SetWorldTransform(UnrealEngine.Framework.Transform@)">
            <summary>
            Sets the transform of the component in world space
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AudioComponent">
            <summary>
            A component that is used to play a sound
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.AudioComponent.IsPlaying">
            <summary>
            Returns <c>true</c> if the sound playing any audio
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.AudioComponent.Paused">
            <summary>
            Gets or sets whether the audio is paused
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.SetSound(UnrealEngine.Framework.SoundBase)">
            <summary>
            Sets the sound object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.Play">
            <summary>
            Plays the audio
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.Stop">
            <summary>
            Stops the audio
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.FadeIn(System.Single,System.Single,System.Single,UnrealEngine.Framework.AudioFadeCurve)">
            <summary>
            Smoothly starts the audio, can be used instead of <see cref="M:UnrealEngine.Framework.AudioComponent.Play"/>
            </summary>
            <param name="duration">Duration to reach <paramref name="volumeLevel"/></param>
            <param name="volumeLevel">The percentage of calculated volume to fade to</param>
            <param name="startTime">Fading start time</param>
            <param name="fadeCurve">Curve to adjust audio volume</param>
        </member>
        <member name="M:UnrealEngine.Framework.AudioComponent.FadeOut(System.Single,System.Single,UnrealEngine.Framework.AudioFadeCurve)">
            <summary>
            Smoothly stops the audio, can be used instead of <see cref="M:UnrealEngine.Framework.AudioComponent.Stop"/>
            </summary>
            <param name="duration">Duration to reach <paramref name="volumeLevel"/></param>
            <param name="volumeLevel">he percentage of calculated volume to fade to</param>
            <param name="fadeCurve">Curve to adjust audio volume</param>
        </member>
        <member name="T:UnrealEngine.Framework.CameraComponent">
            <summary>
            Represents a camera viewpoint and settings, such as projection type, field of view, and post-process overrides
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CameraComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.ConstrainAspectRatio">
            <summary>
            Gets or sets whether black bars will be added if the destination view has a different aspect ratio than the camera requested
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.AspectRatio">
            <summary>
            Gets or sets the aspect ratio if <see cref="P:UnrealEngine.Framework.CameraComponent.ConstrainAspectRatio"/> set to <c>true</c>
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.FieldOfView">
            <summary>
            Gets or sets the horizontal field of view (in degrees) in perspective mode (ignored in orthographic mode)
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.OrthoFarClipPlane">
            <summary>
            Gets or sets the far plane distance of the orthographic view (in world units)
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.OrthoNearClipPlane">
            <summary>
            Gets or sets the near plane distance of the orthographic view (in world units)
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.OrthoWidth">
            <summary>
            Gets or sets the desired width of the orthographic view (in world units)
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CameraComponent.LockToHeadMountedDisplay">
            <summary>
            Gets or sets whether the camera's orientation and position is locked to the head-mounted display
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CameraComponent.SetProjectionMode(UnrealEngine.Framework.CameraProjectionMode)">
            <summary>
            Sets the projection mode
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ChildActorComponent">
            <summary>
            A component that automatically spawns and destroys a child actor
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ChildActorComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.ChildActorComponent.GetChildActor``1">
            <summary>
            Gets the child actor
            </summary>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ChildActorComponent.SetChildActor``1">
            <summary>
            Sets the child actor
            </summary>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.SpringArmComponent">
            <summary>
            A component that maintains its children at a fixed distance from the parent, but will retract the children if there is a collision, and spring back when there is no collision
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.IsCollisionFixApplied">
            <summary>
            Returns <c>true</c> if the collision test displacement being applied
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.DrawDebugLagMarkers">
            <summary>
            Gets or sets whether draw markers at the camera target (in green) and the lagged position (in yellow) if the camera location lag is enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CollisionTest">
            <summary>
            Gets or sets whether the collision test is enabled using <see cref="P:UnrealEngine.Framework.SpringArmComponent.ProbeChannel"/> and <see cref="P:UnrealEngine.Framework.SpringArmComponent.ProbeSize"/> to prevent camera clipping into level
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraPositionLag">
            <summary>
            Gets or sets whether the camera lags behind target position to smooth its movement
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraRotationLag">
            <summary>
            Gets or sets whether the camera lags behind target rotation to smooth its movement
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraLagSubstepping">
            <summary>
            Gets or sets whether the sub-step camera damping so that it handles fluctuating frame rates well
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.InheritYaw">
            <summary>
            Gets or sets whether the component should inherit yaw from the parent component, has no effect if using absolute rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.InheritPitch">
            <summary>
            Gets or sets whether the component should inherit pitch from the parent component, has no effect if using absolute rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.InheritRoll">
            <summary>
            Gets or sets whether the component should inherit roll from the parent component, has no effect if using absolute rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraLagMaxDistance">
            <summary>
            Gets or sets a max distance the camera target may lag behind the current location
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraLagMaxTimeStep">
            <summary>
            Gets or sets a max time step used when sub-stepping camera lag
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraPositionLagSpeed">
            <summary>
            Gets or sets how quickly the camera reaches a target position
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.CameraRotationLagSpeed">
            <summary>
            Gets or sets how quickly еру camera reaches a target rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.ProbeChannel">
            <summary>
            Gets or sets the collision channel of the query probe (<see cref="F:UnrealEngine.Framework.CollisionChannel.Camera"/> by default)
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.ProbeSize">
            <summary>
            Gets or sets how big should be the query probe sphere
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.TargetArmLength">
            <summary>
            Gets or sets the natural length of the spring arm when there are no collisions
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SpringArmComponent.UsePawnControlRotation">
            <summary>
            Gets or sets if the component should use the view/control rotation of the pawn
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetSocketOffset(System.Numerics.Vector3@)">
            <summary>
            Retrieves offset at the end of the spring arm, can be used instead of the relative offset of the attached component to ensure the line trace works as desired
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetSocketOffset">
            <summary>
            Returns offset at the end of the spring arm, can be used instead of the relative offset of the attached component to ensure the line trace works as desired
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetTargetOffset(System.Numerics.Vector3@)">
            <summary>
            Retrieves offset at the start of the spring arm in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetTargetOffset">
            <summary>
            Returns offset at the start of the spring arm in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetUnfixedCameraPosition(System.Numerics.Vector3@)">
            <summary>
            Retrieves the unfixed camera position
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetUnfixedCameraPosition">
            <summary>
            Returns the unfixed camera position
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetDesiredRotation(System.Numerics.Quaternion@)">
            <summary>
            Retrieves the desired rotation for the spring arm, before the rotation constraints such as <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritYaw"/>, <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritPitch"/>, or <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritRoll"/> are enforced
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetDesiredRotation">
            <summary>
            Returns the desired rotation for the spring arm, before the rotation constraints such as <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritYaw"/>, <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritPitch"/>, or <see cref="P:UnrealEngine.Framework.SpringArmComponent.InheritRoll"/> are enforced
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetTargetRotation(System.Numerics.Quaternion@)">
            <summary>
            Retrieves the target inherited rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.GetTargetRotation">
            <summary>
            Returns the target inherited rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.SetSocketOffset(System.Numerics.Vector3@)">
            <summary>
            Sets offset at the end of the spring arm, can be used instead of the relative offset of the attached component to ensure the line trace works as desired
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SpringArmComponent.SetTargetOffset(System.Numerics.Vector3@)">
            <summary>
            Sets offset at the start of the spring arm in world space
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.PostProcessComponent">
            <summary>
            A component that is used for post-processing manipulations
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PostProcessComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessComponent.Enabled">
            <summary>
            Gets or sets whether the volume is enabled
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessComponent.BlendRadius">
            <summary>
            Gets or sets the world space radius around the volume that is used for blending if not unbound
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessComponent.BlendWeight">
            <summary>
            Gets or sets the blend weight, 0.0f indicates no effect, 1.0f indicates full effect
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessComponent.Unbound">
            <summary>
            Gets or sets whether the volume covers the whole world or only the area inside its bounds
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PostProcessComponent.Priority">
            <summary>
            Gets or sets the priority of the volume
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.PrimitiveComponent">
            <summary>
            An abstract component that contains or generates some sort of geometry, generally to be rendered or used as collision data
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.IsGravityEnabled">
            <summary>
            Returns <c>true</c> if the component is affected by gravity, always returns <c>false</c> if physics simulation is disabled for the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.IsOverlappingComponent(UnrealEngine.Framework.PrimitiveComponent)">
            <summary>
            Returns <c>true</c> if the component is overlapping another component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.ForEachOverlappingComponent``1(System.Action{``0})">
            <summary>
            Performs the specified action on each overlapping component if any
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.Mass">
            <summary>
            Returns approximate mass in kilograms
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.CastShadow">
            <summary>
            Gets or sets whether the component should cast a shadow
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.OnlyOwnerSee">
            <summary>
            Gets or sets the component visibility when the view actor is the component's owner
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.OwnerNoSee">
            <summary>
            Gets or sets whether the component would not be visible when the view actor is the component's owner, directly or indirectly
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.IgnoreRadialForce">
            <summary>
            Gets or sets whether the component should ignore radial forces
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.IgnoreRadialImpulse">
            <summary>
            Gets or sets whether the component should ignore radial impulses
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.AngularDamping">
            <summary>
            Gets or sets the angular damping of the component
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.LinearDamping">
            <summary>
            Gets or sets the linear damping of the component
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.PrimitiveComponent.MaterialsNumber">
            <summary>
            Returns number of material elements in the primitive
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddAngularImpulseInDegrees(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds an angular impulse in degrees to a rigid body
            </summary>
            <param name="impulse">Magnitude and direction of the impulse to apply, the direction is the axis of rotation</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="velocityChange">If <c>true</c>, <paramref name="impulse"/> is taken as a change in velocity instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddAngularImpulseInRadians(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds an angular impulse in radians to a rigid body
            </summary>
            <param name="impulse">Magnitude and direction of the impulse to apply, the direction is the axis of rotation</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="velocityChange">If <c>true</c>, <paramref name="impulse"/> is taken as a change in velocity instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddForce(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds a force to a rigid body
            </summary>
            <param name="force">Force vector to apply, magnitude indicates strength of force</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="accelerationChange">If <c>true</c>, <paramref name="force"/> is taken as a change in acceleration instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddForceAtLocation(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds a force to a rigid body at a specific location, optionally in local space
            </summary>
            <param name="force">Force vector to apply, magnitude indicates strength of force</param>
            <param name="location">A point in world or local space to apply the force at</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="localSpace">If <c>true</c>, applies force in local space instead of world space</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddImpulse(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds an impulse to a rigid body
            </summary>
            <param name="impulse">Magnitude and direction of the impulse to apply</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="velocityChange">If <c>true</c>, <paramref name="impulse"/> is taken as a change in velocity instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddImpulseAtLocation(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String)">
            <summary>
            Adds an impulse to a rigid body at a specific location
            </summary>
            <param name="impulse">Magnitude and direction of the impulse to apply</param>
            <param name="location">A point in world space to apply the impulse at</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddRadialForce(System.Numerics.Vector3@,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Adds a force to all rigid bodies in the component, originating from the supplied world-space location
            </summary>
            <param name="origin">Origin of the force in world space</param>
            <param name="radius">Radius within which to apply the force</param>
            <param name="strength">Strength of the force to apply</param>
            <param name="linearFalloff">If <c>true</c>, the force will lose its strength linearly</param>
            <param name="accelerationChange">If <c>true</c>, <paramref name="strength"/> is taken as a change in acceleration instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddRadialImpulse(System.Numerics.Vector3@,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Adds an impulse to all rigid bodies in the component, originating from the supplied world-space location
            </summary>
            <param name="origin">Origin of the impulse in world space</param>
            <param name="radius">Radius within which to apply the impulse</param>
            <param name="strength">Strength of the impulse to apply</param>
            <param name="linearFalloff">If <c>true</c>, the force will lose its strength linearly</param>
            <param name="accelerationChange">If <c>true</c>, <paramref name="strength"/> is taken as a change in acceleration instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddTorqueInDegrees(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds a torque in degrees to a rigid body
            </summary>
            <param name="torque">Torque to apply, direction is axis of rotation and magnitude is strength of the torque</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="accelerationChange">If <c>true</c>, <paramref name="torque"/> is taken as a change in acceleration instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.AddTorqueInRadians(System.Numerics.Vector3@,System.String,System.Boolean)">
            <summary>
            Adds a torque in radians to a rigid body
            </summary>
            <param name="torque">Torque to apply, direction is axis of rotation and magnitude is strength of the torque</param>
            <param name="boneName">If applied to <see cref="T:UnrealEngine.Framework.SkeletalMeshComponent"/>, the name of the body to apply an angular impulse to, or <c>null</c> to indicate the root body</param>
            <param name="accelerationChange">If <c>true</c>, <paramref name="torque"/> is taken as a change in acceleration instead of a physical force (the mass will have no effect)</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsLinearVelocity(System.Numerics.Vector3@,System.String)">
            <summary>
            Retrieves the linear velocity of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsLinearVelocity(System.String)">
            <summary>
            Returns the linear velocity of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint(System.Numerics.Vector3@,System.Numerics.Vector3@,System.String)">
            <summary>
            Retrieves the linear velocity of a point on a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint(System.Numerics.Vector3@,System.String)">
            <summary>
            Returns the linear velocity of a point on a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees(System.Numerics.Vector3@,System.String)">
            <summary>
            Retrieves the angular velocity in degrees of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees(System.String)">
            <summary>
            Returns the angular velocity in degrees of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsAngularVelocityInRadians(System.Numerics.Vector3@,System.String)">
            <summary>
            Retrieves the angular velocity in radians of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetPhysicsAngularVelocityInRadians(System.String)">
            <summary>
            Returns the angular velocity in radians of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetMaterial(System.Int32)">
            <summary>
            Returns the material at the specified element index or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetDistanceToCollision(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Retrieves distance to closest collision
            </summary>
            <param name="point"></param>
            <param name="closestPointOnCollision"></param>
            <returns>More than 0.0f if successful, equals to 0.0f if a point is inside the geometry, less than 0.0f if the primitive does not have collision or if the geometry not supported</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.GetSquaredDistanceToCollision(System.Numerics.Vector3@,System.Single@,System.Numerics.Vector3@)">
            <summary>
            Retrieves squared distance to closest collision
            </summary>
            <param name="point"></param>
            <param name="squaredDistance"></param>
            <param name="closestPointOnCollision"></param>
            <returns><c>true</c> if a distance to the body was found and <paramref name="squaredDistance"/> has been populated</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetMaterial(System.Int32,UnrealEngine.Framework.MaterialInterface)">
            <summary>
            Sets the material applied to an element of the mesh
            </summary>
            <param name="elementIndex">The element to access the material of</param>
            <param name="material">A material</param>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetGenerateOverlapEvents(System.Boolean)">
            <summary>
            Sets whether the component should generate overlap events when it's overlaps other components
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetGenerateHitEvents(System.Boolean)">
            <summary>
            Sets whether the component should generate hit events when it's collides with other components
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetMass(System.Single,System.String)">
            <summary>
            Sets the mass in kilograms of a rigid body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCenterOfMass(System.Numerics.Vector3@,System.String)">
            <summary>
            Sets the center of mass of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetPhysicsLinearVelocity(System.Numerics.Vector3@,System.Boolean,System.String)">
            <summary>
            Sets the linear velocity of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees(System.Numerics.Vector3@,System.Boolean,System.String)">
            <summary>
            Sets the angular velocity in degrees of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetPhysicsAngularVelocityInRadians(System.Numerics.Vector3@,System.Boolean,System.String)">
            <summary>
            Sets the angular velocity in radians of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees(System.Single,System.Boolean,System.String)">
            <summary>
            Sets the maximum angular velocity in degrees of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians(System.Single,System.Boolean,System.String)">
            <summary>
            Sets the maximum angular velocity in radians of a single body
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetSimulatePhysics(System.Boolean)">
            <summary>
            Sets whether a single body should use physics simulation, or should be kinematic, if the component is currently attached to something, beginning simulation will detach it
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetEnableGravity(System.Boolean)">
            <summary>
            Sets whether the component is affected by gravity, applies only to components with enabled physics simulation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCollisionMode(UnrealEngine.Framework.CollisionMode)">
            <summary>
            Sets the collision mode of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCollisionChannel(UnrealEngine.Framework.CollisionChannel)">
            <summary>
            Sets the collision channel of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCollisionProfileName(System.String,System.Boolean)">
            <summary>
            Sets the collision <a href="https://docs.unrealengine.com/en-US/Engine/Physics/Collision/Reference/index.html">profile name</a> of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCollisionResponseToChannel(UnrealEngine.Framework.CollisionChannel,UnrealEngine.Framework.CollisionResponse)">
            <summary>
            Sets the collision response to channel of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetCollisionResponseToAllChannels(UnrealEngine.Framework.CollisionResponse)">
            <summary>
            Sets the collision response to all channels of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetIgnoreActorWhenMoving(UnrealEngine.Framework.Actor,System.Boolean)">
            <summary>
            Sets whether to ignore collision of all components of a specified actor during the movement
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.SetIgnoreComponentWhenMoving(UnrealEngine.Framework.PrimitiveComponent,System.Boolean)">
            <summary>
            Sets whether to ignore collision of a specified component during the movement
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.ClearMoveIgnoreActors">
            <summary>
            Clears the list of actors that ignored during the movement
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.ClearMoveIgnoreComponents">
            <summary>
            Clears the list of components that ignored during the movement
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic(System.Int32)">
            <summary>
            Creates a dynamic material instance for the specified element index, the parent of the instance is set to the material being replaced
            </summary>
            <param name="elementIndex">The index of the skin to replace the material for, if invalid, the material is unchanged and <c>null</c> is returned</param>
            <returns>A material instance or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.RegisterEvent(UnrealEngine.Framework.ComponentEventType)">
            <summary>
            Registers an event notification for the primitive component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.PrimitiveComponent.UnregisterEvent(UnrealEngine.Framework.ComponentEventType)">
            <summary>
            Unregisters an event notification for the primitive component
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ShapeComponent">
            <summary>
            An abstract component that is represented by a simple geometrical shape
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ShapeComponent.DynamicObstacle">
            <summary>
            Gets or sets whether the shape will be used for navigation as a dynamic modifier instead of using regular collision data
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ShapeComponent.ShapeColor">
            <summary>
            Gets or sets the color of the shape
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.BoxComponent">
            <summary>
            A box generally used for simple collision
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.GetScaledBoxExtent(System.Numerics.Vector3@)">
            <summary>
            Retrieves the box extents scaled by the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.GetScaledBoxExtent">
            <summary>
            Returns the box extents scaled by the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.GetUnscaledBoxExtent(System.Numerics.Vector3@)">
            <summary>
            Retrieves the box extent ignoring the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.GetUnscaledBoxExtent">
            <summary>
            Returns the box extent ignoring the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.SetBoxExtent(System.Numerics.Vector3@,System.Boolean)">
            <summary>
            Sets the box extent size, unscaled before the component scale is applied
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.BoxComponent.InitBoxExtent(System.Numerics.Vector3@)">
            <summary>
            Sets the box extent size without triggering a render or physics update
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SphereComponent">
            <summary>
            A sphere generally used for simple collision
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SphereComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.SphereComponent.ScaledSphereRadius">
            <summary>
            Returns the sphere radius scaled by the component scale
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SphereComponent.UnscaledSphereRadius">
            <summary>
            Returns the sphere radius ignoring the component scale
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SphereComponent.ShapeScale">
            <summary>
            Returns the scale of the shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SphereComponent.SetSphereRadius(System.Single,System.Boolean)">
            <summary>
            Sets the sphere radius, unscaled before the component scale is applied
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SphereComponent.InitSphereRadius(System.Single)">
            <summary>
            Sets the sphere radius without triggering a render or physics update
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CapsuleComponent">
            <summary>
            A capsule generally used for simple collision
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.CapsuleComponent.ScaledCapsuleRadius">
            <summary>
            Returns the capsule radius scaled by the component scale
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CapsuleComponent.UnscaledCapsuleRadius">
            <summary>
            Returns the capsule radius ignoring the component scale
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.CapsuleComponent.ShapeScale">
            <summary>
            Returns the scale of the shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.GetScaledCapsuleSize(System.Single@,System.Single@)">
            <summary>
            Retrieves the capsule radius and half-height scaled by the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.GetUnscaledCapsuleSize(System.Single@,System.Single@)">
            <summary>
            Retrieves the capsule radius and half-height ignoring the component scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.SetCapsuleRadius(System.Single,System.Boolean)">
            <summary>
            Sets the capsule radius, unscaled before the component scale is applied
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.SetCapsuleSize(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets the capsule size, unscaled before the component scale is applied
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.CapsuleComponent.InitCapsuleSize(System.Single,System.Single)">
            <summary>
            Sets the capsule size without triggering a render or physics update
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.MeshComponent">
            <summary>
            An abstract component that is an instance of a renderable collection of triangles
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MeshComponent.IsValidMaterialSlotName(System.String)">
            <summary>
            Returns <c>true</c> if the given slot name is valid
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MeshComponent.GetMaterialIndex(System.String)">
            <summary>
            Returns a material index the given a slot name
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.TextRenderComponent">
            <summary>
            Renders text in the world
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetFont(UnrealEngine.Framework.Font)">
            <summary>
            Sets the font of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetText(System.String)">
            <summary>
            Sets the text of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetTextMaterial(UnrealEngine.Framework.MaterialInterface)">
            <summary>
            Sets the text material of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetTextRenderColor(System.Drawing.Color)">
            <summary>
            Sets the text render color of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetHorizontalAlignment(UnrealEngine.Framework.HorizontalTextAligment)">
            <summary>
            Sets the herizontal alignment
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetHorizontalSpacingAdjustment(System.Single)">
            <summary>
            Sets the horizontal spacing adjustment
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetVerticalAlignment(UnrealEngine.Framework.VerticalTextAligment)">
            <summary>
            Sets the vertical alignment
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetVerticalSpacingAdjustment(System.Single)">
            <summary>
            Sets the vertical spacing adjustment
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetScale(System.Numerics.Vector2@)">
            <summary>
            Sets the text scale
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.TextRenderComponent.SetWorldSize(System.Single)">
            <summary>
            Sets the world size of the text
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.LightComponentBase">
            <summary>
            The base class of light components
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LightComponentBase.Intensity">
            <summary>
            Returns the total energy that the light emits
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.LightComponentBase.CastShadows">
            <summary>
            Gets or sets whether the light should cast shadows
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.LightComponent">
            <summary>
            A component that represents light
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LightComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.LightComponent.SetIntensity(System.Single)">
            <summary>
            Sets the intensity of the light
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.LightComponent.SetLightColor(UnrealEngine.Framework.LinearColor@)">
            <summary>
            Sets the light color
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.DirectionalLightComponent">
            <summary>
            A component that represents directional light
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.DirectionalLightComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="T:UnrealEngine.Framework.MotionControllerComponent">
            <summary>
            A component that represents a physical motion controller in 3D space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MotionControllerComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.MotionControllerComponent.IsTracked">
            <summary>
            Returns <c>true</c> if the component has a valid tracked device this frame
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MotionControllerComponent.DisplayDeviceModel">
            <summary>
            Gets or sets whether to render a model associated with the set hand
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MotionControllerComponent.DisableLowLatencyUpdate">
            <summary>
            Gets or sets whether render transforms within the motion controller hierarchy will be updated a second time immediately before rendering
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MotionControllerComponent.TrackingSource">
            <summary>
            Gets or sets the current tracking source
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MotionControllerComponent.SetTrackingMotionSource(System.String)">
            <summary>
            Sets the tracking motion source
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MotionControllerComponent.SetAssociatedPlayerIndex(System.Int32)">
            <summary>
            Sets the player index which the motion controller should automatically follow
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MotionControllerComponent.SetCustomDisplayMesh(UnrealEngine.Framework.StaticMesh)">
            <summary>
            Sets the custom display mesh that attached to the motion controller
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MotionControllerComponent.SetDisplayModelSource(System.String)">
            <summary>
            Sets the display model source
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.StaticMeshComponent">
            <summary>
            A component that is used to create an instance of a static mesh, a piece of geometry that consists of a static set of polygons
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StaticMeshComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="M:UnrealEngine.Framework.StaticMeshComponent.GetLocalBounds(System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Retrieves local bounds of the mesh
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StaticMeshComponent.GetStaticMesh">
            <summary>
            Returns the static mesh used by this instance or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.StaticMeshComponent.SetStaticMesh(UnrealEngine.Framework.StaticMesh)">
            <summary>
            Returns <c>true</c> if the mesh was set
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.InstancedStaticMeshComponent">
            <summary>
            A component that efficiently renders multiple instances of the same <see cref="T:UnrealEngine.Framework.StaticMeshComponent"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.InstancedStaticMeshComponent.InstanceCount">
            <summary>
            Returns the number of instances in the component
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.GetInstanceTransform(System.Int32,UnrealEngine.Framework.Transform@,System.Boolean)">
            <summary>
            Retrieves the transform of the specified instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.AddInstance(UnrealEngine.Framework.Transform@)">
            <summary>
            Adds an instance to the component using the transform that will be applied at instantiation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.AddInstances(UnrealEngine.Framework.Transform[])">
            <summary>
            Adds multiple instances to the component using the transforms that will be applied at instantiation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.UpdateInstanceTransform(System.Int32,UnrealEngine.Framework.Transform@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the transform for the specified instance
            </summary>
            <param name="instanceIndex">The index of the instance to update</param>
            <param name="instanceTransform">The new transform to apply</param>
            <param name="worldSpace">If <c>true</c>, the new transform is interpreted as a world space transform, otherwise it is interpreted as local space</param>
            <param name="markRenderStateDirty">If the render state is marked as dirty the change should be visible immediately, consider setting it to <c>true</c> only during the update of the last instance in a batch</param>
            <param name="teleport">Whether the instance's physics should be moved normally, or teleported (moved instantly, ignoring velocity)</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.BatchUpdateInstanceTransforms(System.Int32,UnrealEngine.Framework.Transform[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the transform for an array of instances
            </summary>
            <param name="startInstanceIndex">The starting index of the instances to update</param>
            <param name="instanceTransforms">The new transforms to apply</param>
            <param name="worldSpace">If <c>true</c>, the new transforms are interpreted as a world space transforms, otherwise it is interpreted as local space</param>
            <param name="markRenderStateDirty">If the render state is marked as dirty the change should be visible immediately</param>
            <param name="teleport">Whether the instances physics should be moved normally, or teleported (moved instantly, ignoring velocity)</param>
            <returns><c>true</c> if successful</returns>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.RemoveInstance(System.Int32)">
            <summary>
            Removes the specified instance
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.InstancedStaticMeshComponent.ClearInstances">
            <summary>
            Clears all instances being rendered by the component
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.HierarchicalInstancedStaticMeshComponent">
            <summary>
            A component that efficiently renders multiple instances of the same <see cref="T:UnrealEngine.Framework.StaticMeshComponent"/> with different level of detail
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.HierarchicalInstancedStaticMeshComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.HierarchicalInstancedStaticMeshComponent.DisableCollision">
            <summary>
            Gets or sets whether the collision should be disabled
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SkinnedMeshComponent">
            <summary>
            A component that supports bone skinned mesh rendering
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.GetBonesNumber">
            <summary>
            Returns the number of bones in the skeleton
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.GetBoneIndex(System.String)">
            <summary>
            Returns the index of a bone by name
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.GetBoneName(System.Int32)">
            <summary>
            Returns the name of a bone by index
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.GetBoneTransform(System.Int32,UnrealEngine.Framework.Transform@)">
            <summary>
            Retrieves the transform of a bone by index
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.GetBoneTransform(System.Int32)">
            <summary>
            Returns the transform of a bone by index
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkinnedMeshComponent.SetSkeletalMesh(UnrealEngine.Framework.SkeletalMesh,System.Boolean)">
            <summary>
            Sets the skeletal mesh
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SkeletalMeshComponent">
            <summary>
            A component that is used to create an instance of an animated <see cref="T:UnrealEngine.Framework.SkeletalMesh"/> asset
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.SkeletalMeshComponent.IsPlaying">
            <summary>
            Returns <c>true</c> if playing animation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.GetAnimationInstance">
            <summary>
            Returns the animation instance that is driving the class or <c>null</c> on failure
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.SetAnimation(UnrealEngine.Framework.AnimationAsset)">
            <summary>
            Sets the animation to play
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.SetAnimationMode(UnrealEngine.Framework.AnimationMode)">
            <summary>
            Sets the animation mode
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.SetAnimationBlueprint(UnrealEngine.Framework.Blueprint)">
            <summary>
            Sets the animation blueprint
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.Play(System.Boolean)">
            <summary>
            Plays the animation
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.PlayAnimation(UnrealEngine.Framework.AnimationAsset,System.Boolean)">
            <summary>
            Plays the animation asset
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SkeletalMeshComponent.Stop">
            <summary>
            Stops the animation
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SplineComponent">
            <summary>
            Represents a spline shape
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.SplineComponent.IsClosedLoop">
            <summary>
            Returns <c>true</c> if the spline is a closed loop
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SplineComponent.Duration">
            <summary>
            Gets or sets the duration of the spline in seconds
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SplineComponent.SplinePointsNumber">
            <summary>
            Returns the number of spline points
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.SplineComponent.SplineSegmentsNumber">
            <summary>
            Returns the number of spline segments
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetSplinePointType(System.Int32)">
            <summary>
            Returns the type of a spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the tangent at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the tangent at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Numerics.Vector3@)">
            <summary>
            Retrieves the tangent at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTangentAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns the tangent at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,UnrealEngine.Framework.Transform@)">
            <summary>
            Retrieves the transform at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the transform at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,UnrealEngine.Framework.Transform@)">
            <summary>
            Retrieves the transform at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns the transform at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetArriveTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the arrive tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetArriveTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the arrive tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDefaultUpVector(UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the default up vector of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDefaultUpVector(UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the default up vector of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves a unit direction vector of the spline tangent at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector of the spline tangent at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves a unit direction vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Numerics.Vector3@)">
            <summary>
            Retrieves a unit direction vector of the spline tangent at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDirectionAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns a unit direction vector of the spline tangent at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetDistanceAlongSplineAtSplinePoint(System.Int32)">
            <summary>
            Returns the distance along the spline at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLeaveTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the leave tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLeaveTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the leave tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAndTangentAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@,System.Numerics.Vector3@)">
            <summary>
            Retrieves the location and tangent at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the location at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the location at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the location at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the location at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the location at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetLocationAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the location at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves a unit direction vector corresponding to the spline's right vector at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Retrieves a unit direction vector corresponding to the spline's right vector at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's right vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the spline's right vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's right vector at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRightVectorAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns the spline's right vector at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRollAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the spline's roll in degrees at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRollAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the spline's roll in degrees at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRollAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns the spline's roll in degrees at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Quaternion@)">
            <summary>
            Retrieves a rotation corresponding to the spline's rotation at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a rotation corresponding to the spline's rotation at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Quaternion@)">
            <summary>
            Retrieves a spline's rotation at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a spline's rotation at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Numerics.Quaternion@)">
            <summary>
            Retrieves a rotation corresponding to the spline's position and direction at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetRotationAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns a rotation corresponding to the spline's position and direction at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtDistanceAlongSpline(System.Single,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's scale at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtDistanceAlongSpline(System.Single)">
            <summary>
            Returns the spline's scale at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtSplinePoint(System.Int32,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's scale at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtSplinePoint(System.Int32)">
            <summary>
            Returns the spline's scale at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtTime(System.Single,System.Boolean,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's scale at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetScaleAtTime(System.Single,System.Boolean)">
            <summary>
            Returns the spline's scale at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetSplineLength">
            <summary>
            Returns the total length along the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Boolean,UnrealEngine.Framework.Transform@)">
            <summary>
            Retrieves the spline's transform at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetTransformAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Boolean)">
            <summary>
            Returns the spline's transform at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves a unit direction vector corresponding to the spline's up vector at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtDistanceAlongSpline(System.Single,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector corresponding to the spline's up vector at the given distance along the length of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's up vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtSplinePoint(System.Int32,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the spline's up vector at the spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean,System.Numerics.Vector3@)">
            <summary>
            Retrieves the spline's up vector at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.GetUpVectorAtTime(System.Single,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns the spline's up vector at the given time from 0.0f to the spline duration
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetSplinePointType(System.Int32,UnrealEngine.Framework.SplinePointType,System.Boolean)">
            <summary>
            Sets the type of a spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetClosedLoop(System.Boolean,System.Boolean)">
            <summary>
            Sets whether the spline is a closed loop
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetDefaultUpVector(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Sets the default up vector of the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetLocationAtSplinePoint(System.Int32,System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Sets an existing point to a new location
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetTangentAtSplinePoint(System.Int32,System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Sets the tangent at a given spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetTangentsAtSplinePoint(System.Int32,System.Numerics.Vector3@,System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Sets the tangents at a given spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.SetUpVectorAtSplinePoint(System.Int32,System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Sets the up vector at a given spline point
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.AddSplinePoint(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Adds a point to the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.AddSplinePointAtIndex(System.Numerics.Vector3@,System.Int32,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Adds a point to the spline at the specified index
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.ClearSplinePoints(System.Boolean)">
            <summary>
            Clears all the points in the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindDirectionClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector of the spline tangent closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindLocationClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a point of the spline closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindUpVectorClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector corresponding to the spline's up vector closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindRightVectorClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a unit direction vector corresponding to the spline's right vector closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindRollClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns the spline's roll in degrees closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindScaleClosestToWorldLocation(System.Numerics.Vector3@)">
            <summary>
            Returns the spline's scale closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindTangentClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace)">
            <summary>
            Returns a tangent of the spline closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.FindTransformClosestToWorldLocation(System.Numerics.Vector3@,UnrealEngine.Framework.SplineCoordinateSpace,System.Boolean)">
            <summary>
            Returns a transform closest to the location in world space
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.RemoveSplinePoint(System.Int32,System.Boolean)">
            <summary>
            Removes a point at the specified index from the spline
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.SplineComponent.UpdateSpline">
            <summary>
            Updates the spline
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.RadialForceComponent">
            <summary>
            A component that emits a radial force or impulse that can affect physics objects and destructible objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RadialForceComponent.#ctor(UnrealEngine.Framework.Actor,System.String,System.Boolean,UnrealEngine.Framework.Blueprint)">
            <summary>
            Creates the component attached to an actor and optionally sets it as the root, first component will be set as the root automatically
            </summary>
            <param name="actor">The actor to attach the component to</param>
            <param name="name">The name of the component</param>
            <param name="setAsRoot">If <c>true</c>, sets the component as the root</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the component</param>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.IgnoreOwningActor">
            <summary>
            Gets or sets whether to apply the force or impulse to any physics objects that are part of the actor which owns the component
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.ImpulseVelocityChange">
            <summary>
            Gets or sets whether the impulse will ignore the mass of objects and will always result in a fixed velocity change
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.LinearFalloff">
            <summary>
            Gets or sets whether the force or impulse should lose its strength linearly
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.ForceStrength">
            <summary>
            Gets or sets the force strength
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.ImpulseStrength">
            <summary>
            Gets or sets the impulse strength
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.RadialForceComponent.Radius">
            <summary>
            Gets or sets the radius within the force or impulse will be applied
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RadialForceComponent.AddCollisionChannelToAffect(UnrealEngine.Framework.CollisionChannel)">
            <summary>
            Adds a collision channel that will be affected by the radial force
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.RadialForceComponent.FireImpulse">
            <summary>
            Fires a single impulse
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.MaterialInterface">
            <summary>
            The base class of materials that can be applied to meshes
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MaterialInterface.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInterface.Equals(UnrealEngine.Framework.MaterialInterface)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInterface.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.MaterialInterface.IsTwoSided">
            <summary>
            Returns <c>true</c> if the material is two sided
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Material">
            <summary>
            An asset which can be applied to a mesh to control the visual look
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Material.Load(System.String)">
            <summary>
            Finds and loads a material by name
            </summary>
            <returns>A material or <c>null</c> on failure</returns>
        </member>
        <member name="P:UnrealEngine.Framework.Material.IsDefaultMaterial">
            <summary>
            Returns <c>true</c> if the material is one of the default materials
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.MaterialInstance">
            <summary>
            An abstract instance of the material
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstance.IsChildOf(UnrealEngine.Framework.MaterialInterface)">
            <summary>
            Returns <c>true</c> if the material instance is a child of another Material
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstance.GetParent">
            <summary>
            Returns the parent material or <c>null</c> on failure
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.MaterialInstanceDynamic">
            <summary>
            A dynamic instance of the material
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstanceDynamic.ClearParameterValues">
            <summary>
            Removes all parameter values
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstanceDynamic.SetTextureParameterValue(System.String,UnrealEngine.Framework.Texture)">
            <summary>
            Sets the texture parameter value
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstanceDynamic.SetVectorParameterValue(System.String,UnrealEngine.Framework.LinearColor@)">
            <summary>
            Sets the vector parameter value
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.MaterialInstanceDynamic.SetScalarParameterValue(System.String,System.Single)">
            <summary>
            Sets the scalar parameter value
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.LogLevel">
            <summary>
            Defines the log level for an output log message
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.LogLevel.Display">
            <summary>
            Logs are printed to console and log files
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.LogLevel.Warning">
            <summary>
            Logs are printed to console and log files with the yellow color
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.LogLevel.Error">
            <summary>
            Logs are printed to console and log files with the red color
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.LogLevel.Fatal">
            <summary>
            Logs are printed to console and log files then crashes the application even if logging is disabled
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AttachmentTransformRule">
            <summary>
            Defines rules for attaching components
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AttachmentTransformRule.KeepRelativeTransform">
            <summary>
            Keeps current relative transform as the relative transform to the new parent
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AttachmentTransformRule.KeepWorldTransform">
            <summary>
            Automatically calculates the relative transform such that the attached component maintains the same world transform
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AttachmentTransformRule.SnapToTargetIncludingScale">
            <summary>
            Snaps location and rotation to the attach point, calculates the relative scale so that the final world scale of the component remains the same
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AttachmentTransformRule.SnapToTargetNotIncludingScale">
            <summary>
            Snaps the entire transform to target, including scale
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.DetachmentTransformRule">
            <summary>
            Defines rules for detaching components
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.DetachmentTransformRule.KeepRelativeTransform">
            <summary>
            Keeps current relative transform as the relative transform to the previous parent
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.DetachmentTransformRule.KeepWorldTransform">
            <summary>
            Automatically calculates the relative transform such that the detached component maintains the same world transform
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.TeleportType">
            <summary>
            Defines teleportation types of physics body
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.TeleportType.None">
            <summary>
            Don't teleport physics body
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.TeleportType.TeleportPhysics">
            <summary>
            Teleport physics body so that velocity remains the same and no collision occurs
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.TeleportType.ResetPhysics">
            <summary>
            Teleport physics body and reset physics state completely
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.UpdateTransformFlags">
            <summary>
            Defines how to update transform during movement
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.UpdateTransformFlags.None">
            <summary>
            Default update
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.UpdateTransformFlags.SkipPhysicsUpdate">
            <summary>
            Don't update the underlying physics
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.UpdateTransformFlags.PropagateFromParent">
            <summary>
            The update is coming as a result of the parent updating
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.UpdateTransformFlags.OnlyUpdateIfUsingSocket">
            <summary>
            Only update child transform if attached to parent via a socket
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AIFocusPriority">
            <summary>
            Defines focus priority for AI
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AIFocusPriority.Normal">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AIFocusPriority.Low">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AIFocusPriority.High">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AIFocusPriority.VeryHigh">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.ActorEventType">
            <summary>
            Defines actor events
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorBeginOverlap">
            <summary>
            Called when actors start overlapping
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorEndOverlap">
            <summary>
            Called when actors stop overlapping
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorHit">
            <summary>
            Called when actors hit collisions
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorBeginCursorOver">
            <summary>
            Called when the mouse cursor is moved over an actor if mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorEndCursorOver">
            <summary>
            Called when the mouse cursor is moved off an actor if mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorClicked">
            <summary>
            Called when the mouse button is clicked while the mouse is over an actor if click events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ActorEventType.OnActorReleased">
            <summary>
            Called when the mouse button is released while the mouse is over an actor if click events are enabled in the player controller
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentEventType">
            <summary>
            Defines component events
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentBeginOverlap">
            <summary>
            Called when components start overlapping
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentEndOverlap">
            <summary>
            Called when components stop overlapping
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentHit">
            <summary>
            Called when components hit collisions
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentBeginCursorOver">
            <summary>
            Called when the mouse cursor is moved over a component and mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentEndCursorOver">
            <summary>
            Called when the mouse cursor is moved off a component and mouse over events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentClicked">
            <summary>
            Called when the mouse button is clicked while the mouse is over a component if click events are enabled in the player controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentEventType.OnComponentReleased">
            <summary>
            Called when the mouse button is released while the mouse is over a component if click events are enabled in the player controller
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.AnimationMode">
            <summary>
            Defines the animation mode
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AnimationMode.Blueprint">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AnimationMode.Asset">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AnimationMode.Custom">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.AutoReceiveInput">
            <summary>
            Defines the player index that will be used to pass input
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Disabled">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player0">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AutoReceiveInput.Player7">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.CameraProjectionMode">
            <summary>
            Defines the projection mode for a camera
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CameraProjectionMode.Perspective">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CameraProjectionMode.Orthographic">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.CollisionMode">
            <summary>
            Defines the collision mode
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionMode.NoCollision">
            <summary>
            No collision
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionMode.QueryOnly">
            <summary>
            Used for spatial queries (raycasts, sweeps, and overlaps)
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionMode.PhysicsOnly">
            <summary>
            Used for physics simulation (rigid bodies, and constraints)
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionMode.QueryAndPhysics">
            <summary>
            Can be used for both spatial queries and physics simulation
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CollisionShapeType">
            <summary>
            Defines the collision shape type
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionShapeType.Box">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionShapeType.Sphere">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionShapeType.Capsule">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentMobility">
            <summary>
            Defines how often a component is allowed to move
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentMobility.Movable">
            <summary>
            Movable objects can be moved and changed
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentMobility.Static">
            <summary>
            Static objects cannot be moved or changed
            - Allows baked lighting
            - Fastest rendering
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ComponentMobility.Stationary">
            <summary>
            A stationary light will only have its shadowing and bounced lighting from static geometry baked by <a href="https://docs.unrealengine.com/en-US/Engine/Rendering/LightingAndShadows/Lightmass/index.html">Lightmass</a>, all other lighting will be dynamic
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.SplineCoordinateSpace">
            <summary>
            Defines coordinate space
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.SplineCoordinateSpace.Local">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.SplineCoordinateSpace.World">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.SplinePointType">
            <summary>
            Defines the spline point type
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.SplinePointType.Linear">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.SplinePointType.Curve">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.SplinePointType.Constant">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.SplinePointType.CurveClamped">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.SplinePointType.CurveCustomTangent">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.WindowMode">
            <summary>
            Defines the window mode
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.WindowMode.Fullscreen">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.WindowMode.WindowedFullscreen">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.WindowMode.Windowed">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.AudioFadeCurve">
            <summary>
            Defines the type of fade to adjust audio volume
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AudioFadeCurve.Linear">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AudioFadeCurve.Logarithmic">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AudioFadeCurve.SCurve">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.AudioFadeCurve.Sin">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.AutoPossessAI">
            <summary>
            Defines the possession type for AI pawn that will be automatically possed by an AI controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AutoPossessAI.Disabled">
            <summary>
            Disabled and not possesses AI
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AutoPossessAI.PlacedInWorld">
            <summary>
            Only possess by an AI controller if a pawn is placed in the world
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AutoPossessAI.Spawned">
            <summary>
            Only possess by an AI controller if a pawn is spawned after the world has loaded
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.AutoPossessAI.PlacedInWorldOrSpawned">
            <summary>
            Pawn is automatically possessed by an AI controller whenever it's created
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.BlendType">
            <summary>
            Defines how to blend when changing view targets
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.Linear">
            <summary>
            A simple linear interpolation
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.Cubic">
            <summary>
            A slight ease in and ease out, but amount of ease cannot be tweaked
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.EaseIn">
            <summary>
            Immediately accelerates, but smoothly decelerates into the target, ease amount can be controlled
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.EaseOut">
            <summary>
            Smoothly accelerates, but does not decelerate into the target, ease amount can be controlled
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.EaseInOut">
            <summary>
            Smoothly accelerates and decelerates, ease amount can be controlled
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.BlendType.PreBlended">
            <summary>
            The game's camera system has already performed the blending, the engine shouldn't blend at all
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CollisionChannel">
            <summary>
            Defines collision channels
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.WorldStatic">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.WorldDynamic">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.Pawn">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.Visibility">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.Camera">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.PhysicsBody">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.Vehicle">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.Destructible">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.EngineTraceChannel6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel7">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel9">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel11">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel12">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel13">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel14">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel15">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel16">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel17">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionChannel.GameTraceChannel18">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.CollisionResponse">
            <summary>
            Defines collision response types
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionResponse.Ignore">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionResponse.Overlap">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.CollisionResponse.Block">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.ControllerHand">
            <summary>
            Defines the controller hands for tracking
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Left">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Right">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.AnyHand">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Pad">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.ExternalCamera">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Gun">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special7">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special9">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.ControllerHand.Special11">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.HorizontalTextAligment">
            <summary>
            Defines the horizontal text aligment type
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.HorizontalTextAligment.Left">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.HorizontalTextAligment.Center">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.HorizontalTextAligment.Right">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.VerticalTextAligment">
            <summary>
            Defines the vertical text aligment type
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.VerticalTextAligment.Top">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.VerticalTextAligment.Center">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.VerticalTextAligment.Bottom">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.PlaneConstraintAxis">
            <summary>
            Defines behavior when movement is restricted to a 2D plane defined by a specific axis/normal, so that movement along the locked axis will not be possible
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PlaneConstraintAxis.Custom">
            <summary>
            Lock movement to a user-defined axis
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PlaneConstraintAxis.X">
            <summary>
            Lock movement in the X axis
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PlaneConstraintAxis.Y">
            <summary>
            Lock movement in the Y axis
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PlaneConstraintAxis.Z">
            <summary>
            Lock movement in the Z axis
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PlaneConstraintAxis.UseGlobalPhysicsSetting">
            <summary>
            Use the global physics project setting
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.InputEvent">
            <summary>
            Defines input behavior type
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.InputEvent.Pressed">
            <summary>
            Key pressed
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.InputEvent.Released">
            <summary>
            Key released
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.InputEvent.Repeat">
            <summary>
            Key repeating
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.InputEvent.DoubleClick">
            <summary>
            Key double clicked
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.InputEvent.Axis">
            <summary>
            Axis activated
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.NetMode">
            <summary>
            Defines the networking mode
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.NetMode.Standalone">
            <summary>
            A game without networking, with one or more local players
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.NetMode.DedicatedServer">
            <summary>
            A server with no local players
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.NetMode.ListenServer">
            <summary>
            A server that also has a local player who is hosting the game, available to other players on the network
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.NetMode.Client">
            <summary>
            A client connected to a server
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.PixelFormat">
            <summary>
            Defines the pixel format
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.Unknown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A32B32G32R32F">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.B8G8R8A8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G16">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.DXT1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.DXT3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.DXT5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.UYVY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.FloatRGB">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.FloatRGBA">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.DepthStencil">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ShadowDepth">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R32Float">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G16R16">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G16R16F">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G16R16FFilter">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.G32R32F">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A2B10G10R10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A16B16G16R16">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.D24">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16F">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16FFilter">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.BC5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.V8U8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.FloatR11G11B10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R32UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R32SInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.PVRTC2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.PVRTC4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16SInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16G16B16A16UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16G16B16A16SInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R5G6B5UNorm">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8G8B8A8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.A8R8G8B8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.BC4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8G8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ATCRGB">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ATCRGBAE">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ATCRGBAI">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.X24G8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ETC1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ETC2RGB">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ETC2RGBA">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R32G32B32A32UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16G16UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ASTC4x4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ASTC6x6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ASTC8x8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ASTC10x10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ASTC12x12">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.BC6H">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.BC7">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.L8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.XGXR8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8G8B8A8UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8G8B8A8SNorm">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16G16B16A16UNorm">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R16G16B16A16SNorm">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.PLATFORMHDR0">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.PLATFORMHDR1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.PLATFORMHDR2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.NV12">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R32G32UInt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ETC2R11EAC">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.ETC2RG11EAC">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.PixelFormat.R8">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.ObjectReference">
            <summary>
            A representation of the engine's object reference
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.op_Equality(UnrealEngine.Framework.ObjectReference,UnrealEngine.Framework.ObjectReference)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.op_Inequality(UnrealEngine.Framework.ObjectReference,UnrealEngine.Framework.ObjectReference)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ObjectReference.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ObjectReference.ID">
            <summary>
            Returns the unique ID of the object, reused by the engine, only unique while the object is alive
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ObjectReference.Name">
            <summary>
            Returns the name of the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.Equals(UnrealEngine.Framework.ObjectReference)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.ToActor``1">
            <summary>
            Converts the object reference to the actor of the specified class
            </summary>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="M:UnrealEngine.Framework.ObjectReference.ToComponent``1">
            <summary>
            Converts the object reference to the component of the specified class
            </summary>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.ActorReference">
            <summary>
            A representation of the engine's actor reference
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.op_Equality(UnrealEngine.Framework.ActorReference,UnrealEngine.Framework.ActorReference)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.op_Inequality(UnrealEngine.Framework.ActorReference,UnrealEngine.Framework.ActorReference)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorReference.IsSpawned">
            <summary>
            Returns <c>true</c> if the actor is spawned
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorReference.ID">
            <summary>
            Returns the unique ID of the object, reused by the engine, only unique while the object is alive
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ActorReference.Name">
            <summary>
            Returns the name of the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.Equals(UnrealEngine.Framework.ActorReference)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ActorReference.ToActor``1">
            <summary>
            Converts the actor reference to the actor of the specified class
            </summary>
            <returns>An actor or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentReference">
            <summary>
            A representation of the engine's component reference
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.op_Equality(UnrealEngine.Framework.ComponentReference,UnrealEngine.Framework.ComponentReference)">
            <summary>
            Tests for equality between two objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.op_Inequality(UnrealEngine.Framework.ComponentReference,UnrealEngine.Framework.ComponentReference)">
            <summary>
            Tests for inequality between two objects
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ComponentReference.IsCreated">
            <summary>
            Returns <c>true</c> if the object is created
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ComponentReference.ID">
            <summary>
            Returns the unique ID of the object, reused by the engine, only unique while the object is alive
            </summary>
        </member>
        <member name="P:UnrealEngine.Framework.ComponentReference.Name">
            <summary>
            Returns the name of the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.Equals(UnrealEngine.Framework.ComponentReference)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.Equals(System.Object)">
            <summary>
            Indicates equality of objects
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.GetHashCode">
            <summary>
            Returns a hash code for the object
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.ComponentReference.ToComponent``1">
            <summary>
            Converts the component reference to the component of the specified class
            </summary>
            <returns>A component or <c>null</c> on failure</returns>
        </member>
        <member name="T:UnrealEngine.Framework.InputDelegate">
            <summary>
            Delegate for action events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.InputAxisDelegate">
            <summary>
            Delegate for axis events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ConsoleVariableDelegate">
            <summary>
            Delegate for console variable events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ConsoleCommandDelegate">
            <summary>
            Delegate for console command events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ActorOverlapDelegate">
            <summary>
            Delegate for actor overlap events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ActorHitDelegate">
            <summary>
            Delegate for actor hit events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ActorCursorDelegate">
            <summary>
            Delegate for actor cursor events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ActorKeyDelegate">
            <summary>
            Delegate for actor key events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentOverlapDelegate">
            <summary>
            Delegate for component overlap events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentHitDelegate">
            <summary>
            Delegate for component hit events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentCursorDelegate">
            <summary>
            Delegate for component cursor events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.ComponentKeyDelegate">
            <summary>
            Delegate for component key events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.CharacterLandedDelegate">
            <summary>
            Delegate for character landing events
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Maths">
            <summary>
            Provides additional static constants and methods for mathematical functions that are lack in <see cref="T:System.Math"/>, <see cref="T:System.MathF"/>, and <see cref="N:System.Numerics"/>
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Maths.DegToRadF">
            <summary>
            Degrees-to-radians conversion constant
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Maths.RadToDegF">
            <summary>
            Radians-to-degrees conversion constant
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Dot(System.Double,System.Double)">
            <summary>
            Returns the dot product of two float values
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Saturate(System.Double)">
            <summary>
            Clamps value between 0.0d and 1.0d
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Fraction(System.Double)">
            <summary>
            Returns the fractional part of a float value
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.DeltaAngle(System.Double,System.Double)">
            <summary>
            Calculates the shortest difference between the two given angles given in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.PreviousPowerOfTwo(System.Double)">
            <summary>
            Returns the previous power of two
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SmoothStep(System.Double)">
            <summary>
            Performs smooth (Cubic Hermite) interpolation between 0.0d and 1.0d
            </summary>
            <param name="amount">Value between 0.0d and 1.0d indicating interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SmootherStep(System.Double)">
            <summary>
            Performs a smoother interpolation between 0.0d and 1.0d with 1st and 2nd order derivatives of zero at endpoints
            </summary>
            <param name="amount">>Value between 0.0d and 1.0d indicating interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Repeat(System.Double,System.Double)">
            <summary>
            Loops the value so that it is never larger than length and never smaller than 0.0d
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values linearly
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.LerpAngle(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two values linearly, but makes sure the values calculated correctly when they wrap around 360 degrees
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.InverseLerp(System.Double,System.Double,System.Double)">
            <summary>
            Inverse-interpolates between two values linearly
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Damp(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates framerate-independent dampened motion between two values
            </summary>
            <param name="from">Value to damp from</param>
            <param name="to">Value to damp to</param>
            <param name="lambda">Smoothing factor</param>
            <param name="deltaTime">Time since last damp</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowards(System.Double,System.Double,System.Double)">
            <summary>
            Returns the vector moved towards a target
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowardsAngle(System.Double,System.Double,System.Double)">
            <summary>
            Returns the vector moved towards a target, but makes sure the values calculated correctly when they wrap around 360 degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Dot(System.Single,System.Single)">
            <summary>
            Returns the dot product of two float values
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Saturate(System.Single)">
            <summary>
            Clamps value between 0.0f and 1.0f
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Fraction(System.Single)">
            <summary>
            Returns the fractional part of a float value
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.DeltaAngle(System.Single,System.Single)">
            <summary>
            Calculates the shortest difference between the two given angles given in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.PreviousPowerOfTwo(System.Single)">
            <summary>
            Returns the previous power of two
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SmoothStep(System.Single)">
            <summary>
            Performs smooth (Cubic Hermite) interpolation between 0.0f and 1.0f
            </summary>
            <param name="amount">Value between 0.0f and 1.0f indicating interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SmootherStep(System.Single)">
            <summary>
            Performs a smoother interpolation between 0.0f and 1.0f with 1st and 2nd order derivatives of zero at endpoints
            </summary>
            <param name="amount">>Value between 0.0f and 1.0f indicating interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Repeat(System.Single,System.Single)">
            <summary>
            Loops the value so that it is never larger than length and never smaller than 0.0f
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values linearly
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values linearly, but makes sure the values calculated correctly when they wrap around 360 degrees
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Inverse-interpolates between two values linearly
            </summary>
            <param name="from">Value to interpolate from</param>
            <param name="to">Value to interpolate to</param>
            <param name="amount">Interpolation amount</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Damp(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates framerate-independent dampened motion between two values
            </summary>
            <param name="from">Value to damp from</param>
            <param name="to">Value to damp to</param>
            <param name="lambda">Smoothing factor</param>
            <param name="deltaTime">Time since last damp</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Returns the vector moved towards a target
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
            Returns the vector moved towards a target, but makes sure the values calculated correctly when they wrap around 360 degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Magnitude(System.Numerics.Vector2)">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SquareMagnitude(System.Numerics.Vector2)">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Refract(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Returns the refraction vector
            </summary>
            <param name="value">The incident vector</param>
            <param name="normal">The normal vector</param>
            <param name="eta">The refraction index</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Perpendicular(System.Numerics.Vector2)">
            <summary>
            Returns the vector perpendicular to the specified vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Angle(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Returns the unsigned angle in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.ClampMagnitude(System.Numerics.Vector2,System.Single)">
            <summary>
            Returns a copy of vector with clamped magnitude
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Damp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Creates framerate-independent dampened motion between two values
            </summary>
            <param name="from">Value to damp from</param>
            <param name="to">Value to damp to</param>
            <param name="lambda">Smoothing factor</param>
            <param name="deltaTime">Time since last damp</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowards(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Returns the vector moved towards a target
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Magnitude(System.Numerics.Vector3)">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SquareMagnitude(System.Numerics.Vector3)">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Refract(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Returns the refraction vector
            </summary>
            <param name="value">The incident vector</param>
            <param name="normal">The normal vector</param>
            <param name="eta">The refraction index</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Angle(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the unsigned angle in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SignedAngle(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns the signed angle in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.ClampMagnitude(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns a copy of vector with clamped magnitude
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Damp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Creates framerate-independent dampened motion between two values
            </summary>
            <param name="from">Value to damp from</param>
            <param name="to">Value to damp to</param>
            <param name="lambda">Smoothing factor</param>
            <param name="deltaTime">Time since last damp</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.MoveTowards(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Returns the vector moved towards a target
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Project(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Projects a vector onto another vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.ProjectOnPlane(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Projects a vector onto a plane defined by a normal orthogonal to the plane
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Magnitude(System.Numerics.Vector4)">
            <summary>
            Returns the length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.SquareMagnitude(System.Numerics.Vector4)">
            <summary>
            Returns the squared length of the vector
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Refract(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Returns the refraction vector
            </summary>
            <param name="value">The incident vector</param>
            <param name="normal">The normal vector</param>
            <param name="eta">The refraction index</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Euler(System.Single,System.Single,System.Single)">
            <summary>
            Returns a rotation which rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Euler(System.Numerics.Vector3)">
            <summary>
            Returns a rotation which rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Angle(System.Numerics.Quaternion,System.Numerics.Quaternion)">
            <summary>
            Returns the unsigned angle in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.AngleAxis(System.Single,System.Numerics.Vector3)">
            <summary>
            Returns a rotation which rotates angle degrees around axis
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.FromToRotation(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Returns a rotation which rotates from <paramref name="fromDirection"/> to <paramref name="toDirection"/>
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.Damp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single,System.Single)">
            <summary>
            Creates framerate-independent dampened motion between two values
            </summary>
            <param name="from">Value to damp from</param>
            <param name="to">Value to damp to</param>
            <param name="lambda">Smoothing factor</param>
            <param name="deltaTime">Time since last damp</param>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.RotateTowards(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
            <summary>
            Returns a rotation which rotated towards a target
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Maths.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Returns a rotation from the given yaw, pitch, and roll, in radians
            </summary>
        </member>
        <member name="T:UnrealEngine.Framework.Keys">
            <summary>
            Key codes
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.AnyKey">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MouseX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MouseY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MouseScrollUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MouseScrollDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MouseWheelAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftMouseButton">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightMouseButton">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MiddleMouseButton">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ThumbMouseButton">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ThumbMouseButton2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.BackSpace">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Tab">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Enter">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Pause">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.CapsLock">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Escape">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.SpaceBar">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.PageUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.PageDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.End">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Home">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Left">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Up">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Right">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Down">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Insert">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Delete">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Zero">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.One">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Two">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Three">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Four">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Five">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Six">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Seven">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Eight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Nine">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.A">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.B">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.C">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.D">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.E">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.G">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.H">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.I">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.J">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.K">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.L">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.M">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.N">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.O">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.P">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Q">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.R">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.S">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.T">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.U">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.V">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.W">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.X">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Y">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Z">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadZero">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadOne">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadTwo">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadThree">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadFour">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadFive">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadSix">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadSeven">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadEight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumPadNine">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Multiply">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Add">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Subtract">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Decimal">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Divide">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F1">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F2">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F3">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F4">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F5">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F6">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F7">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F8">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F9">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F10">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F11">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.F12">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.NumLock">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ScrollLock">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftShift">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightShift">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftControl">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightControl">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftAlt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightAlt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftCommand">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightCommand">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Semicolon">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Equal">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Comma">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Underscore">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Hyphen">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Period">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Slash">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Tilde">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftBracket">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Backslash">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightBracket">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Apostrophe">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Ampersand">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Asterix">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Caret">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Colon">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Dollar">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Exclamation">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.LeftParantheses">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.RightParantheses">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Quote">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Section">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Invalid">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Platform">
            <summary>
            Platform-specific
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Platform.Delete">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Gamepad">
            <summary>
            Gamepad
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftThumbstick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightThumbstick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftShoulder">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightShoulder">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.LeftTrigger">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.RightTrigger">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.DPadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.DPadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.DPadRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.DPadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.SpecialLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.SpecialLeftX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.SpecialLeftY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.SpecialRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.FaceButtonBottom">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.FaceButtonRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.FaceButtonLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gamepad.FaceButtonTop">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Virtual">
            <summary>
            Virtual key codes used for input axis button press/release emulation
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.LeftStickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.LeftStickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.LeftStickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.LeftStickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.RightStickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.RightStickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.RightStickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.RightStickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.Tilt">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.RotationRate">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.Gravity">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.Acceleration">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.Accept">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Virtual.Back">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Gesture">
            <summary>
            Gestures
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gesture.Pinch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gesture.Flick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Gesture.Rotate">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.PS4">
            <summary>
            PS4
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.PS4.Special">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Steam">
            <summary>
            Steam Controller
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.TouchZero">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.TouchOne">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.TouchTwo">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.TouchThree">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.BackLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Steam.BackRight">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Xbox">
            <summary>
            Xbox
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Xbox.GlobalMenu">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Xbox.GlobalView">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Xbox.GlobalPause">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Xbox.GlobalPlay">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Xbox.GlobalBack">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Android.Back">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Android.VolumeUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Android.VolumeDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Android.Menu">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Daydream">
            <summary>
            Google Daydream
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.LeftSelectClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.LeftTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.LeftTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.LeftTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.LeftTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.RightSelectClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.RightTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.RightTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.RightTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Daydream.RightTrackpadTouch">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.Vive">
            <summary>
            HTC Vive
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftMenuClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.LeftTrackpadRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightMenuClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.Vive.RightTrackpadRight">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.MixedReality">
            <summary>
            Microsoft Mixed Reality
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftMenuClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftThumbstickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.LeftTrackpadRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightMenuClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightThumbstickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.MixedReality.RightTrackpadRight">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.OculusGo">
            <summary>
            Oculus Go
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftBackClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.LeftTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightBackClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusGo.RightTrackpadTouch">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.OculusTouch">
            <summary>
            Oculus Touch
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftXClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftYClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftXTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftYTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftMenuClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftGripAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftTriggerTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.LeftThumbstickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightAClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightBClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightATouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightBTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightGripAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightTriggerTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.OculusTouch.RightThumbstickRight">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Keys.ValveIndex">
            <summary>
            Valve Index
            </summary>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftAClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftBClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftATouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftBTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftSystemTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftGripAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftGripForce">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTriggerTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftThumbstickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadForce">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.LeftTrackpadRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightAClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightBClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightATouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightBTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightSystemClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightSystemTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightGripClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightGripAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightGripForce">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTriggerClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTriggerAxis">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTriggerTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightThumbstickRight">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadX">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadY">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadClick">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadForce">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadTouch">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadUp">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadDown">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadLeft">
            <summary/>
        </member>
        <member name="F:UnrealEngine.Framework.Keys.ValveIndex.RightTrackpadRight">
            <summary/>
        </member>
        <member name="T:UnrealEngine.Framework.Camera">
            <summary>
            A camera viewpoint that can be placed in a level
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Camera.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
        <member name="T:UnrealEngine.Framework.Brush">
            <summary>
            The base class of brushes for level construction
            </summary>
        </member>
        <member name="M:UnrealEngine.Framework.Brush.#ctor(System.String,UnrealEngine.Framework.Blueprint)">
            <summary>
            Spawns the actor in the world
            </summary>
            <param name="name">The name of the actor</param>
            <param name="blueprint">The blueprint class to use as a base class, should be equal to the exact type of the actor</param>
        </member>
    </members>
</doc>
