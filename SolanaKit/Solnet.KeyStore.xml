<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solnet.KeyStore</name>
    </assembly>
    <members>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.BulkCopy(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source pointer to a destination pointer.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.BulkXor(System.Void*,System.Void*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source pointer to a destination pointer.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.Encode32(System.Byte*,System.UInt32)">
            <summary>
            Encode an integer to byte array on any alignment in little endian format.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.Decode32(System.Byte*)">
            <summary>
            Decode an integer from byte array on any alignment in little endian format.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.Salsa208(System.UInt32*)">
            <summary>
            Apply the salsa20/8 core to the provided block.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.R(System.UInt32,System.Int32)">
            <summary>
            Utility method for Salsa208.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.BlockMix(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>
            Compute Bout = BlockMix_{salsa20/8, r}(Bin).  The input Bin must be 128r
            bytes in length; the output Bout must also be the same size.
            The temporary space X must be 64 bytes.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.Integerify(System.UInt32*,System.Int32)">
            <summary>
            Return the result of parsing B_{2r-1} as a little-endian integer.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Crypto.Scrypt.SMix(System.Byte*,System.Int32,System.Int32,System.UInt32*,System.UInt32*)">
            <summary>
            Compute B = SMix_r(B, N).  The input B must be 128r bytes in length;
            the temporary storage V must be 128rN bytes in length; the temporary
            storage XY must be 256r + 64 bytes in length.  The value N must be a
            power of 2 greater than 1.  The arrays B, V, and XY must be aligned to a
            multiple of 64 bytes.
            </summary>
        </member>
        <member name="T:Solnet.KeyStore.KeyStoreKdfChecker">
            <summary>
            Implements a checker for the <see cref="T:Solnet.KeyStore.Model.KeyStore`1"/>'s <see cref="T:Solnet.KeyStore.Model.KdfType"/>.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.KeyStoreKdfChecker.GetKdfTypeFromJson(System.Text.Json.JsonDocument)">
            <summary>
            Get the kdf type string from the json document.
            </summary>
            <param name="keyStoreDocument">The json document.</param>
            <returns>The kdf type string.</returns>
            <exception cref="T:System.Text.Json.JsonException">Throws exception when json property <c>crypto</c> or <c>kdf</c> couldn't be found</exception>
        </member>
        <member name="M:Solnet.KeyStore.KeyStoreKdfChecker.GetKeyStoreKdfType(System.String)">
            <summary>
            Gets the kdf type from the json keystore.
            </summary>
            <param name="json">The json keystore.</param>
            <returns>The kdf type.</returns>
            <exception cref="T:System.ArgumentNullException">Throws exception when <c>json</c> param is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Throws exception when file could not be processed to <see cref="T:System.Text.Json.JsonDocument"/>.</exception>
            <exception cref="T:System.Text.Json.JsonException">Throws exception when <c>kdf</c> json property is <c>null</c>.</exception>
            <exception cref="T:Solnet.KeyStore.Exceptions.InvalidKdfException">Throws exception when the <c>kdf</c> json property has an invalid <see cref="T:Solnet.KeyStore.Model.KdfType"/> value.</exception>
        </member>
        <member name="T:Solnet.KeyStore.SecretKeyStoreService">
            <summary>
            Implements a keystore compatible with the web3 secret storage standard.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.DecryptKeyStore(System.String,Solnet.KeyStore.Model.KeyStore{`0})">
            <summary>
            Decrypt the keystore.
            </summary>
            <param name="password"></param>
            <param name="keyStore"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.DeserializeKeyStoreFromJson(System.String)">
            <summary>
            Deserialize keystore from json.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.EncryptAndGenerateKeyStore(System.String,System.Byte[],System.String)">
            <summary>
            Encrypt and generate the keystore.
            </summary>
            <param name="password"></param>
            <param name="privateKey"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.EncryptAndGenerateKeyStoreAsJson(System.String,System.Byte[],System.String)">
            <summary>
            Encrypt and generate the keystore as json.
            </summary>
            <param name="password"></param>
            <param name="privateKey"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.GetCipherType">
            <summary>
            Get keystore cipher type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solnet.KeyStore.Services.ISecretKeyStoreService`1.GetKdfType">
            <summary>
            Get keystore key derivation function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.KeyStore.SolanaKeyStoreService">
            <summary>
            Implements a keystore compatible with the solana-keygen made in rust.
            </summary>
        </member>
        <member name="M:Solnet.KeyStore.SolanaKeyStoreService.RestoreKeystore(System.String,System.String)">
            <summary>
            Restores a keypair from a keystore compatible with the solana-keygen made in rust.
            </summary>
            <param name="privateKey">The string with the private key bytes.</param>
            <param name="passphrase">The passphrase used while originally generating the keys.</param>
        </member>
        <member name="M:Solnet.KeyStore.SolanaKeyStoreService.RestoreKeystoreFromFile(System.String,System.String)">
            <summary>
            Restores a keypair from a keystore compatible with the solana-keygen made in rust.
            </summary>
            <param name="path">The path to the keystore.</param>
            <param name="passphrase">The passphrase used while originally generating the keys.</param>
        </member>
        <member name="M:Solnet.KeyStore.SolanaKeyStoreService.SaveKeystore(System.String,Solnet.Wallet.Wallet)">
            <summary>
            Saves a keypair to a keystore compatible with the solana-keygen made in rust.
            </summary>
            <param name="path">The path to the keystore</param>
            <param name="wallet">The wallet to save to the keystore.</param>
        </member>
        <member name="M:Solnet.KeyStore.SolanaKeyStoreService.InitializeWallet(System.Byte[],System.String)">
            <summary>
            Initialize the wallet.
            </summary>
            <param name="seed">The seed.</param>
            <param name="passphrase">The passphrase.</param>
            <returns>The wallet.</returns>
        </member>
        <member name="M:Solnet.KeyStore.Utils.HexToByteArrayInternal(System.String)">
            <summary>
            Performs the hex to byte array conversion.
            </summary>
            <param name="value">The string to convert to byte array.</param>
            <returns>The corresponding byte array.</returns>
        </member>
        <member name="M:Solnet.KeyStore.Utils.HexToByteArray(System.String)">
            <summary>
            Convert the passed string to a byte array.
            </summary>
            <param name="value">The string to convert</param>
            <returns>The equivalent byte array.</returns>
            <exception cref="T:System.FormatException">Throws format exception when the string could not be converted.</exception>
        </member>
        <member name="M:Solnet.KeyStore.Utils.ToHex(System.Byte[])">
            <summary>
            Convert a byte array into a hexadecimal string.
            </summary>
            <param name="value">The byte array to convert.</param>
            <returns>The string as hex.</returns>
        </member>
        <member name="M:Solnet.KeyStore.Utils.ToStringByteArray(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Formats a byte array into a string in order to be compatible with the original solana-keygen made in rust.
            </summary>
            <param name="bytes">The byte array to be formatted.</param>
            <returns>A formatted string.</returns>
        </member>
        <member name="M:Solnet.KeyStore.Utils.FromStringByteArray(System.String)">
            <summary>
            Formats a string into a byte array in order to be compatible with the original solana-keygen made in rust.
            </summary>
            <param name="data">The string to be formatted.</param>
            <returns>A formatted byte array.</returns>
        </member>
    </members>
</doc>
