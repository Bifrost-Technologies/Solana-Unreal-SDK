<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solnet.Programs</name>
    </assembly>
    <members>
        <member name="T:Solnet.Programs.Abstract.BaseClient">
            <summary>
            Implements the base client
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.BaseClient.ProgramIdKey">
            <summary>
            The program address.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.BaseClient.RpcClient">
            <summary>
            The RPC client.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.BaseClient.StreamingRpcClient">
            <summary>
            The streaming RPC client.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.#ctor(Solnet.Rpc.IRpcClient,Solnet.Rpc.IStreamingRpcClient,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize the base client with the given RPC clients.
            </summary>
            <param name="rpcClient">The RPC client instance.</param>
            <param name="streamingRpcClient">The streaming RPC client instance.</param>
            <param name="programId">The program ID.</param>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.DeserializeAccount``1(System.Byte[])">
            <summary>
            Deserializes the given byte array into the specified type.
            </summary>
            <param name="data">The data to deserialize into the specified type.</param>
            <typeparam name="T">The type.</typeparam>
            <returns>An instance of the specified type or null in case it was unable to deserialize.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.GetProgramAccounts``1(System.String,System.Collections.Generic.List{Solnet.Rpc.Models.MemCmp},System.Nullable{System.Int32},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for the given account address and attempts to deserialize the account data into the specified type.
            </summary>
            <param name="programAddress">The program account address.</param>
            <param name="commitment">The commitment parameter for the RPC request.</param>
            <param name="filters">The filters to apply.</param>
            <param name="dataSize">The expected account data size.</param>
            <typeparam name="T">The specified type.</typeparam>
            <returns>A <see cref="T:Solnet.Programs.Models.ResultWrapper`2"/> containing the RPC response and the deserialized account if successful.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.GetMultipleAccounts``1(System.Collections.Generic.List{System.String},Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for the given account address and attempts to deserialize the account data into the specified type.
            </summary>
            <param name="accountAddresses">The list of account addresses to fetch.</param>
            <param name="commitment">The commitment parameter for the RPC request.</param>
            <typeparam name="T">The specified type.</typeparam>
            <returns>A <see cref="T:Solnet.Programs.Models.ResultWrapper`2"/> containing the RPC response and the deserialized account if successful.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.GetAccount``1(System.String,Solnet.Rpc.Types.Commitment)">
            <summary>
            Gets the account info for the given account address and attempts to deserialize the account data into the specified type.
            </summary>
            <param name="accountAddress">The account address.</param>
            <param name="commitment">The commitment parameter for the RPC request.</param>
            <typeparam name="T">The specified type.</typeparam>
            <returns>A <see cref="T:Solnet.Programs.Models.ResultWrapper`2"/> containing the RPC response and the deserialized account if successful.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.SubscribeAccount``1(System.String,System.Action{Solnet.Rpc.Core.Sockets.SubscriptionState,Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo},``0},Solnet.Rpc.Types.Commitment)">
            <summary>
            Subscribes to notifications on changes to the given account and deserializes the account data into the specified type.
            </summary>
            <param name="accountAddress">The account address.</param>
            <param name="commitment">The commitment parameter for the RPC request.</param>
            <param name="callback">An action that is called when a notification is received</param>
            <typeparam name="T">The specified type.</typeparam>
            <returns>The subscription state.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseClient.ConfirmTransaction(System.String,System.UInt64,Solnet.Rpc.Types.Commitment)">
            <summary>
            Confirms a transaction - same method as web3.js.
            </summary>
            <param name="hash">The hash of the transaction.</param>
            <param name="validBlockHeight">The last valid block height of the blockhash used in the transaction.</param>
            <param name="commitment">The state commitment to consider when querying the ledger state.</param>
            <returns>Returns null if the transaction wasn't confirmed, otherwise returns the confirmation slot and possible transaction error.</returns>
        </member>
        <member name="T:Solnet.Programs.Abstract.BaseProgram">
            <summary>
            A class to abstract some of the core program commonality
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.BaseProgram.ProgramIdKey">
            <summary>
            The public key of the program.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.BaseProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.BaseProgram.#ctor(Solnet.Wallet.PublicKey,System.String)">
            <summary>
            Creates an instance of the base program class with specified id and name
            </summary>
            <param name="programIdKey">The program key</param>
            <param name="programName">The program name</param>
        </member>
        <member name="T:Solnet.Programs.Abstract.ByteFlag">
            <summary>
            Represents a flag using a byte for masking.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit0">
            <summary>
            Check if the 1st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit1">
            <summary>
            Check if the 2nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit2">
            <summary>
            Check if the 3rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit3">
            <summary>
            Check if the 4th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit4">
            <summary>
            Check if the 5th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit5">
            <summary>
            Check if the 6th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit6">
            <summary>
            Check if the 7th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ByteFlag.Bit7">
            <summary>
            Check if the 8th bit is set.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.ByteFlag.#ctor(System.Byte)">
            <summary>
            Initialize the flags with the given byte.
            </summary>
            <param name="mask">The byte to use.</param>
        </member>
        <member name="T:Solnet.Programs.Abstract.Flag`1">
            <summary>
            Represents bitmask flags for various types of accounts within Solana Programs.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.Flag`1.Value">
            <summary>
            The mask for the account flags.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.Flag`1.#ctor(`0)">
            <summary>
            Initialize the flags with the given mask.
            </summary>
            <param name="mask">The mask to use.</param>
        </member>
        <member name="M:Solnet.Programs.Abstract.Flag`1.IsKthBitSet(System.UInt64,System.Int32)">
            <summary>
            Checks whether the Kth bit for a given number N is set.
            </summary>
            <param name="n">The number to check against.</param>
            <param name="k">The bit to check.</param>
            <returns>true if it is, otherwise false.</returns>
        </member>
        <member name="T:Solnet.Programs.Abstract.IntFlag">
            <summary>
            Represents a flag using a long for masking.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit0">
            <summary>
            Check if the 1st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit1">
            <summary>
            Check if the 2nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit2">
            <summary>
            Check if the 3rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit3">
            <summary>
            Check if the 4th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit4">
            <summary>
            Check if the 5th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit5">
            <summary>
            Check if the 6th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit6">
            <summary>
            Check if the 7th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit7">
            <summary>
            Check if the 8th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit8">
            <summary>
            Check if the 9th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit9">
            <summary>
            Check if the 10th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit10">
            <summary>
            Check if the 11th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit11">
            <summary>
            Check if the 12th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit12">
            <summary>
            Check if the 13th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit13">
            <summary>
            Check if the 14th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit14">
            <summary>
            Check if the 15th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit15">
            <summary>
            Check if the 16th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit16">
            <summary>
            Check if the 17th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit17">
            <summary>
            Check if the 18th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit18">
            <summary>
            Check if the 19th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit19">
            <summary>
            Check if the 20th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit20">
            <summary>
            Check if the 21st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit21">
            <summary>
            Check if the 22nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit22">
            <summary>
            Check if the 23rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit23">
            <summary>
            Check if the 24th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit24">
            <summary>
            Check if the 25th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit25">
            <summary>
            Check if the 26th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit26">
            <summary>
            Check if the 27th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit27">
            <summary>
            Check if the 28th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit28">
            <summary>
            Check if the 29th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit29">
            <summary>
            Check if the 30th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit30">
            <summary>
            Check if the 31st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.IntFlag.Bit31">
            <summary>
            Check if the 32nd bit is set.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.IntFlag.#ctor(System.UInt32)">
            <summary>
            Initialize the flags with the given uint.
            </summary>
            <param name="mask">The uint to use.</param>
        </member>
        <member name="T:Solnet.Programs.Abstract.LongFlag">
            <summary>
            Represents a flag using a long for masking.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit0">
            <summary>
            Check if the 1st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit1">
            <summary>
            Check if the 2nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit2">
            <summary>
            Check if the 3rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit3">
            <summary>
            Check if the 4th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit4">
            <summary>
            Check if the 5th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit5">
            <summary>
            Check if the 6th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit6">
            <summary>
            Check if the 7th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit7">
            <summary>
            Check if the 8th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit8">
            <summary>
            Check if the 9th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit9">
            <summary>
            Check if the 10th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit10">
            <summary>
            Check if the 11th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit11">
            <summary>
            Check if the 12th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit12">
            <summary>
            Check if the 13th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit13">
            <summary>
            Check if the 14th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit14">
            <summary>
            Check if the 15th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit15">
            <summary>
            Check if the 16th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit16">
            <summary>
            Check if the 17th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit17">
            <summary>
            Check if the 18th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit18">
            <summary>
            Check if the 19th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit19">
            <summary>
            Check if the 20th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit20">
            <summary>
            Check if the 21st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit21">
            <summary>
            Check if the 22nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit22">
            <summary>
            Check if the 23rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit23">
            <summary>
            Check if the 24th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit24">
            <summary>
            Check if the 25th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit25">
            <summary>
            Check if the 26th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit26">
            <summary>
            Check if the 27th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit27">
            <summary>
            Check if the 28th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit28">
            <summary>
            Check if the 29th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit29">
            <summary>
            Check if the 30th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit30">
            <summary>
            Check if the 31st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit31">
            <summary>
            Check if the 32nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit32">
            <summary>
            Check if the 33rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit33">
            <summary>
            Check if the 34th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit34">
            <summary>
            Check if the 35th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit35">
            <summary>
            Check if the 36th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit36">
            <summary>
            Check if the 37th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit37">
            <summary>
            Check if the 38th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit38">
            <summary>
            Check if the 39th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit39">
            <summary>
            Check if the 40th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit40">
            <summary>
            Check if the 41st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit41">
            <summary>
            Check if the 42nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit42">
            <summary>
            Check if the 43rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit43">
            <summary>
            Check if the 44th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit44">
            <summary>
            Check if the 45th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit45">
            <summary>
            Check if the 46th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit46">
            <summary>
            Check if the 47th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit47">
            <summary>
            Check if the 48th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit48">
            <summary>
            Check if the 49th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit49">
            <summary>
            Check if the 50th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit50">
            <summary>
            Check if the 51st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit51">
            <summary>
            Check if the 52nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit52">
            <summary>
            Check if the 53rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit53">
            <summary>
            Check if the 54th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit54">
            <summary>
            Check if the 55th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit55">
            <summary>
            Check if the 56th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit56">
            <summary>
            Check if the57th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit57">
            <summary>
            Check if the 58th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit58">
            <summary>
            Check if the 59th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit59">
            <summary>
            Check if the 60th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit60">
            <summary>
            Check if the 61st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit61">
            <summary>
            Check if the 62nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit62">
            <summary>
            Check if the 63rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.LongFlag.Bit63">
            <summary>
            Check if the 64th bit is set.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.LongFlag.#ctor(System.UInt64)">
            <summary>
            Initialize the flags with the given ulong.
            </summary>
            <param name="mask">The ulong to use.</param>
        </member>
        <member name="T:Solnet.Programs.Abstract.Program">
            <summary>
            Base Program interface.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.Program.ProgramIdKey">
            <summary>
            The program's key
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.Program.ProgramName">
            <summary>
            The name of the program
            </summary>
        </member>
        <member name="T:Solnet.Programs.Abstract.ShortFlag">
            <summary>
            Represents a flag using a short for masking.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit0">
            <summary>
            Check if the 1st bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit1">
            <summary>
            Check if the 2nd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit2">
            <summary>
            Check if the 3rd bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit3">
            <summary>
            Check if the 4th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit4">
            <summary>
            Check if the 5th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit5">
            <summary>
            Check if the 6th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit6">
            <summary>
            Check if the 7th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit7">
            <summary>
            Check if the 8th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit8">
            <summary>
            Check if the 9th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit9">
            <summary>
            Check if the 10th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit10">
            <summary>
            Check if the 11th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit11">
            <summary>
            Check if the 12th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit12">
            <summary>
            Check if the 13th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit13">
            <summary>
            Check if the 14th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit14">
            <summary>
            Check if the 15th bit is set.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ShortFlag.Bit15">
            <summary>
            Check if the 16th bit is set.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.ShortFlag.#ctor(System.UInt16)">
            <summary>
            Initialize the flags with the given ushort.
            </summary>
            <param name="mask">The ushort to use.</param>
        </member>
        <member name="T:Solnet.Programs.Abstract.TransactionalBaseClient`1">
            <summary>
            Transactional base client. Extends Base client and adds functionality related to transactions and error retrieval.
            </summary>
            <typeparam name="TEnum">The error enum type. 
            The enum values need to match the program error codes and be correctly mapped in BuildErrorsDictionary abstract method. </typeparam>
        </member>
        <member name="P:Solnet.Programs.Abstract.TransactionalBaseClient`1.ProgramErrors">
            <summary>
            Mapping from error codes to error values (code, message and enum).
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.TransactionalBaseClient`1.BuildErrorsDictionary">
            <summary>
            Function that builds a mapping between error codes and error values.
            This is used to populate the ProgramErrors dictionary that powers the GetProgramError methods.
            </summary>
            <returns>The dictionary with the possible errors.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.TransactionalBaseClient`1.#ctor(Solnet.Rpc.IRpcClient,Solnet.Rpc.IStreamingRpcClient,Solnet.Wallet.PublicKey)">
            <summary>
            
            </summary>
            <param name="rpcClient"></param>
            <param name="streamingRpcClient"></param>
            <param name="programId">The program ID.</param>
        </member>
        <member name="M:Solnet.Programs.Abstract.TransactionalBaseClient`1.SignAndSendTransaction(Solnet.Rpc.Models.TransactionInstruction,Solnet.Wallet.PublicKey,System.Func{System.Byte[],Solnet.Wallet.PublicKey,System.Byte[]},Solnet.Rpc.Types.Commitment)">
            <summary>
            Signs and sends a given <c>TransactionInstruction</c> using signing delegate.
            </summary>
            <param name="instruction">The transaction to be sent.</param>
            <param name="feePayer">The fee payer.</param>
            <param name="signingCallback">The callback used to sign the transaction. 
            This delegate is called once for each <c>PublicKey</c> account that needs write permissions according to the transaction data.</param>
            <param name="commitment">The commitment parameter for the RPC request.</param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.TransactionalBaseClient`1.GetProgramError(Solnet.Rpc.Models.SimulationLogs)">
            <summary>
            Try to retrieve a custom program error from a transaction or simulation result.
            </summary>
            <param name="logs">The transaction error or simulation result.</param>
            <returns>The possible program error, if it was caused by this program.</returns>
        </member>
        <member name="M:Solnet.Programs.Abstract.TransactionalBaseClient`1.GetProgramError(Solnet.Rpc.Models.TransactionError)">
            <summary>
            Try to retrieve a custom program error from a transaction or simulation result.
            </summary>
            <param name="error">The transaction error or simulation result.</param>
            <returns>The possible program error, if it was caused by this program.</returns>
        </member>
        <member name="T:Solnet.Programs.Abstract.ProgramError`1">
            <summary>
            Represents a program error and the respective message.
            </summary>
            <typeparam name="T">The underlying enum type. Enum values need to match program error codes.</typeparam>
        </member>
        <member name="P:Solnet.Programs.Abstract.ProgramError`1.ErrorKind">
            <summary>
            The error kinda according to the enum.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ProgramError`1.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Abstract.ProgramError`1.ErrorCode">
            <summary>
            The error code, according to the enum and program definition.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Abstract.ProgramError`1.#ctor(`0,System.String)">
            <summary>
            Default constructor that populates all values.
            </summary>
            <param name="value">The corresponding error value.</param>
            <param name="message">The error message that matches the error value.</param>
        </member>
        <member name="T:Solnet.Programs.AssociatedTokenAccountProgram">
            <summary>
            Implements the Associated Token Account Program methods.
            <remarks>
            For more information see: https://spl.solana.com/associated-token-account
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.AssociatedTokenAccountProgram.ProgramIdKey">
            <summary>
            The address of the Shared Memory Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AssociatedTokenAccountProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AssociatedTokenAccountProgram.InstructionName">
            <summary>
            The instruction's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.AssociatedTokenAccountProgram.CreateAssociatedTokenAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction which interacts with the Associated Token Account Program to create
            a new associated token account.
            </summary>
            <param name="payer">The public key of the account used to fund the associated token account.</param>
            <param name="owner">The public key of the owner account for the new associated token account.</param>
            <param name="mint">The public key of the mint for the new associated token account.</param>
            <returns>The transaction instruction, returns null whenever an associated token address could not be derived..</returns>
        </member>
        <member name="M:Solnet.Programs.AssociatedTokenAccountProgram.DeriveAssociatedTokenAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Derive the public key of the associated token account for the
            </summary>
            <param name="owner">The public key of the owner account for the new associated token account.</param>
            <param name="mint">The public key of the mint for the new associated token account.</param>
            <returns>The public key of the associated token account if it could be found, otherwise null.</returns>
        </member>
        <member name="M:Solnet.Programs.AssociatedTokenAccountProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the Associated Token Account Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.AuthorityType">
            <summary>
            Represents the types of authorities for <see cref="M:Solnet.Programs.TokenProgram.SetAuthority(Solnet.Wallet.PublicKey,Solnet.Programs.AuthorityType,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})"/> instructions.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AuthorityType.MintTokens">
            <summary>
            Authority to mint new tokens.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AuthorityType.FreezeAccount">
            <summary>
            Authority to freeze any account associated with the mint.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AuthorityType.AccountOwner">
            <summary>
            Owner of a given account token.
            </summary>
        </member>
        <member name="F:Solnet.Programs.AuthorityType.CloseAccount">
            <summary>
            Authority to close a given account.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Clients.NameServiceClient">
            <summary>
            A client for the Spl Name Service. 
            Enables easy lookup into names and addresses.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Clients.NameServiceClient.TokenTLD">
            <summary>
            The top level domain for the token registry.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Clients.NameServiceClient.TwitterTLD">
            <summary>
            The top level domain for the twitter registry.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Clients.NameServiceClient.ReverseTwitterNameClass">
            <summary>
            Class for the reverse twitter name derivation and lookup.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Clients.NameServiceClient.SolTLD">
            <summary>
            The top level domain for the .sol domain name registry.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Clients.NameServiceClient.ReverseSolNameClass">
            <summary>
            Class for the reverse Sol name derivation and lookup.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.#ctor(Solnet.Rpc.IRpcClient)">
            <summary>
            Default constructor.
            </summary>
            <param name="rpcClient">The rpc client to connect to the network.</param>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetAllNamesByOwnerAsync(System.String)">
            <summary>
            Gets all records owned by a given account.
            </summary>
            <param name="address">The owner address.</param>
            <returns>A list containing all records.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetAccountAndSetMetadata``1(Solnet.Wallet.PublicKey,System.String)">
            <summary>
            Helper method that calls <c>GetAccount&lt;<typeparamref name="T"/>&gt;()</c> and sets common params on result object.
            </summary>
            <typeparam name="T">The type to Serialize to.</typeparam>
            <param name="accountAddress">The account to retrieve.</param>
            <param name="lookupValue">The lokup helper value to store in the returning object.</param>
            <returns>Returns the parsed account object according to the given type parameter <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetTokenInfoFromMintAsync(System.String)">
            <summary>
            Gets the token info for a given token mint.
            </summary>
            <param name="address">The token mint address.</param>
            <returns>The token info record.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetMintFromTokenTickerAsync(System.String)">
            <summary>
            Gets the token mint from a given token ticker.
            </summary>
            <param name="tokenTicker">The ticker for the token.</param>
            <returns>The record containing the token mint address.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetAddressFromTwitterHandleAsync(System.String)">
            <summary>
            Gets the name record from a given twitter handle.
            </summary>
            <param name="twitterHandle">The twitter handle.</param>
            <returns>The name record.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetTwitterHandleFromAddressAsync(System.String)">
            <summary>
            Get the reverse twitter record from a given address.
            </summary>
            <param name="address">The address.</param>
            <returns>The reverse record containing the twitter handle.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetAddressFromNameAsync(System.String)">
            <summary>
            Gets the address record from a given .sol name.
            </summary>
            <param name="name">The name (either with <c>".sol"</c> or without).</param>
            <returns>The address record from the given name.</returns>
        </member>
        <member name="M:Solnet.Programs.Clients.NameServiceClient.GetNamesFromAddressAsync(System.String)">
            <summary>
            Get name records owned by a given address.
            </summary>
            <param name="address">The owner address.</param>
            <returns>A collection of name records owned by the address.</returns>
        </member>
        <member name="T:Solnet.Programs.ComputeBudgetProgram">
            <summary>
            Implements the ComputeBudget Program methods.
            <remarks>
            For more information see: https://spl.solana.com/memo
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.ComputeBudgetProgram.ProgramIdKey">
            <summary>
            The public key of the ComputeBudget Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.ComputeBudgetProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.ComputeBudgetProgram.RequestHeapFrame(System.UInt32)">
            <summary>
            Request HeapFrame Instruction related to Priority Fees
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Programs.ComputeBudgetProgram.SetComputeUnitLimit(System.UInt32)">
            <summary>
            Set Compute Unit Limit Instruction for Priority Fees
            </summary>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Programs.ComputeBudgetProgram.SetComputeUnitPrice(System.UInt64)">
            <summary>
            Set Compute Unit Price Instruction for Priority Fees
            </summary>
            <param name="priority_rate"></param>
            <returns></returns>
        </member>
        <member name="T:Solnet.Programs.InstructionDecoder">
            <summary>
            Implements instruction decoder functionality.
            </summary>
        </member>
        <member name="F:Solnet.Programs.InstructionDecoder.InstructionDictionary">
            <summary>
            The dictionary which maps the program public keys to their decoding method.
            </summary>
        </member>
        <member name="T:Solnet.Programs.InstructionDecoder.DecodeMethodType">
            <summary>
            The method type which is used to perform instruction decoding.
            </summary>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.#cctor">
            <summary>
            Initialize the instruction decoder instance.
            </summary>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.Register(Solnet.Wallet.PublicKey,Solnet.Programs.InstructionDecoder.DecodeMethodType)">
            <summary>
            Register the public key of a program and it's method used for instruction decoding.
            </summary>
            <param name="programKey">The public key of the program to decode data from.</param>
            <param name="decodingMethod">The method which is called to perform instruction decoding for the program.</param>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.Decode(Solnet.Wallet.PublicKey,System.ReadOnlySpan{System.Byte},System.Collections.Generic.List{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the given instruction data for a given program key 
            </summary>
            <param name="programKey">The public key of the program to decode data from.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>The decoded instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.DecodeInstructions(Solnet.Rpc.Models.TransactionMetaInfo)">
            <summary>
            Decodes the instructions present in the given transaction and it's metadata information.
            </summary>
            <param name="txMetaInfo">The transaction metadata info object.</param>
            <returns>The decoded instructions data.</returns>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.DecodeInstructions(Solnet.Rpc.Models.Message)">
            <summary>
            Decodes the instructions present in the given transaction and its metadata information.
            </summary>
            <param name="message">The message object.</param>
            <returns>The decoded instructions data.</returns>
        </member>
        <member name="M:Solnet.Programs.InstructionDecoder.AddUnknownInstruction(Solnet.Rpc.Models.InstructionInfo,System.String,System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Adds an unknown instruction to the given list of decoded instructions, with the given instruction info.
            </summary>
        </member>
        <member name="T:Solnet.Programs.MemoProgram">
            <summary>
            Implements the Memo Program methods.
            <remarks>
            For more information see: https://spl.solana.com/memo
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.MemoProgram.ProgramIdKey">
            <summary>
            The public key of the Memo Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.MemoProgram.ProgramIdKeyV2">
            <summary>
            The public key of the Memo Program V2.
            </summary>
        </member>
        <member name="F:Solnet.Programs.MemoProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="F:Solnet.Programs.MemoProgram.InstructionName">
            <summary>
            The instruction's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.MemoProgram.NewMemo(Solnet.Wallet.PublicKey,System.String)">
            <summary>
            Initialize a new transaction instruction which interacts with the Memo Program.
            </summary>
            <param name="account">The public key of the account associated with the memo.</param>
            <param name="memo">The memo to be included in the transaction.</param>
            <returns>The <see cref="T:Solnet.Rpc.Models.TransactionInstruction"/> which includes the memo data.</returns>
        </member>
        <member name="M:Solnet.Programs.MemoProgram.NewMemoV2(System.String,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the Memo Program.
            </summary>
            <param name="account">The public key of the account associated with the memo.</param>
            <param name="memo">The memo to be included in the transaction.</param>
            <returns>The <see cref="T:Solnet.Rpc.Models.TransactionInstruction"/> which includes the memo data.</returns>
        </member>
        <member name="M:Solnet.Programs.MemoProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the Memo Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.DecodedInstruction">
            <summary>
            Represents a decoded instruction.
            </summary>
        </member>
        <member name="P:Solnet.Programs.DecodedInstruction.PublicKey">
            <summary>
            The public key of the program.
            </summary>
        </member>
        <member name="P:Solnet.Programs.DecodedInstruction.ProgramName">
            <summary>
            The program name.
            </summary>
        </member>
        <member name="P:Solnet.Programs.DecodedInstruction.InstructionName">
            <summary>
            The instruction name.
            </summary>
        </member>
        <member name="P:Solnet.Programs.DecodedInstruction.Values">
            <summary>
            Values decoded from the instruction.
            </summary>
        </member>
        <member name="P:Solnet.Programs.DecodedInstruction.InnerInstructions">
            <summary>
            The inner instructions related to this decoded instruction.
            </summary>
        </member>
        <member name="M:Solnet.Programs.DecodedInstruction.ToString">
            <summary>
            Converts the decoded instructions to a string
            </summary>
            <returns>A string representation of the decoded instructions</returns>
        </member>
        <member name="M:Solnet.Programs.DecodedInstruction.ToString(System.Int32)">
            <summary>
            Converts the decoded instructions to a string, indented a certain amount
            </summary>
            <returns>A string representation of the decoded instructions, indented a certain amount</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.NameRecord">
            <summary>
            Represents a naming record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.NameRecord.#ctor(Solnet.Programs.Models.NameService.RecordHeader,Solnet.Programs.Models.NameService.RecordType)">
            <summary>
            Default constructor.
            </summary>
            <param name="header">The record header.</param>
            <param name="type">The type of the name record.</param>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.NameRecord.Value">
            <summary>
            The storage of this name record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.NameRecord.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Solnet.Programs.Models.NameService.NameRecord.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a name record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.RecordBase">
            <summary>
            Base class containing record registration details.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordBase.Header">
            <summary>
            The record header.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordBase.Type">
            <summary>
            The type of the record.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordBase.AccountAddress">
            <summary>
            The address of the native account containing this record.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordBase.LookupValue">
            <summary>
            The name lookup value (when applicable).
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.RecordBase.#ctor(Solnet.Programs.Models.NameService.RecordHeader,Solnet.Programs.Models.NameService.RecordType)">
            <summary>
            Default constructor.
            </summary>
            <param name="header">The header of this record.</param>
            <param name="type">The type of this record (directly related to header TLD and Class).</param>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.RecordBase.GetValue">
            <summary>
            Gets the value held by this record.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.RecordHeader">
            <summary>
            Represents the record header.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordHeader.ParentName">
            <summary>
            The Top Level Domain of a given record.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordHeader.Owner">
            <summary>
            The owner of a given record. 
            For name records, its the account that owns the name.
            For reverse name records, its a mess.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.RecordHeader.Class">
            <summary>
            The class of the record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.RecordHeader.Deserialize(System.Byte[])">
            <summary>
            Deserializes a record header from a given account data.
            </summary>
            <param name="input">The raw account data.</param>
            <returns>The deserialized RecordHeader from the data.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.RecordType">
            <summary>
            Type of record.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.NameRecord">
            <summary>
            A naming record. The account holds binary storage.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.ReverseRecord">
            <summary>
            A reverse naming record. The account holds the name string.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.TwitterRecord">
            <summary>
            A twitter naming record. The account holds binary storage.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.ReverseTwitterRecord">
            <summary>
            A reverse twitter record. The account holds the twitter handle.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.TokenRecord">
            <summary>
            A token naming record. The account holds token metadata.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NameService.RecordType.ReverseTokenRecord">
            <summary>
            A reverse token record. The account holds the mint address.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.ReverseNameRecord">
            <summary>
            Represents a reverse naming record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseNameRecord.#ctor(Solnet.Programs.Models.NameService.RecordHeader,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="header">The record header.</param>
            <param name="name">The name of this reverse record.</param>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.ReverseNameRecord.Name">
            <summary>
            The name of the record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseNameRecord.GetValue">
            <inheritdoc />
        </member>
        <member name="P:Solnet.Programs.Models.NameService.ReverseNameRecord.Value">
            <summary>
            The record this <c>Name</c> points to.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseNameRecord.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a reverse name record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized reverse record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.ReverseTokenNameRecord">
            <summary>
            Represents a reverse token name record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTokenNameRecord.#ctor(Solnet.Programs.Models.NameService.RecordHeader)">
            <summary>
            Default constructor.
            </summary>
            <param name="header">The record header.</param>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.ReverseTokenNameRecord.Value">
            <summary>
            The token mint address.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTokenNameRecord.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTokenNameRecord.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a reverse token name record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized reverse token name record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.ReverseTwitterRecord">
            <summary>
            Represents a reverse twitter record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTwitterRecord.#ctor(Solnet.Programs.Models.NameService.RecordHeader)">
            <summary>
            Default constructor.
            </summary>
            <param name="header">The record header.</param>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.ReverseTwitterRecord.TwitterRegistryKey">
            <summary>
            The twitter registry address.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.ReverseTwitterRecord.TwitterHandle">
            <summary>
            The twitter handle.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTwitterRecord.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Solnet.Programs.Models.NameService.ReverseTwitterRecord.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a reverse twitter name record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized reverse twitter record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.TokenData">
            <summary>
            Represents a Token metadata record.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.Name">
            <summary>
            The name of the token.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.Ticker">
            <summary>
            The ticker of the token.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.Mint">
            <summary>
            The mint account address of the token.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.Decimals">
            <summary>
            The decimals used by the token. This dictates the minimum transferrable value.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.Website">
            <summary>
            The website of the token or project.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenData.LogoUri">
            <summary>
            The uri for the token logo.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.TokenData.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a token metadata record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized token metadata record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NameService.TokenNameRecord">
            <summary>
            Represents a token naming record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.TokenNameRecord.#ctor(Solnet.Programs.Models.NameService.RecordHeader)">
            <summary>
            Default constructor.
            </summary>
            <param name="header">The record header.</param>
        </member>
        <member name="P:Solnet.Programs.Models.NameService.TokenNameRecord.Value">
            <summary>
            The token metadata.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NameService.TokenNameRecord.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Solnet.Programs.Models.NameService.TokenNameRecord.Deserialize(System.Byte[])">
            <summary>
            Deserialization method for a token name record account.
            </summary>
            <param name="input">The raw data.</param>
            <returns>The deserialized token name record.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.NonceAccount">
            <summary>
            Represents a <see cref="T:Solnet.Programs.SystemProgram"/> Nonce Account in Solana.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.AccountDataSize">
            <summary>
            The size of the data for a nonce account.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.NonceAccount.Layout">
            <summary>
            Represents the layout of the <see cref="T:Solnet.Programs.Models.NonceAccount"/> data structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Layout.VersionOffset">
            <summary>
            The offset at which the version value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Layout.StateOffset">
            <summary>
            The offset at which the state value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Layout.AuthorizedKeyOffset">
            <summary>
            The offset at which the authorized public key value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Layout.NonceKeyOffset">
            <summary>
            The offset at which the current nonce public key value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Layout.FeeCalculatorOffset">
            <summary>
            The offset at which the fee calculator value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Version">
            <summary>
            The value used to specify version.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.State">
            <summary>
            The state of the nonce account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Authorized">
            <summary>
            The public key of the account authorized to interact with the nonce account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.Nonce">
            <summary>
            The nonce.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.NonceAccount.FeeCalculator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.NonceAccount.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize a span of bytes into a <see cref="T:Solnet.Programs.Models.NonceAccount"/> instance.
            </summary>
            <param name="data">The data to deserialize into the structure.</param>
            <returns>The Nonce Account structure.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.ResultWrapper`2">
            <summary>
            Wraps a result to an RPC request.
            </summary>
            <typeparam name="T">The underlying type of the request.</typeparam>
            <typeparam name="T2">The underlying type of the request.</typeparam>
        </member>
        <member name="M:Solnet.Programs.Models.ResultWrapper`2.#ctor(Solnet.Rpc.Core.Http.RequestResult{`0})">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
        </member>
        <member name="M:Solnet.Programs.Models.ResultWrapper`2.#ctor(Solnet.Rpc.Core.Http.RequestResult{`0},`1)">
            <summary>
            Initialize the result wrapper with the given result and it's parsed result type.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="parsedResult">The parsed result type.</param>
        </member>
        <member name="P:Solnet.Programs.Models.ResultWrapper`2.OriginalRequest">
            <summary>
            The original response to the request.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.ResultWrapper`2.ParsedResult">
            <summary>
            The desired type of the account data.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.ResultWrapper`2.WasDeserializationSuccessful">
            <summary>
            Whether the deserialization of the account data into the desired structure was successful.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.ResultWrapper`2.WasSuccessful">
            <summary>
            Whether the original request and the deserialization of the account data into the desired structure was successful.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.MultipleAccountsResultWrapper`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Solnet.Programs.Models.MultipleAccountsResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{Solnet.Rpc.Messages.ResponseValue{System.Collections.Generic.List{Solnet.Rpc.Models.AccountInfo}}})">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
        </member>
        <member name="M:Solnet.Programs.Models.MultipleAccountsResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{Solnet.Rpc.Messages.ResponseValue{System.Collections.Generic.List{Solnet.Rpc.Models.AccountInfo}}},`0)">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="parsedResult">The parsed result type.</param>
        </member>
        <member name="T:Solnet.Programs.Models.AccountResultWrapper`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Solnet.Programs.Models.AccountResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}})">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
        </member>
        <member name="M:Solnet.Programs.Models.AccountResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{Solnet.Rpc.Messages.ResponseValue{Solnet.Rpc.Models.AccountInfo}},`0)">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="parsedResult">The parsed result type.</param>
        </member>
        <member name="T:Solnet.Programs.Models.ProgramAccountsResultWrapper`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Solnet.Programs.Models.ProgramAccountsResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{System.Collections.Generic.List{Solnet.Rpc.Models.AccountKeyPair}})">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
        </member>
        <member name="M:Solnet.Programs.Models.ProgramAccountsResultWrapper`1.#ctor(Solnet.Rpc.Core.Http.RequestResult{System.Collections.Generic.List{Solnet.Rpc.Models.AccountKeyPair}},`0)">
            <summary>
            Initialize the result wrapper with the given result.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="parsedResult">The parsed result type.</param>
        </member>
        <member name="T:Solnet.Programs.Models.SubscriptionWrapper`1">
            <summary>
            Wraps the base subscription to have the underlying data of the subscription, which is sometimes needed to perform
            some logic before returning data to the subscription caller.
            </summary>
            <typeparam name="T">The type of the subscription.</typeparam>
        </member>
        <member name="F:Solnet.Programs.Models.SubscriptionWrapper`1.Data">
            <summary>
            The underlying data.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Subscription">
            <summary>
            Wraps a subscription with a generic type to hold either order book or trade events.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.Subscription.Address">
            <summary>
            The address associated with this data.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.Subscription.SubscriptionState">
            <summary>
            The underlying subscription state.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount">
            <summary>
            Represents a <see cref="T:Solnet.Programs.TokenProgram"/> Multi Signature Account in Solana.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.MaxSigners">
            <summary>
            The maximum number of signers.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout">
            <summary>
            The layout of the <see cref="T:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount"/> structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout.Length">
            <summary>
            The length of the structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout.MinimumSignersOffset">
            <summary>
            The offset at which the number of signers required value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout.NumberSignersOffset">
            <summary>
            The offset at which the number of valid signers value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout.IsInitializedOffset">
            <summary>
            The offset at which the is initialized value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Layout.SignersOffset">
            <summary>
            The offset at which the array with signers' public keys begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.MinimumSigners">
            <summary>
            Number of signers required
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.NumberSigners">
            <summary>
            Number of valid signers
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.IsInitialized">
            <summary>
            Whether the account has been initialized
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Signers">
            <summary>
            Signer public keys
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize the given data into the <see cref="T:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount"/> structure.
            </summary>
            <param name="data">The data.</param>
            <returns>The <see cref="T:Solnet.Programs.Models.TokenProgram.MultiSignatureAccount"/> structure.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.TokenAccount">
            <summary>
            Represents a <see cref="T:Solnet.Programs.TokenProgram" /> token account.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.TokenAccount.AccountState">
            <summary>
            Represents the state of a token account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.AccountState.Uninitialized">
            <summary>
            Account is uninitialized.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.AccountState.Initialized">
            <summary>
            Account is initialized. The owner and/or delegate may operate the account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.AccountState.Frozen">
            <summary>
            The account is frozen. The owner and delegate can't operate the account.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout">
            <summary>
            The layout of the <see cref="T:Solnet.Programs.Models.TokenProgram.TokenAccount"/> structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.Length">
            <summary>
            The length of the structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.MintOffset">
            <summary>
            The offset at which the token mint pubkey begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.OwnerOffset">
            <summary>
            The offset at which the owner pubkey begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.AmountOffset">
            <summary>
            The offset at which the amount value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.DelegateOptionOffset">
            <summary>
            The offset at which the delegate pubkey COption value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.DelegateOffset">
            <summary>
            The offset at which the delegate pubkey value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.StateOffset">
            <summary>
            The offset at which the state value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.IsNativeOptionOffset">
            <summary>
            The offset at which the IsNative COption begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.IsNativeOffset">
            <summary>
            The offset at which the IsNative  begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.DelegatedAmountOffset">
            <summary>
            The offset at which the delegaterrd amount value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.CloseAuthorityOptionOffset">
            <summary>
            The offset at which the close authority pubkey COption begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenAccount.Layout.CloseAuthorityOffset">
            <summary>
            The offset at which the close authority pubkey begins.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.Mint">
            <summary>
            The token mint.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.Owner">
            <summary>
            The owner of the token account.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.Amount">
            <summary>
            The amount of tokens this account holds.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.Delegate">
            <summary>
            Delegate address. If Delegate has value then DelegatedAmount represents the amount authorized by the delegate.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.State">
            <summary>
            Represents the state of this account.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.IsNative">
            <summary>
            If IsNative has value, this is a native token and the value logs the rent-exempt reserve.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.DelegatedAmount">
            <summary>
            The amount delegated.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenAccount.CloseAuthority">
            <summary>
            Optional authority to close the account.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.TokenProgram.TokenAccount.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize the given data into the <see cref="T:Solnet.Programs.Models.TokenProgram.TokenAccount"/> structure.
            </summary>
            <param name="data">The data.</param>
            <returns>The <see cref="T:Solnet.Programs.Models.TokenProgram.TokenAccount"/> structure.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.TokenMint">
            <summary>
            Represents a <see cref="T:Solnet.Programs.TokenProgram" /> token mint account.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.TokenProgram.TokenMint.Layout">
            <summary>
            The layout of the <see cref="T:Solnet.Programs.Models.TokenProgram.TokenMint"/> structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.Length">
            <summary>
            The length of the structure.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.MintAuthorityOptionOffset">
            <summary>
            The offset at which the mint authority COption begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.MintAuthorityOffset">
            <summary>
            The offset at which the mint authority pubkey value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.SupplyOffset">
            <summary>
            The offset at which the supply value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.DecimalsOffset">
            <summary>
            The offset at which the decimals value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.IsInitializedOffset">
            <summary>
            The offset at which the is initialized value begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.FreezeAuthorityOptionOffset">
            <summary>
            The offset at which the freeze authority COption begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.TokenProgram.TokenMint.Layout.FreezeAuthorityOffset">
            <summary>
            The offset at which the freeze authority pubkey value begins.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenMint.MintAuthority">
            <summary>
            Optional authority to mint new tokens. If no mint authority is present, no new tokens can be issued.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenMint.Supply">
            <summary>
            Total supply of tokens.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenMint.Decimals">
            <summary>
            Number of base 10 digits to the right of the decimal polace.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenMint.IsInitialized">
            <summary>
            Whether or not the account has been initialized.
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.TokenProgram.TokenMint.FreezeAuthority">
            <summary>
            Optional authority to freeze token accounts.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Models.TokenProgram.TokenMint.Deserialize(System.ReadOnlySpan{System.Byte})">
            <summary>
            Deserialize the given data into the <see cref="T:Solnet.Programs.Models.TokenProgram.TokenMint"/> structure.
            </summary>
            <param name="data">The data.</param>
            <returns>The <see cref="T:Solnet.Programs.Models.TokenProgram.TokenMint"/> structure.</returns>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State">
            <summary>
            Represents <see cref="T:Solnet.Programs.StakeProgram"/> State Structs in Solana.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.Authorized">
            <summary>
            A public key pair passed as an Authorized struct with staking and withdrawing authorities
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Authorized.Staker">
            The staking authority
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Authorized.Withdrawer">
            The withdrawing authority
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.Delegation">
            <summary>
            A structure containing the information for delegating a stake
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Delegation.VoterPubkey">
            <summary>
            to whom the stake is delegated
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Delegation.Stake">
            <summary>
            activated stake amount, set at delegate() time
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Delegation.ActivationEpoch">
            <summary>
             epoch at which this stake was activated, std::Epoch::MAX if is a bootstrap stake
             </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Delegation.DeactivationEpoch">
            <summary>
            epoch the stake was deactivated, std::Epoch::MAX if not deactivated
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Delegation.WarmupCooldownRate">
            <summary>
            how much stake we can activate per-epoch as a fraction of currently effective stake
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.Lockup">
            <summary>
            A structure containing the information for setting Lockup information for a stake
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Lockup.UnixTimestamp">
            <summary>
            UnixTimestamp at which this stake will allow withdrawal, unless the
              transaction is signed by the custodian
              </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Lockup.Epoch">
            <summary>
            epoch height at which this stake will allow withdrawal, unless the
            transaction is signed by the custodian
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Lockup.Custodian">
            <summary>
            custodian signature on a transaction exempts the operation from
            lockup constraints
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.Meta">
            <summary>
            A structure containing metadata for a stake
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Meta.RentExemptReserve">
            <summary>
            The Rent Exempt Reserve amount
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Meta.Authorized">
            <summary>
            An Authorized struct
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Meta.Lockup">
            <summary>
            A Lockup struct
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.Stake">
            <summary>
            A structure containing information about a redeemed or delegated vote account stake
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Stake.Delegation">
            <summary>
            A Delegation struct
            </summary>
        </member>
        <member name="P:Solnet.Programs.Models.Stake.State.Stake.CreditsObserved">
            <summary>
            credits observed is credits from vote account state when delegated or redeemed
            </summary>
        </member>
        <member name="T:Solnet.Programs.Models.Stake.State.StakeAuthorize">
            <summary>
            An enum representing Authority type
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.Stake.State.StakeAuthorize.Staker">
            <summary>
            Is staker
            </summary>
        </member>
        <member name="F:Solnet.Programs.Models.Stake.State.StakeAuthorize.Withdrawer">
            <summary>
            Is withdrawer
            </summary>
        </member>
        <member name="T:Solnet.Programs.NameServiceInstructions">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.NameServiceProgram"/> along with a friendly name so as not to use reflection.
            <remarks>
            For more information see:
            https://spl.solana.com/name-service
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceInstructions.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Programs.NameServiceProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.NameServiceInstructions.Values">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.NameServiceProgram"/>.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceInstructions.Values.Create">
             <summary>
             Create a name record.
             <remarks>
             The address of the name record (account #1) is a program-derived address with the following
             seeds to ensure uniqueness:
             <para>
             <list type="bullet">
             <item>
             SHA256(HASH_PREFIX, <c>name</c>)
             </item> 
             <item>
             Account class (account #3)
             </item>
             <item>
             Parent name record address (account #4)
             </item>
             </list>
            </para>
             If this is a child record, the parent record's owner must approve by signing (account #5)
             </remarks>
             </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceInstructions.Values.Update">
            <summary>
            Update the data in a name record.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceInstructions.Values.Transfer">
            <summary>
            Transfer ownership of a name record.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceInstructions.Values.Delete">
            <summary>
            Delete a name record.
            <remarks>
            Any lamports left in the account will be transferred to the refund account.
            </remarks>
            </summary>
        </member>
        <member name="T:Solnet.Programs.NameServiceProgram">
            <summary>
            Implements the Token Program methods.
            <remarks>
            For more information see: https://spl.solana.com/name-service
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceProgram.HashPrefix">
            <summary>
            The hash prefix used to calculate the SHA256 of the name record to be created.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceProgram.MethodOffset">
            <summary>
            The offset at which the value which defines the instruction method begins.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceProgram.ProgramIdKey">
            <summary>
            The public key of the Name Service Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.NameServiceProgram.NameAccountSize">
            <summary>
            The space to be used when creating the name record.
            </summary>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.CreateNameRegistry(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt32,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction to create a name record.
            </summary>
            <param name="name">The name to use.</param>
            <param name="payer">The account of the payer.</param>
            <param name="nameOwner">The public key of the name owner.</param>
            <param name="nameClass">The public key of the account of the name class.</param>
            <param name="parentName">The public key of the parent name.</param>
            <param name="parentNameOwner">The public key of the account of the parent name owner.</param>
            <param name="space">The space to assign to the account.</param>
            <param name="lamports">The amount of lamports the account needs to be rate exempt.</param>
            <returns>The transaction instruction.</returns>
            <exception cref="T:System.Exception">Thrown when it was not possible to derive a program address for the account.</exception>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.ComputeHashedName(System.String)">
            <summary>
            Gets the hash for the given value with the attached hash prefix.
            </summary>
            <param name="name">The name to hash attach the prefix and hash.</param>
            <returns>The hash as bytes.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DeriveNameAccountKey(System.ReadOnlySpan{System.Byte},Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Get's the program derived address for the name.
            </summary>
            <param name="hashedName">The hash of the name with the name service hash prefix.</param>
            <param name="nameClass">The account of the name class.</param>
            <param name="parentName">The public key of the parent name.</param>
            <returns>The program derived address for the name if it could be found, otherwise null.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.CreateNameRegistryInstruction(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.ReadOnlySpan{System.Byte},System.UInt64,System.UInt32,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction to create a name record.
            </summary>
            <param name="nameKey">The public key of the name record.</param>
            <param name="nameOwner">The public key of the name owner.</param>
            <param name="payer">The public key of the account of the payer.</param>
            <param name="hashedName">The hash of the name with the hash prefix.</param>
            <param name="space">The space to assign to the account.</param>
            <param name="lamports">The amount of lamports the account needs to be rate exempt.</param>
            <param name="nameClass">The public key of the account of the name class.</param>
            <param name="parentName">The public key of the parent name.</param>
            <param name="parentNameOwner">The public key of the account of the parent name owner.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.UpdateNameRegistry(Solnet.Wallet.PublicKey,System.UInt32,System.ReadOnlySpan{System.Byte},Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction to update the data of a name record.
            <remarks>
            If the name class was defined upon name record creation then the name class parameter must be passed.
            </remarks>
            </summary>
            <param name="nameKey">The public key of the name record.</param>
            <param name="offset">The offset at which to update the data.</param>
            <param name="data">The data to insert.</param>
            <param name="nameOwner">The public key of the name owner.</param>
            <param name="nameClass">The public key of the account of the name class.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.TransferNameRegistry(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction to transfer ownership of a name record. 
            <remarks>
            If the name class was defined upon name record creation then the name class parameter must be passed.
            </remarks>
            </summary>
            <param name="nameKey">The public key of the name record.</param>
            <param name="newOwner">The public key of the new name owner.</param>
            <param name="nameOwner">The public key of the name owner.</param>
            <param name="nameClass">The public key of the account of the name class.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DeleteNameRegistry(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction to delete a name record.
            </summary>
            <param name="nameKey">The public key of the name record.</param>
            <param name="nameOwner">The public key of the name owner.</param>
            <param name="refundPublicKey">The public key of the refund account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.EncodeCreateNameRegistryData(System.ReadOnlySpan{System.Byte},System.UInt64,System.UInt32)">
            <summary>
            Encode the instruction data to be used with the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Create"/> instruction.
            </summary>
            <param name="hashedName">The hashed name for the record.</param>
            <param name="lamports">The number of lamports for rent exemption.</param>
            <param name="space">The space for the account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.EncodeUpdateNameRegistryData(System.UInt32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode the instruction data to be used with the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Update"/> instruction.
            </summary>
            <param name="offset">The offset at which to update the data.</param>
            <param name="data">The data to insert.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.EncodeTransferNameRegistryData(Solnet.Wallet.PublicKey)">
            <summary>
            Encode the instruction data to be used with the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Transfer"/> instruction.
            </summary>
            <param name="newOwner">The public key of the account to transfer ownership to.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.EncodeDeleteNameRegistryData">
            <summary>
            Encode the instruction data to be used with the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Delete"/> instruction.
            </summary>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DecodeCreateNameRegistry(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Create"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DecodeUpdateNameRegistry(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Update"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DecodeTransferNameRegistry(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Transfer"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.DecodeDeleteNameRegistry(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.NameServiceInstructions.Values.Delete"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.NameServiceProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the System Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.SharedMemoryProgram">
            <summary>
            Helper class for the Shared Memory Program.
            <remarks>
            Used to write data to a given account data.
            Note: this program, as of writing this, was inactive in some clusters.
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.SharedMemoryProgram.ProgramIdKey">
            <summary>
            The address of the Shared Memory Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SharedMemoryProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SharedMemoryProgram.InstructionName">
            <summary>
            The instruction's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.SharedMemoryProgram.Write(Solnet.Wallet.PublicKey,System.ReadOnlySpan{System.Byte},System.UInt64)">
            <summary>
            Creates an instruction used to interact with the Shared memory program.
            This instruction writes data to a given program starting at a specific offset.
            </summary>
            <param name="dest">The public key of the account where the data is to be written.</param>
            <param name="payload">The data to be written.</param>
            <param name="offset">The offset of the account data to write to.</param>
            <returns>The <see cref="T:Solnet.Rpc.Models.TransactionInstruction"/> encoded that interacts with the shared memory program..</returns>
        </member>
        <member name="M:Solnet.Programs.SharedMemoryProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the System Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.StakeProgram">
            <summary>
            Implements the Stake Program methods.
            <remarks>
            For more information see:
            https://docs.rs/solana-program/latest/src/solana_program/stake/instruction.rs.html
            https://github.com/solana-labs/solana/blob/master/sdk/program/src/stake/instruction.rs
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgram.ProgramIdKey">
            <summary>
            The public key of the Stake Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgram.StakeAccountDataSize">
            <summary>
            Stake Account Layout Size
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgram.ConfigKey">
            <summary>
            Stake Config ID
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Initialize(Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.Authorized,Solnet.Programs.Models.Stake.State.Lockup)">
            <summary>
            Initialize a stake with lockup and authorization information
            </summary>
            <param name="stakePubkey">Uninitialized stake account</param>
            <param name="authorized">Carries pubkeys that must sign staker transactions and withdrawer transactions</param>
            <param name="lockup">Carries information about withdrawal restrictions</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Authorize(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.StakeAuthorize,Solnet.Wallet.PublicKey)">
            <summary>
            Authorize a key to manage stake or withdrawal
            </summary>
            <param name="stakePubkey">Stake account to be updated</param>
            <param name="authorizedPubkey">Stake or withdraw authority</param>
            <param name="newAuthorizedPubkey">Key to be authorized by the transaction</param>
            <param name="stakeAuthorize">Type of authority</param>
            <param name="custodianPubkey">Lockup authority pubkey if updated withdrawer before lockup expiration</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.DelegateStake(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Delegate a stake to a particular vote account
            </summary>
            <param name="stakePubkey">Initialized stake account to be delegated</param>
            <param name="authorizedPubkey">Stake authority</param>
            <param name="votePubkey">Vote account to which this stake will be delegated</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Split(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey)">
            <summary>
            Split u64 tokens and stake off a stake account into another stake account.
            </summary>
            <param name="stakePubkey">Stake account to be split; must be in the Initialized or Stake state</param>
            <param name="authorizedPubkey">Stake authority</param>
            <param name="lamports">Amount to be split</param>
            <param name="splitStakePubkey">Uninitialized stake account that will take the split-off amount</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Withdraw(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey)">
            <summary>
            Withdraw unstaked lamports from the stake account
            </summary>
            <param name="stakePubkey">Stake account from which to withdraw</param>
            <param name="withdrawerPubkey">Withdraw authority</param>
            <param name="toPubkey">Recipient account</param>
            <param name="lamports">Amount to withdraw</param>
            <param name="custodianPubkey">Lockup authority</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Deactivate(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Deactivates the stake in the account
            </summary>
            <param name="stakePubkey">Delegated stake account</param>
            <param name="authorizedPubkey">Stake authority</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.SetLockup(Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.Lockup,Solnet.Wallet.PublicKey)">
            <summary>
            Set stake lockup
            If a lockup is not active, the withdraw authority may set a new lockup
            If a lockup is active, the lockup custodian may update the lockup parameters
            </summary>
            <param name="stakePubkey">Initialized stake account</param>
            <param name="lockup">Lockup information</param>
            <param name="custodianPubkey">Lockup authority or withdraw authority</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Merge(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
             <summary>
             Merge two stake accounts.
            
             Both accounts must have identical lockup and authority keys. A merge
             is possible between two stakes in the following states with no additional
             conditions:
            
             * two deactivated stakes
             * an inactive stake into an activating stake during its activation epoch
            
             For the following cases, the voter pubkey and vote credits observed must match:
            
             * two activated stakes
             * two activating accounts that share an activation epoch, during the activation epoch
            
             All other combinations of stake states will fail to merge, including all
             "transient" states, where a stake is activating or deactivating with a
             non-zero effective stake.
            
             </summary>
             <param name="destinationStakePubkey">Destination stake account for the merge</param>
             <param name="sourceStakePubkey">Source stake account for merge, will be drained</param>
             <param name="authorizedPubkey">Stake authority</param>
             <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.AuthorizeWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.StakeAuthorize,Solnet.Wallet.PublicKey)">
            <summary>
            Authorize a key to manage stake or withdrawal with a derived key
            </summary>
            <param name="stakePubkey">Stake account to be updated</param>
            <param name="authorityBase">Base key of stake or withdraw authority</param>
            <param name="authoritySeed">Seed</param>
            <param name="authorityOwner">Authority owner</param>
            <param name="newAuthorizedPubkey">Pubkey authorized by the transaction</param>
            <param name="stakeAuthorize">Type of stake authority</param>
            <param name="custodianPubkey">Custodian pubkey</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.InitializeChecked(Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.Authorized)">
             <summary>
             Initialize a stake with authorization information
            
             This instruction is similar to `Initialize` except that the withdraw authority
             must be a signer, and no lockup is applied to the account.
             
             </summary>
             <param name="stakePubkey">Uninitialized stake account</param>
             <param name="authorized">Carries pubkeys that must sign staker transactions and withdrawer transactions</param>
             <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.AuthorizeChecked(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.StakeAuthorize,Solnet.Wallet.PublicKey)">
             <summary>
             Authorize a key to manage stake or withdrawal
            
             This instruction behaves like `Authorize` with the additional requirement that the new
             stake or withdraw authority must also be a signer.
            
             </summary>
             <param name="stakePubkey">Stake account to be updated</param>
             <param name="authorizedPubkey">Stake or withdraw authority</param>
             <param name="newAuthorizedPubkey">Key to be authorized by the transaction</param>
             <param name="stakeAuthorize">Type of authority</param>
             <param name="custodianPubkey">Lockup authority pubkey if updated withdrawer before lockup expiration</param>
             <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.AuthorizeCheckedWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.StakeAuthorize,Solnet.Wallet.PublicKey)">
             <summary>
             Authorize a key to manage stake or withdrawal with a derived key
            
             This instruction behaves like `AuthorizeWithSeed` with the additional requirement that
             the new stake or withdraw authority must also be a signer.
            
             </summary>
             <param name="stakePubkey">Stake account to be updated</param>
             <param name="authorityBase">Base key of stake or withdraw authority</param>
             <param name="authoritySeed">Seed</param>
             <param name="authorityOwner">Authority owner</param>
             <param name="newAuthorizedPubkey">Key to be authorized by the transaction</param>
             <param name="stakeAuthorize">Type of stake authority</param>
             <param name="custodianPubkey">Custodian pubkey</param>
             <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.SetLockupChecked(Solnet.Wallet.PublicKey,Solnet.Programs.Models.Stake.State.Lockup,Solnet.Wallet.PublicKey)">
             <summary>
             This instruction behaves like `SetLockup` with the additional requirement that
             the new lockup authority also be a signer.
            
             If a lockup is not active, the withdraw authority may set a new lockup
             If a lockup is active, the lockup custodian may update the lockup parameters
            
             </summary>
             <param name="stakePubkey">Initialized stake account</param>
             <param name="lockup">Lockup information</param>
             <param name="custodianPubkey">Lockup authority or withdraw authority</param>
             <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.StakeProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the Stake Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.StakeProgramData">
            <summary>
            Implements the stake program data encodings.
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgramData.MethodOffset">
            <summary>
            The offset at which the value which defines the program method begins. 
            </summary>
        </member>
        <member name="M:Solnet.Programs.StakeProgramData.EncodeInitializeData(Solnet.Programs.Models.Stake.State.Authorized,Solnet.Programs.Models.Stake.State.Lockup)">
            <summary>
            Summary text here
            </summary>
        </member>
        <member name="T:Solnet.Programs.StakeProgramInstructions">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.StakeProgram"/> ??? along with a friendly name so as not to use reflection ???.
            <remarks>
            For more information see:
            https://docs.solana.com/developing/runtime-facilities/programs#stake-program
            https://docs.rs/solana-sdk/1.7.14/solana_sdk/stake/instruction/enum.StakeInstruction.html
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.StakeProgramInstructions.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Programs.StakeProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.StakeProgramInstructions.Values">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.StakeProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.SystemProgram">
            <summary>
            Implements the System Program methods.
            <remarks>
            For more information see:
            https://docs.solana.com/developing/runtime-facilities/programs#system-program
            https://docs.rs/solana-sdk/1.7.0/solana_sdk/system_instruction/enum.SystemInstruction.html
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgram.ProgramIdKey">
            <summary>
            The public key of the System Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.CreateAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to create a new account.
            </summary>
            <param name="fromAccount">The public key of the account from which the lamports will be transferred.</param>
            <param name="newAccountPublicKey">The public key of the account to which the lamports will be transferred.</param>
            <param name="lamports">The amount of lamports to transfer.</param>
            <param name="space">Number of bytes of memory to allocate for the account.</param>
            <param name="programId">The program id of the account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.Assign(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to assign a new account owner.
            </summary>
            <param name="account">The public key of the account to assign a new owner.</param>
            <param name="programId">The program id of the account to assign as owner.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.Transfer(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to transfer lamports.
            </summary>
            <param name="fromPublicKey">The public key of the account to transfer from.</param>
            <param name="toPublicKey">The public key of the account to transfer to.</param>
            <param name="lamports">The amount of lamports.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.CreateAccountWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program
            to create a new account at an address derived from a base public key and a seed.
            </summary>
            <param name="fromPublicKey">The public key of the account to transfer from.</param>
            <param name="toPublicKey">The public key of the account to transfer to.</param>
            <param name="baseAccount">The public key of the base account.</param>
            <param name="seed">The seed to use to derive the account address.</param>
            <param name="lamports">The amount of lamports.</param>
            <param name="space">The number of bytes of space to allocate for the account.</param>
            <param name="owner">The public key of the owner to use to derive the account address.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.AdvanceNonceAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program
            to consume a stored nonce, replacing it with a successor.
            </summary>
            <param name="nonceAccountPublicKey">The public key of the nonce account.</param>
            <param name="authorized">The public key of the account authorized to perform nonce operations on the nonce account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.WithdrawNonceAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to withdraw funds from a nonce account.
            </summary>
            <param name="nonceAccountPublicKey">The public key of the nonce account.</param>
            <param name="toPublicKey">The public key of the account to transfer to.</param>
            <param name="authorized">The public key of the account authorized to perform nonce operations on the nonce account.</param>
            <param name="lamports">The amount of lamports to transfer.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.InitializeNonceAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to drive the
            state of an Uninitialized nonce account to Initialized, setting the nonce value.
            </summary>
            <param name="nonceAccountPublicKey">The public key of the nonce account.</param>
            <param name="authorized">The public key of the account authorized to perform nonce operations on the nonce account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.AuthorizeNonceAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to change
            the entity authorized to execute nonce instructions on the account.
            </summary>
            <param name="nonceAccountPublicKey">The public key of the nonce account.</param>
            <param name="authorized">The public key of the account authorized to perform nonce operations on the nonce account.</param>
            <param name="newAuthority">The public key of the new authority for the nonce operations.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.Allocate(Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to
            allocate space in a (possibly new) account without funding.
            </summary>
            <param name="account">The public key of the account to allocate space to.</param>
            <param name="space">The number of bytes of space to allocate.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.AllocateWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,System.UInt64,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to
            allocate space for and assign an account at an address derived from a base public key and a seed.
            </summary>
            <param name="account">The public key of the account to allocate space to.</param>
            <param name="baseAccount">The public key of the base account.</param>
            <param name="seed">The seed to use to derive the account address.</param>
            <param name="space">The number of bytes of space to allocate.</param>
            <param name="owner">The public key of the owner to use to derive the account address.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.AssignWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,Solnet.Wallet.PublicKey)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to
            assign an account to a program based on a seed.
            </summary>
            <param name="account">The public key of the account to assign to.</param>
            <param name="baseAccount">The public key of the base account.</param>
            <param name="seed">The seed to use to derive the account address.</param>
            <param name="owner">The public key of the owner to use to derive the account address.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.TransferWithSeed(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.String,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64)">
            <summary>
            Initialize a new transaction instruction which interacts with the System Program to
            transfer lamports from a derived address.
            </summary>
            <param name="fromPublicKey">The public key of the account to transfer from.</param>
            <param name="fromBaseAccount">The public key of the base account.</param>
            <param name="seed">The seed to use to derive the funding account address.</param>
            <param name="fromOwner">The public key of the owner to use to derive the funding account address.</param>
            <param name="toPublicKey">The account to transfer to.</param>
            <param name="lamports">The amount of lamports to transfer.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the System Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.SystemProgramData">
            <summary>
            Implements the system program data encodings.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramData.MethodOffset">
            <summary>
            The offset at which the value which defines the program method begins. 
            </summary>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeCreateAccountData(Solnet.Wallet.PublicKey,System.UInt64,System.UInt64)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccount"/> method.
            </summary>
            <param name="owner">The public key of the owner program account.</param>
            <param name="lamports">The number of lamports to fund the account.</param>
            <param name="space">The space to be allocated to the account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAssignData(Solnet.Wallet.PublicKey)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Assign"/> method.
            </summary>
            <param name="programId">The program id to set as the account owner.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeTransferData(System.UInt64)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Transfer"/> method.
            </summary>
            <param name="lamports">The number of lamports to fund the account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeCreateAccountWithSeedData(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64,System.String)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccountWithSeed"/> method.
            </summary>
            <param name="baseAccount">The public key of the base account used to derive the account address.</param>
            <param name="owner">The public key of the owner program account address.</param>
            <param name="lamports">Number of lamports to transfer to the new account.</param>
            <param name="space">Number of bytes of memory to allocate.</param>
            <param name="seed">Seed to use to derive the account address.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAdvanceNonceAccountData">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AdvanceNonceAccount"/> method.
            </summary>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeWithdrawNonceAccountData(System.UInt64)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.WithdrawNonceAccount"/> method.
            </summary>
            <param name="lamports"></param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeInitializeNonceAccountData(Solnet.Wallet.PublicKey)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.InitializeNonceAccount"/> method.
            </summary>
            <param name="authorized">The public key of the entity authorized to execute nonce instructions on the account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAuthorizeNonceAccountData(Solnet.Wallet.PublicKey)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AuthorizeNonceAccount"/> method.
            </summary>
            <param name="authorized">The public key of the entity authorized to execute nonce instructions on the account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAllocateData(System.UInt64)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Allocate"/> method.
            </summary>
            <param name="space">Number of bytes of memory to allocate.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAllocateWithSeedData(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.String)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AllocateWithSeed"/> method.
            </summary>
            <param name="baseAccount">The public key of the base account.</param>
            <param name="space">Number of bytes of memory to allocate.</param>
            <param name="owner">Owner to use to derive the funding account address.</param>
            <param name="seed">Seed to use to derive the funding account address.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeAssignWithSeedData(Solnet.Wallet.PublicKey,System.String,Solnet.Wallet.PublicKey)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AssignWithSeed"/> method.
            </summary>
            <param name="baseAccount">The public key of the base account.</param>
            <param name="seed">Seed to use to derive the account address.</param>
            <param name="owner">The public key of the owner program account.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.EncodeTransferWithSeedData(Solnet.Wallet.PublicKey,System.String,System.UInt64)">
            <summary>
            Encode transaction instruction data for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.TransferWithSeed"/> method.
            </summary>
            <param name="owner">Owner to use to derive the funding account address.</param>
            <param name="seed">Seed to use to derive the funding account address.</param>
            <param name="lamports">Amount of lamports to transfer.</param>
            <returns>The transaction instruction data.</returns>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeCreateAccountData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAssignData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Assign"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeTransferData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Transfer"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeCreateAccountWithSeedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccountWithSeed"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAdvanceNonceAccountData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AdvanceNonceAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeWithdrawNonceAccountData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.WithdrawNonceAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeInitializeNonceAccountData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.InitializeNonceAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAuthorizeNonceAccountData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AuthorizeNonceAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAllocateData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.Allocate"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAllocateWithSeedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AllocateWithSeed"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeAssignWithSeedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.AssignWithSeed"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.SystemProgramData.DecodeTransferWithSeedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.SystemProgramInstructions.Values.TransferWithSeed"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="T:Solnet.Programs.SystemProgramInstructions">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.SystemProgram"/> along with a friendly name so as not to use reflection.
            <remarks>
            For more information see:
            https://docs.solana.com/developing/runtime-facilities/programs#system-program
            https://docs.rs/solana-sdk/1.7.0/solana_sdk/system_instruction/enum.SystemInstruction.html
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Programs.SystemProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.SystemProgramInstructions.Values">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.SystemProgram"/>.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccount">
            <summary>
            Create a new account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.Assign">
            <summary>
            Assign account to a program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.Transfer">
            <summary>
            Transfer lamports.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.CreateAccountWithSeed">
            <summary>
            Create a new account at an address derived from a base public key and a seed.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.AdvanceNonceAccount">
            <summary>
            Consumes a stored nonce, replacing it with a successor.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.WithdrawNonceAccount">
            <summary>
            Withdraw funds from a nonce account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.InitializeNonceAccount">
            <summary>
            Drive state of uninitialized nonce account to Initialized, setting the nonce value.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.AuthorizeNonceAccount">
            <summary>
            Change the entity authorized to execute nonce instructions on the account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.Allocate">
            <summary>
            Allocate space in a (possibly new) account without funding.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.AllocateWithSeed">
            <summary>
            Allocate space for and assign an account at an address derived from a base public key and a seed.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.AssignWithSeed">
            <summary>
            Assign account to a program based on a seed
            </summary>
        </member>
        <member name="F:Solnet.Programs.SystemProgramInstructions.Values.TransferWithSeed">
            <summary>
            Transfer lamports from a derived address.
            </summary>
        </member>
        <member name="T:Solnet.Programs.SysVars">
            <summary>
            Represents the System Variables
            </summary>
        </member>
        <member name="F:Solnet.Programs.SysVars.RecentBlockHashesKey">
            <summary>
            The public key of the Recent Block Hashes System Variable. 
            </summary>
        </member>
        <member name="F:Solnet.Programs.SysVars.RentKey">
            <summary>
            The public key of the Rent System Variable.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SysVars.ClockKey">
            <summary>
            The public key of the Clock System Variable.
            </summary>
        </member>
        <member name="F:Solnet.Programs.SysVars.StakeHistoryKey">
            <summary>
            The public key of the Stake History System Variable.
            </summary>
        </member>
        <member name="T:Solnet.Programs.TokenProgram">
            <summary>
            Implements the Token Program methods.
            <remarks>
            For more information see:
            https://spl.solana.com/token
            https://docs.rs/spl-token/3.2.0/spl_token/
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgram.ProgramIdKey">
            <summary>
            The public key of the Token Program.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgram.ProgramName">
            <summary>
            The program's name.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgram.MintAccountDataSize">
            <summary>
            Mint account account layout size.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgram.TokenAccountDataSize">
            <summary>
            Account layout size.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgram.MultisigAccountDataSize">
            <summary>
            Multisig account layout size for the given number of signers.
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.Transfer(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initializes an instruction to transfer tokens from one account to another either directly or via a delegate.
            If this account is associated with the native mint then equal amounts of SOL and Tokens will be transferred to the destination account.
            </summary>
            <param name="source">The public key of the account to transfer tokens from.</param>
            <param name="destination">The public key of the account to account to transfer tokens to.</param>
            <param name="amount">The amount of tokens to transfer.</param>
            <param name="authority">The public key of the authority.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.TransferChecked(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.Int32,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            <para>
            Initializes an instruction to transfer tokens from one account to another either directly or via a delegate.
            If this account is associated with the native mint then equal amounts of SOL and Tokens will be transferred to the destination account.
            </para>
            <para>
            This instruction differs from Transfer in that the token mint and decimals value is checked by the caller.
            This may be useful when creating transactions offline or within a hardware wallet.
            </para>
            </summary>
            <param name="source">The public key of the account to transfer tokens from.</param>
            <param name="destination">The public key of the account to account to transfer tokens to.</param>
            <param name="amount">The amount of tokens to transfer.</param>
            <param name="decimals">The token decimals.</param>
            <param name="authority">The public key of the authority account.</param>
            <param name="tokenMint">The public key of the token mint.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.InitializeAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            <para>Initializes an instruction to initialize a new account to hold tokens.
            If this account is associated with the native mint then the token balance of the initialized account will be equal to the amount of SOL in the account.
            If this account is associated with another mint, that mint must be initialized before this command can succeed.
            </para>
            <para>
            The InitializeAccount instruction requires no signers and MUST be included within the same Transaction
            as the system program's <see cref="M:Solnet.Programs.SystemProgram.CreateAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64,Solnet.Wallet.PublicKey)"/>"/>
            instruction that creates the account being initialized.
            Otherwise another party can acquire ownership of the uninitialized account.
            </para>
            </summary>
            <param name="account">The public key of the account to initialize.</param>
            <param name="mint">The public key of the token mint.</param>
            <param name="authority">The public key of the account to set as authority of the initialized account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.InitializeMultiSignature(Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey},System.Int32)">
            <summary>
            Initializes an instruction to initialize a multi signature token account.
            </summary>
            <param name="multiSignature">Public key of the multi signature account.</param>
            <param name="signers">Addresses of multi signature signers.</param>
            <param name="m">The number of signatures required to validate this multi signature account.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.InitializeMint(Solnet.Wallet.PublicKey,System.Int32,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey)">
            <summary>
            Initializes an instruction to transfer tokens from one account to another either directly or via a delegate.
            If this account is associated with the native mint then equal amounts of SOL and Tokens will be transferred to the destination account.
            </summary>
            <param name="mint">The public key of the token mint.</param>
            <param name="decimals">The token decimals.</param>
            <param name="mintAuthority">The public key of the token mint authority.</param>
            <param name="freezeAuthority">The token freeze authority.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.MintTo(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initializes an instruction to mint tokens to a destination account.
            </summary>
            <param name="mint">The public key token mint.</param>
            <param name="destination">The public key of the account to mint tokens to.</param>
            <param name="amount">The amount of tokens.</param>
            <param name="mintAuthority">The token mint authority account.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.Approve(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initializes an instruction to approve a transaction.
            </summary>
            <param name="source">The public key source account.</param>
            <param name="delegatePublicKey">The public key of the delegate account authorized to perform a transfer from the source account.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="amount">The maximum amount of tokens the delegate may transfer.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.Revoke(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initializes an instruction to revoke a transaction.
            </summary>
            <param name="source">The public key source account.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.SetAuthority(Solnet.Wallet.PublicKey,Solnet.Programs.AuthorityType,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to set an authority on an account.
            </summary>
            <param name="account">The public key of the account to set the authority on.</param>
            <param name="authority">The type of authority to set.</param>
            <param name="currentAuthority">The public key of the current authority of the specified type.</param>
            <param name="newAuthority">The public key of the new authority.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.Burn(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to burn tokens.
            </summary>
            <param name="source">The public key of the account to burn tokens from.</param>
            <param name="mint">The public key of the token mint.</param>
            <param name="amount">The amount of tokens to burn.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.CloseAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to close an account.
            </summary>
            <param name="account">The public key of the account to close.</param>
            <param name="destination">The public key of the account that will receive the SOL.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="programId">The public key which represents the associated program id.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.FreezeAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to freeze a token account.
            </summary>
            <param name="account">The public key of the account to freeze.</param>
            <param name="mint">The public key of the token mint.</param>
            <param name="freezeAuthority">The public key of the authority of the freeze authority for the token mint.</param>
            <param name="programId">The public key which represents the associated program id.</param>
            <param name="signers">Signing accounts if the <c>freezeAuthority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.ThawAccount(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to thaw a token account.
            </summary>
            <param name="account">The public key of the account to thaw.</param>
            <param name="mint">The public key of the token mint.</param>
            <param name="freezeAuthority">The public key of the freeze authority for the token mint.</param>
            <param name="programId">The public key which represents the associated program id.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.ApproveChecked(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.Byte,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to approve a transaction.
            <para>
            This instruction differs from Approve in that the amount and decimals value is checked by the caller.
            This may be useful when creating transactions offline or within a hardware wallet.
            </para>
            </summary>
            <param name="source">The public key of the source account.</param>
            <param name="delegatePublicKey">The public key of the delegate account authorized to perform a transfer from the source account.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="amount">The maximum amount of tokens the delegate may transfer.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <param name="decimals">The token decimals.</param>
            <param name="mint">The public key of the token mint.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.MintToChecked(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.Int32,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to approve a transaction.
            <para>
            This instruction differs from MintTo in that the amount and decimals value is checked by the caller.
            This may be useful when creating transactions offline or within a hardware wallet.
            </para>
            </summary>
            <param name="mint">The public key of the token mint.</param>
            <param name="destination">The public key of the account to mint tokens to.</param>
            <param name="mintAuthority">The public key of the token's mint authority account.</param>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The token decimals.</param>
            <param name="signers">Signing accounts if the <c>mintAuthority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.BurnChecked(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.Int32,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Initialize an instruction to burn tokens.
            <para>
            This instruction differs from Burn in that the amount and decimals value is checked by the caller.
            This may be useful when creating transactions offline or within a hardware wallet.
            </para>
            </summary>
            <param name="mint">The public key of the token mint.</param>
            <param name="account">The public key of the account to burn from.</param>
            <param name="authority">The public key of the authority of the source account.</param>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The token decimals.</param>
            <param name="signers">Signing accounts if the <c>authority</c> is a multi signature.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.SyncNative(Solnet.Wallet.PublicKey)">
            <summary>
            Initialize an instruction to sync native tokens.
            </summary>
            <param name="account">The public key of the token account.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.AddSigners(System.Collections.Generic.List{Solnet.Rpc.Models.AccountMeta},Solnet.Wallet.PublicKey,System.Collections.Generic.IEnumerable{Solnet.Wallet.PublicKey})">
            <summary>
            Adds the list of signers to the list of keys.
            </summary>
            <param name="keys">The instruction's list of keys.</param>
            <param name="authority">The public key of the authority account.</param>
            <param name="signers">The list of signers.</param>
            <returns>The list of keys with the added signers.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the System Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.TokenProgramData">
            <summary>
            Implements the token program data encodings.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramData.MethodOffset">
            <summary>
            The offset at which the value which defines the method begins.
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeRevokeData">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Revoke"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeApproveData(System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Approve"/> method.
            </summary>
            <param name="amount">The amount of tokens to approve the transfer of.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeInitializeAccountData">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeInitializeMintData(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.Int32,System.Int32)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMint"/> method.
            </summary>
            <param name="mintAuthority">The mint authority for the token.</param>
            <param name="freezeAuthority">The freeze authority for the token.</param>
            <param name="decimals">The amount of decimals.</param>
            <param name="freezeAuthorityOption">The freeze authority option for the token.</param>
            <remarks>The <c>freezeAuthorityOption</c> parameter is related to the existence or not of a freeze authority.</remarks>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeTransferData(System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Transfer"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeTransferCheckedData(System.UInt64,System.Int32)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.TransferChecked"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The number of decimals of the token.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeMintToData(System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.MintTo"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeInitializeMultiSignatureData(System.Int32)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMultiSignature"/> method.
            </summary>
            <param name="m">The number of signers necessary to validate the account.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeSetAuthorityData(Solnet.Programs.AuthorityType,System.Int32,Solnet.Wallet.PublicKey)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.SetAuthority"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeBurnData(System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Burn"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeCloseAccountData">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.CloseAccount"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeFreezeAccountData">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.FreezeAccount"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeThawAccountData">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.ThawAccount"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeApproveCheckedData(System.UInt64,System.Int32)">
            <summary>
            Encodes the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.ApproveChecked"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The decimals of the token.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeMintToCheckedData(System.UInt64,System.Int32)">
            <summary>
            Encodes the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.MintToChecked"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The decimals of the token.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeBurnCheckedData(System.UInt64,System.Int32)">
            <summary>
            Encodes the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.BurnChecked"/> method.
            </summary>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The decimals of the token.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeSyncNativeData">
            <summary>
            Encodes the transaction instruction data for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.SyncNative"/> method.
            </summary>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeMintData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMint"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeAccountData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeMultiSignatureData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMultiSignature"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeTransferData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Transfer"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeApproveData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Approve"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeRevokeData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Revoke"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeSetAuthorityData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.SetAuthority"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeMintToData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.MintTo"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeBurnData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Burn"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeCloseAccountData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.CloseAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeFreezeAccountData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.FreezeAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeThawAccountData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.ThawAccount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeTransferCheckedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.TransferChecked"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeApproveCheckedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.ApproveChecked"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeMintToCheckedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.MintToChecked"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeBurnCheckedData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.BurnChecked"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeSyncNativeData(Solnet.Programs.DecodedInstruction,System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.SyncNative"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeAmountLayout(System.Byte,System.UInt64)">
            <summary>
            Encodes the transaction instruction data for the methods which only require the amount.
            </summary>
            <param name="method">The method identifier.</param>
            <param name="amount">The amount of tokens.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.EncodeAmountCheckedLayout(System.Byte,System.UInt64,System.Byte)">
            <summary>
            Encodes the transaction instruction data for the methods which only require the amount and the number of decimals.
            </summary>
            <param name="method">The method identifier.</param>
            <param name="amount">The amount of tokens.</param>
            <param name="decimals">The decimals of the token.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeAccount2(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount2"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeAccount3(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount3"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeMultiSignature2(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMultiSignature2"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeMint2(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMint2"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeAmountToUiAmount(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.AmountToUiAmount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeUiAmountToAmount(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.UiAmountToAmount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeGetAccountDataSize(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.UiAmountToAmount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenProgramData.DecodeInitializeImmutableOwner(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.UiAmountToAmount"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="T:Solnet.Programs.TokenProgramInstructions">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.TokenProgram"/> along with a friendly name so as not to use reflection.
            <remarks>
            For more information see:
            https://spl.solana.com/token
            https://docs.rs/spl-token/3.2.0/spl_token/
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Programs.TokenProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.TokenProgramInstructions.Values">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.TokenProgram"/>.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMint">
            <summary>
            Initialize a token mint.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount">
            <summary>
            Initialize a token account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMultiSignature">
            <summary>
            Initialize a multi signature token account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.Transfer">
            <summary>
            Transfer token transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.Approve">
            <summary>
            Approve token transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.Revoke">
            <summary>
            Revoke token transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.SetAuthority">
            <summary>
            Set token authority transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.MintTo">
            <summary>
            MintTo token account transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.Burn">
            <summary>
            Burn token transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.CloseAccount">
            <summary>
            Close token account transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.FreezeAccount">
            <summary>
            Freeze token account transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.ThawAccount">
            <summary>
            Thaw token account transaction.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.TransferChecked">
            <summary>
            Transfer checked token transaction.
            <remarks>Differs from <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Transfer"/> in that the decimals value is asserted by the caller.</remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.ApproveChecked">
            <summary>
            Approve checked token transaction.
            <remarks>Differs from <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Approve"/> in that the decimals value is asserted by the caller.</remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.MintToChecked">
            <summary>
            MintTo checked token transaction.
            <remarks>Differs from <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.MintTo"/> in that the decimals value is asserted by the caller.</remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.BurnChecked">
            <summary>
            Burn checked token transaction.
            <remarks>Differs from <see cref="F:Solnet.Programs.TokenProgramInstructions.Values.Burn"/> in that the decimals value is asserted by the caller.</remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount2">
            <summary>
            Like InitializeAccount, but the owner pubkey is passed via instruction data
            rather than the accounts list. This variant may be preferable when using
            Cross Program Invocation from an instruction that does not need the owner's
            `AccountInfo` otherwise.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.SyncNative">
            <summary>
            SyncNative token transaction.
            Given a wrapped / native token account (a token account containing SOL)
            updates its amount field based on the account's underlying `lamports`.
            This is useful if a non-wrapped SOL account uses `system_instruction::transfer`
            to move lamports to a wrapped token account, and needs to have its token
            `amount` field updated.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeAccount3">
            <summary>
            Like InitializeAccount2, but does not require the Rent sysvar to be provided.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMultiSignature2">
            <summary>
            Like InitializeMultisig, but does not require the Rent sysvar to be provided.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeMint2">
            <summary>
            Like InitializeMint, but does not require the Rent sysvar to be provided.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.GetAccountDataSize">
            <summary>
            Gets the required size of an account for the given mint as a little-endian `u64`.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.InitializeImmutableOwner">
            <summary>
            Initialize the Immutable Owner extension for the given token account.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.AmountToUiAmount">
            <summary>
            Convert an Amount of tokens to a UiAmount `string`, using the given mint.
            In this version of the program, the mint can only specify the number of decimals.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenProgramInstructions.Values.UiAmountToAmount">
            <summary>
            Convert a UiAmount of tokens to a little-endian `u64` raw Amount, using the given mint.
            In this version of the program, the mint can only specify the number of decimals.
            </summary>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.ConstantProductCurve">
            <summary>
            Uniswap-style constant product curve, invariant = token_a_amount * token_b_amount
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.ConstantProductCurve.Serialize">
            <summary>
            Serialize the Fees
            </summary>
            <returns>Serialized Fees</returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.CurveCalculator">
            <summary>
            A curve calculator must serialize itself to 32 bytes
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.CurveCalculator.Serialize">
            <summary>
            Serialize this calculator type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.CurveType">
            <summary>
            Curve type enum for an instruction
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.CurveType.ConstantProduct">
            Uniswap-style constant product curve, invariant = token_a_amount * token_b_amount
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.CurveType.ConstantPrice">
            Flat line, always providing 1:1 from one token to another
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.CurveType.Stable">
            Stable, like uniswap, but with wide zone of 1:1 instead of one point
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.CurveType.Offset">
            Offset curve, like Uniswap, but the token B side has a faked offset
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.Fees">
            <summary>
            Encapsulates all fee information and calculations for swap operations
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.TradeFeeNumerator">
            <summary>
            Trade fee numerator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.TradeFeeDenominator">
            <summary>
            Trade fee denominator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.OwnerTradeFeeNumerator">
            <summary>
            Owner trade fee numerator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.OwnerTradeFeeDenomerator">
            <summary>
            Owner trade fee denominator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.OwnerWithrawFeeNumerator">
            <summary>
            Owner withdraw fee numerator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.OwnerWithrawFeeDenomerator">
            <summary>
            Owner withdraw fee denominator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.HostFeeNumerator">
            <summary>
            Host trading fee numerator.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.Fees.HostFeeDenomerator">
            <summary>
            Host trading fee denominator.
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.Fees.Serialize">
            <summary>
            Serialize the Fees
            </summary>
            <returns>Serialized Fees</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.Fees.Deserialize(System.Byte[])">
            <summary>
            Deserializes the Fees struct from binary.
            </summary>
            <param name="bytes">The payload to decode.</param>
            <returns>The decoded Fee object.</returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.SwapCurve">
            <summary>
            A swap curve type of a token swap. The static construction methods should be used to construct
            </summary>
        </member>
        <member name="P:Solnet.Programs.TokenSwap.Models.SwapCurve.ConstantProduct">
            <summary>
            The constant procuct curve
            </summary>
        </member>
        <member name="P:Solnet.Programs.TokenSwap.Models.SwapCurve.CurveType">
            <summary>
            The curve type.
            </summary>
        </member>
        <member name="P:Solnet.Programs.TokenSwap.Models.SwapCurve.Calculator">
            <summary>
            The calculator used
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.SwapCurve.#ctor">
            <summary>
            Create a swap curve class.  Protected as factory methods should be used to create
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.SwapCurve.Serialize">
            <summary>
            Serialize this swap curve for an instruction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.SwapCurve.Deserialize(System.Byte[])">
            <summary>
            Deserializes the SwapCurve object from binary.
            </summary>
            <param name="bytes">The payload to decode.</param>
            <returns>The decoded SwapCurve object.</returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.TokenSwapAccount">
            <summary>
            TokenSwap program state
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TOKEN_SWAP_DATA_LEN">
            <summary>
            the size of this account in bytes
            </summary>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.SwapVersion">
            <summary>
            Versions of this state account
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.SwapVersion.SwapV1">
            <summary>
            Version 1.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.Version">
            <summary>
            Version of this state account
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.IsInitialized">
            <summary>
            Initialized state
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.Nonce">
            <summary>
            Nonce used in program address.
            The program address is created deterministically with the nonce,
            swap program id, and swap account pubkey.  This program address has
            authority over the swap's token A account, token B account, and pool
            token mint.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TokenProgramId">
            <summary>
            Program ID of the tokens being exchanged.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TokenAAccount">
            <summary>
            Token A
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TokenBAccount">
            <summary>
            Token B
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.PoolMint">
            <summary>
            Pool tokens are issued when A or B tokens are deposited.
            Pool tokens can be withdrawn back to the original A or B token.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TokenAMint">
            <summary>
            Mint information for token A
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.TokenBMint">
            <summary>
            Mint information for token B
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.PoolFeeAccount">
            <summary>
            Pool token account to receive trading and / or withdrawal fees
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.Fees">
            <summary>
            All fee information
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.SwapCurve">
            <summary>
            Swap curve parameters, to be unpacked and used by the SwapCurve, which
            calculates swaps, deposits, and withdrawals
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.Models.TokenSwapAccount.Deserialize(System.Byte[])">
            <summary>
            Deserilize a token swap from the bytes of an account
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.TokenSwapProgram">
            <summary>
            Implements the Token Swap Program methods.
            <remarks>
            For more information see:
            https://spl.solana.com/token-swap
            https://docs.rs/spl-token-swap/2.1.0/spl_token_swap/
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgram.TokenSwapProgramIdKey">
            <summary>
            SPL Token Swap Program Program ID
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgram.TokenSwapProgramName">
            <summary>
            SPL Token Swap Program Program Name
            </summary>
        </member>
        <member name="P:Solnet.Programs.TokenSwap.TokenSwapProgram.OwnerKey">
            <summary>
            The owner key required to use as the fee account owner.  
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgram.TokenSwapAccountDataSize">
            <summary>
            Token Swap account layout size.
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.#ctor">
            <summary>
            Create a token swap program instance with the standard programid and program name
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.#ctor(Solnet.Wallet.PublicKey)">
            <summary>
            Create a token swap program instance with a custom programid 
            </summary>
            <param name="programId">The program id to use</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.CreateAuthority(Solnet.Wallet.PublicKey)">
            <summary>
            Create the authority
            </summary>
            <returns>The swap authority</returns>
            <exception cref="T:System.InvalidProgramException">No program account could be found (exhausted nonces)</exception>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.Initialize(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Programs.TokenSwap.Models.Fees,Solnet.Programs.TokenSwap.Models.SwapCurve)">
            <summary>
            Initializes a new swap.
            </summary>
            <param name="tokenSwapAccount">The token swap account to initialize.</param>
            <param name="tokenAAccount">token_a Account. Must be non zero, owned by swap authority.</param>
            <param name="tokenBAccount">token_b Account. Must be non zero, owned by swap authority.</param>
            <param name="poolTokenMint">Pool Token Mint. Must be empty, owned by swap authority.</param>
            <param name="poolTokenFeeAccount">Pool Token Account to deposit trading and withdraw fees. Must be empty, not owned by swap authority.</param>
            <param name="userPoolTokenAccount">Pool Token Account to deposit the initial pool token supply.  Must be empty, not owned by swap authority.</param>
            <param name="fees">Fees to use for this token swap.</param>
            <param name="swapCurve">Curve to use for this token swap.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.Swap(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64)">
            <summary>
            Swap the tokens in the pool.
            </summary>
            <param name="tokenSwapAccount">The token swap account to operate over.</param>
            <param name="userTransferAuthority">user transfer authority.</param>
            <param name="tokenSourceAccount">token_(A|B) SOURCE Account, amount is transferable by user transfer authority.</param>
            <param name="tokenBaseIntoAccount">token_(A|B) Base Account to swap INTO.  Must be the SOURCE token.</param>
            <param name="tokenBaseFromAccount">token_(A|B) Base Account to swap FROM.  Must be the DESTINATION token.</param>
            <param name="tokenDestinationAccount">token_(A|B) DESTINATION Account assigned to USER as the owner.</param>
            <param name="poolTokenMint">Pool token mint, to generate trading fees.</param>
            <param name="poolTokenFeeAccount">Fee account, to receive trading fees.</param>
            <param name="poolTokenHostFeeAccount">Host fee account to receive additional trading fees.</param>
            <param name="amountIn">SOURCE amount to transfer, output to DESTINATION is based on the exchange rate.</param>
            <param name="amountOut">Minimum amount of DESTINATION token to output, prevents excessive slippage.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.DepositAllTokenTypes(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Deposit both types of tokens into the pool.  The output is a "pool"
              token representing ownership in the pool. Inputs are converted to
              the current ratio.
            </summary>
            <param name="tokenSwapAccount">The token swap account to operate over.</param>
            <param name="userTransferAuthority">user transfer authority.</param>
            <param name="tokenAuserAccount">token_a - user transfer authority can transfer amount.</param>
            <param name="tokenBuserAccount">token_b - user transfer authority can transfer amount.</param>
            <param name="tokenADepositAccount">token_a Base Account to deposit into.</param>
            <param name="tokenBDepositAccount">token_b Base Account to deposit into.</param>
            <param name="poolTokenMint">Pool MINT account, swap authority is the owner.</param>
            <param name="poolTokenUserAccount">Pool Account to deposit the generated tokens, user is the owner.</param>
            <param name="poolTokenAmount">Pool token amount to transfer. token_a and token_b amount are set by the current exchange rate and size of the pool.</param>
            <param name="maxTokenA">Maximum token A amount to deposit, prevents excessive slippage.</param>
            <param name="maxTokenB">Maximum token B amount to deposit, prevents excessive slippage.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.WithdrawAllTokenTypes(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Withdraw both types of tokens from the pool at the current ratio, given
              pool tokens.  The pool tokens are burned in exchange for an equivalent
              amount of token A and B.
            </summary>
            <param name="tokenSwapAccount">The token swap account to operate over.</param>
            <param name="userTransferAuthority">user transfer authority.</param>
            <param name="poolTokenMint">Pool MINT account, swap authority is the owner.</param>
            <param name="sourcePoolAccount">SOURCE Pool account, amount is transferable by user transfer authority.</param>
            <param name="tokenASwapAccount">token_a Swap Account to withdraw FROM.</param>
            <param name="tokenBSwapAccount">token_b Swap Account to withdraw FROM.</param>
            <param name="tokenAUserAccount">token_a user Account to credit.</param>
            <param name="tokenBUserAccount">token_b user Account to credit.</param>
            <param name="feeAccount">Fee account, to receive withdrawal fees.</param>
            <param name="poolTokenAmount">Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned.</param>
            <param name="minTokenA">Minimum amount of token A to receive, prevents excessive slippage.</param>
            <param name="minTokenB">Minimum amount of token B to receive, prevents excessive slippage.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.DepositSingleTokenTypeExactAmountIn(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64)">
            <summary>
            Deposit one type of tokens into the pool.  The output is a "pool" token
              representing ownership into the pool. Input token is converted as if
              a swap and deposit all token types were performed.
            </summary>
            <param name="tokenSwapAccount">The token swap account to operate over.</param>
            <param name="userTransferAuthority">user transfer authority.</param>
            <param name="sourceAccount">token_(A|B) SOURCE Account, amount is transferable by user transfer authority.</param>
            <param name="destinationTokenAAccount">token_a Swap Account, may deposit INTO.</param>
            <param name="destinationTokenBAccount">token_b Swap Account, may deposit INTO.</param>
            <param name="poolMintAccount">Pool MINT account, swap authority is the owner.</param>
            <param name="poolTokenUserAccount">Pool Account to deposit the generated tokens, user is the owner.</param>
            <param name="sourceTokenAmount">Token amount to deposit.</param>
            <param name="minPoolTokenAmount">Pool token amount to receive in exchange. The amount is set by the current exchange rate and size of the pool.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.WithdrawSingleTokenTypeExactAmountOut(Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,Solnet.Wallet.PublicKey,System.UInt64,System.UInt64)">
            <summary>
            Withdraw one token type from the pool at the current ratio given the
              exact amount out expected.
            </summary>
            <param name="tokenSwapAccount">The token swap account to operate over.</param>
            <param name="userTransferAuthority">user transfer authority.</param>
            <param name="poolMintAccount">Pool mint account, swap authority is the owner.</param>
            <param name="sourceUserAccount">SOURCE Pool account, amount is transferable by user transfer authority.</param>
            <param name="tokenASwapAccount">token_a Swap Account to potentially withdraw from.</param>
            <param name="tokenBSwapAccount">token_b Swap Account to potentially withdraw from.</param>
            <param name="tokenUserAccount">token_(A|B) User Account to credit.</param>
            <param name="feeAccount">Fee account, to receive withdrawal fees.</param>
            <param name="destTokenAmount">Amount of token A or B to receive.</param>
            <param name="maxPoolTokenAmount">Maximum amount of pool tokens to burn. User receives an output of token A or B based on the percentage of the pool tokens that are returned.</param>
            <returns>The transaction instruction.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgram.Decode(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes an instruction created by the System Program.
            </summary>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
            <returns>A decoded instruction.</returns>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.TokenSwapProgramData">
            <summary>
            Implements the token swap program data encodings.
            </summary>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeInitializeData(System.Byte,Solnet.Programs.TokenSwap.Models.Fees,Solnet.Programs.TokenSwap.Models.SwapCurve)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Initialize"/> method.
            </summary>
            <param name="nonce">nonce used to create valid program address.</param>
            <param name="fees">all swap fees.</param>
            <param name="swapCurve">swap curve info for pool, including CurveType and anything else that may be required.</param>
            <remarks>The <c>freezeAuthorityOption</c> parameter is related to the existence or not of a freeze authority.</remarks>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeSwapData(System.UInt64,System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Swap"/> method.
            </summary>
            <param name="amountIn">The amount of tokens in.</param>
            <param name="amountOut">The amount of tokens out.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeDepositAllTokenTypesData(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositAllTokenTypes"/> method.
            </summary>
            <param name="poolTokenAmount">The amount of tokens out.</param>
            <param name="maxTokenAAmount">The max amount of tokens A.</param>
            <param name="maxTokenBAmount">The max amount of tokens B.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeWithdrawAllTokenTypesData(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawAllTokenTypes"/> method.
            </summary>
            <param name="poolTokenAmount">The amount of tokens in.</param>
            <param name="minTokenAAmount">The maminx amount of tokens A.</param>
            <param name="minTokenBAmount">The min amount of tokens B.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeDepositSingleTokenTypeExactAmountInData(System.UInt64,System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositSingleTokenTypeExactAmountIn"/> method.
            </summary>
            <param name="sourceTokenAmount">The amount of tokens in.</param>
            <param name="minPoolTokenAmount">The min amount of pool tokens out.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.EncodeWithdrawSingleTokenTypeExactAmountOutData(System.UInt64,System.UInt64)">
            <summary>
            Encode the transaction instruction data for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawSingleTokenTypeExactAmountOut"/> method.
            </summary>
            <param name="destTokenAmount">The amount of tokens out.</param>
            <param name="maxPoolTokenAmount">The max amount of pool tokens in.</param>
            <returns>The byte array with the encoded data.</returns>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeInitializeData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Initialize"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeSwapData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Swap"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeDepositAllTokenTypesData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositAllTokenTypes"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeWithdrawAllTokenTypesData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawAllTokenTypes"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeDepositSingleTokenTypeExactAmountInData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositSingleTokenTypeExactAmountIn"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="M:Solnet.Programs.TokenSwap.TokenSwapProgramData.DecodeWithdrawSingleTokenTypeExactAmountOutData(Solnet.Programs.DecodedInstruction,System.ReadOnlySpan{System.Byte},System.Collections.Generic.IList{Solnet.Wallet.PublicKey},System.Byte[])">
            <summary>
            Decodes the instruction instruction data  for the <see cref="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawSingleTokenTypeExactAmountOut"/> method
            </summary>
            <param name="decodedInstruction">The decoded instruction to add data to.</param>
            <param name="data">The instruction data to decode.</param>
            <param name="keys">The account keys present in the transaction.</param>
            <param name="keyIndices">The indices of the account keys for the instruction as they appear in the transaction.</param>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.TokenSwap.TokenSwapProgram"/> along with a friendly name so as not to use reflection.
            <remarks>
            For more information see:
            https://spl.solana.com/token-swap
            https://docs.rs/spl-token-swap/2.1.0/spl_token_swap/
            </remarks>
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Names">
            <summary>
            Represents the user-friendly names for the instruction types for the <see cref="T:Solnet.Programs.TokenSwap.TokenSwapProgram"/>.
            </summary>
        </member>
        <member name="T:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values">
            <summary>
            Represents the instruction types for the <see cref="T:Solnet.Programs.TokenSwap.TokenSwapProgram"/>.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Initialize">
            <summary>
            Initializes a new swap.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.Swap">
            <summary>
            Swap the tokens in the pool.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositAllTokenTypes">
            <summary>
            Deposit both types of tokens into the pool.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawAllTokenTypes">
            <summary>
            Withdraw both types of tokens from the pool at the current ratio.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.DepositSingleTokenTypeExactAmountIn">
            <summary>
            Deposit one type of tokens into the pool.
            </summary>
        </member>
        <member name="F:Solnet.Programs.TokenSwap.TokenSwapProgramInstructions.Values.WithdrawSingleTokenTypeExactAmountOut">
            <summary>
            Withdraw one token type from the pool at the current ratio.
            </summary>
        </member>
        <member name="T:Solnet.Programs.Utilities.Deserialization">
            <summary>
            Extension methods for deserialization of program data using <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetU8(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 8-bit unsigned integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 8-bit unsigned integer begins.</param>
            <returns>The 8-bit unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetU16(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 16-bit unsigned integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 16-bit unsigned integer begins.</param>
            <returns>The 16-bit unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetU32(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 32-bit unsigned integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 32-bit unsigned integer begins.</param>
            <returns>The 32-bit unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetU64(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 64-bit unsigned integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 64-bit unsigned integer begins.</param>
            <returns>The 64-bit unsigned integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetS8(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 8-bit signed integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 8-bit signed integer begins.</param>
            <returns>The 8-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetS16(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 16-bit signed integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 16-bit signed integer begins.</param>
            <returns>The 16-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetS32(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 32-bit signed integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 32-bit signed integer begins.</param>
            <returns>The 32-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetS64(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a 64-bit signed integer from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 64-bit signed integer begins.</param>
            <returns>The 64-bit signed integer.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetSpan(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Get a span from the read-only span at the given offset with the given length.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the desired span begins.</param>
            <param name="length">The desired length for the new span.</param>
            <returns>A <see cref="T:System.Span`1"/> of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetPubKey(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a <see cref="T:Solnet.Wallet.PublicKey"/> encoded as a 32 byte array from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the 32 byte array begins.</param>
            <returns>The <see cref="T:Solnet.Wallet.PublicKey"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetBigInt(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get an arbitrarily long number from the span at the given offset, specifying it's length in bytes.
            Optionally specify if it's signed and the endianness.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the arbitrarily long number begins.</param>
            <param name="length">The byte-length of the arbitrarily long number.</param>
            <param name="isUnsigned">Whether the value does not use signed encoding.</param>
            <param name="isBigEndian">Whether the value is in big-endian byte order.</param>
            <returns>The <see cref="T:System.Numerics.BigInteger"/> instance that represents the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetDouble(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a double-precision floating-point number from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the double-precision floating-point number begins.</param>
            <returns>The <see cref="T:System.Double"/> instance that represents the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetSingle(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a single-precision floating-point number from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the single-precision floating-point number begins.</param>
            <returns>The <see cref="T:System.Single"/> instance that represents the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetBool(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Get a boolean value from the span at the given offset.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the boolean value is located.</param>
            <returns>The <see cref="T:System.Boolean"/> instance that represents the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.DecodeBincodeString(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Decodes a string from a transaction instruction.
            </summary>
            <param name="data">The data to decode.</param>
            <param name="offset">The offset at which the string begins.</param>
            <returns>The decoded data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetBorshString(System.ReadOnlySpan{System.Byte},System.Int32,System.String@)">
            <summary>
            Decodes a string from a transaction instruction.
            </summary>
            <param name="data">The data to decode.</param>
            <param name="offset">The offset at which the string begins.</param>
            <param name="result">The decoded data./>.</param>
            <returns>The length in bytes that was read from the original buffer, including the</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Deserialization.GetBytes(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Get a span from the read-only span at the given offset with the given length.
            </summary>
            <param name="data">The span to get data from.</param>
            <param name="offset">The offset at which the desired <c>byte[]</c> begins.</param>
            <param name="length">The desired length for the new <c>byte[]</c>.</param>
            <returns>A <c>byte[]</c> of bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the span.</exception>
        </member>
        <member name="T:Solnet.Programs.Utilities.Serialization">
            <summary>
            Extension methods for serialization of program data using <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteU8(System.Byte[],System.Byte,System.Int32)">
            <summary>
            Write a 8-bit unsigned integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 8-bit unsigned integer value to write.</param>
            <param name="offset">The offset at which to write the 8-bit unsigned integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteBool(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Write a boolean to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The boolean value to write.</param>
            <param name="offset">The offset at which to write the 8-bit unsigned integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteU16(System.Byte[],System.UInt16,System.Int32)">
            <summary>
            Write a 16-bit unsigned integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 16-bit unsigned integer value to write.</param>
            <param name="offset">The offset at which to write the 16-bit unsigned integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteU32(System.Byte[],System.UInt32,System.Int32)">
            <summary>
            Write a 32-bit unsigned integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 32-bit unsigned integer value to write.</param>
            <param name="offset">The offset at which to write the 32-bit unsigned integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteU64(System.Byte[],System.UInt64,System.Int32)">
            <summary>
            Write a 64-bit unsigned integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 64-bit unsigned integer value to write.</param>
            <param name="offset">The offset at which to write the 64-bit unsigned integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteS8(System.Byte[],System.SByte,System.Int32)">
            <summary>
            Write a 8-bit signed integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 8-bit signed integer value to write.</param>
            <param name="offset">The offset at which to write the 8-bit signed integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteS16(System.Byte[],System.Int16,System.Int32)">
            <summary>
            Write a 16-bit signed integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 16-bit signed integer value to write.</param>
            <param name="offset">The offset at which to write the 16-bit signed integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteS32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a 32-bit signed integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 32-bit signed integer value to write.</param>
            <param name="offset">The offset at which to write the 32-bit signed integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteS64(System.Byte[],System.Int64,System.Int32)">
            <summary>
            Write a 64-bit signed integer to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The 64-bit signed integer value to write.</param>
            <param name="offset">The offset at which to write the 64-bit signed integer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteSpan(System.Byte[],System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Write a span of bytes to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WritePubKey(System.Byte[],Solnet.Wallet.PublicKey,System.Int32)">
            <summary>
            Write a <see cref="T:Solnet.Wallet.PublicKey"/> encoded as a 32 byte array to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="publicKey">The <see cref="T:Solnet.Wallet.PublicKey"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:Solnet.Wallet.PublicKey"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteBigInt(System.Byte[],System.Numerics.BigInteger,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Write an arbitrarily long number to the byte array at the given offset, specifying it's length in bytes.
            Optionally specify if it's signed and the endianness.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="bigInteger">The <see cref="T:System.Numerics.BigInteger"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:System.Numerics.BigInteger"/>.</param>
            <param name="length">The length in bytes.</param>
            <param name="isUnsigned">Whether the value does not use signed encoding.</param>
            <param name="isBigEndian">Whether the value is in big-endian byte order.</param>
            <returns>An integer representing the number of bytes written to the byte array.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteDouble(System.Byte[],System.Double,System.Int32)">
            <summary>
            Write a double-precision floating-point value to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The <see cref="T:System.Double"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:System.Double"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteSingle(System.Byte[],System.Single,System.Int32)">
            <summary>
            Write a single-precision floating-point value to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The <see cref="T:System.Single"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:System.Single"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is too big for the data array.</exception>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.WriteBorshString(System.Byte[],System.String,System.Int32)">
            <summary>
            Write a UTF8 string value to the byte array at the given offset.
            </summary>
            <param name="data">The byte array to write data to.</param>
            <param name="value">The <see cref="T:System.String"/> to write.</param>
            <param name="offset">The offset at which to write the <see cref="T:System.String"/>.</param>
            <returns>Returns the number of bytes written.</returns>
        </member>
        <member name="M:Solnet.Programs.Utilities.Serialization.EncodeBincodeString(System.String)">
            <summary>
            Encodes a string for a transaction
            </summary>
            <param name="data"> the string to be encoded</param>
            <returns></returns>
        </member>
        <member name="T:Solnet.Programs.Utilities.SolHelper">
            <summary>
            Helper class for conversion between Sol and Lamports.
            </summary>
        </member>
        <member name="F:Solnet.Programs.Utilities.SolHelper.LAMPORTS_PER_SOL">
            <summary>
            Number of Lamports per Sol.
            </summary>
        </member>
        <member name="M:Solnet.Programs.Utilities.SolHelper.ConvertToSol(System.UInt64)">
            <summary>
            Convert Lamports value into Sol decimal value.
            </summary>
            <param name="lamports"></param>
            <returns></returns>
        </member>
        <member name="M:Solnet.Programs.Utilities.SolHelper.ConvertToLamports(System.Decimal)">
            <summary>
            Convert a decimal Sol value into Lamports ulong value.
            </summary>
            <param name="sol"></param>
            <returns></returns>
        </member>
    </members>
</doc>
